
zigbeegp17.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000108  00800200  00004810  000048a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004810  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000022  00800308  00800308  000049ac  2**0
                  ALLOC
  3 .debug_aranges 000001e0  00000000  00000000  000049ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000640  00000000  00000000  00004b8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003684  00000000  00000000  000051cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000016f1  00000000  00000000  00008850  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002b3a  00000000  00000000  00009f41  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000500  00000000  00000000  0000ca7c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000072c  00000000  00000000  0000cf7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a1a  00000000  00000000  0000d6a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  0000e0c2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b3 00 	jmp	0x166	; 0x166 <__ctors_end>
       4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
       8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
       c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      10:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      14:	0c 94 29 0d 	jmp	0x1a52	; 0x1a52 <__vector_5>
      18:	0c 94 46 0d 	jmp	0x1a8c	; 0x1a8c <__vector_6>
      1c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      20:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      24:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      28:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      2c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      30:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      34:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      38:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      3c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      40:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      44:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      48:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      4c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      50:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      54:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      58:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      5c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      60:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      64:	0c 94 d3 0a 	jmp	0x15a6	; 0x15a6 <__vector_25>
      68:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      6c:	0c 94 f4 0a 	jmp	0x15e8	; 0x15e8 <__vector_27>
      70:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      74:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      78:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      7c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      80:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      84:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      88:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      8c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      90:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      94:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      98:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      9c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      ac:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      bc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      cc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      dc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      e0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      e4:	07 63       	ori	r16, 0x37	; 55
      e6:	42 36       	cpi	r20, 0x62	; 98
      e8:	b7 9b       	sbis	0x16, 7	; 22
      ea:	d8 a7       	std	Y+40, r29	; 0x28
      ec:	1a 39       	cpi	r17, 0x9A	; 154
      ee:	68 56       	subi	r22, 0x68	; 104
      f0:	18 ae       	std	Y+56, r1	; 0x38
      f2:	ba ab       	std	Y+50, r27	; 0x32
      f4:	55 8c       	ldd	r5, Z+29	; 0x1d
      f6:	1d 3c       	cpi	r17, 0xCD	; 205
      f8:	b7 cc       	rjmp	.-1682   	; 0xfffffa68 <__eeprom_end+0xff7efa68>
      fa:	57 63       	ori	r21, 0x37	; 55
      fc:	bd 6d       	ori	r27, 0xDD	; 221
      fe:	ed fd       	.word	0xfded	; ????
     100:	75 3e       	cpi	r23, 0xE5	; 229
     102:	f6 17       	cp	r31, r22
     104:	72 31       	cpi	r23, 0x12	; 18
     106:	bf 00       	.word	0x00bf	; ????
     108:	00 00       	nop
     10a:	80 3f       	cpi	r24, 0xF0	; 240
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 00       	nop
     110:	be 92       	st	-X, r11
     112:	24 49       	sbci	r18, 0x94	; 148
     114:	12 3e       	cpi	r17, 0xE2	; 226
     116:	ab aa       	std	Y+51, r10	; 0x33
     118:	aa 2a       	or	r10, r26
     11a:	be cd       	rjmp	.-1156   	; 0xfffffc98 <__eeprom_end+0xff7efc98>
     11c:	cc cc       	rjmp	.-1640   	; 0xfffffab6 <__eeprom_end+0xff7efab6>
     11e:	4c 3e       	cpi	r20, 0xEC	; 236
     120:	00 00       	nop
     122:	00 80       	ld	r0, Z
     124:	be ab       	std	Y+54, r27	; 0x36
     126:	aa aa       	std	Y+50, r10	; 0x32
     128:	aa 3e       	cpi	r26, 0xEA	; 234
     12a:	00 00       	nop
     12c:	00 00       	nop
     12e:	bf 00       	.word	0x00bf	; ????
     130:	00 00       	nop
     132:	80 3f       	cpi	r24, 0xF0	; 240
     134:	00 00       	nop
     136:	00 00       	nop
     138:	00 08       	sbc	r0, r0
     13a:	41 78       	andi	r20, 0x81	; 129
     13c:	d3 bb       	out	0x13, r29	; 19
     13e:	43 87       	std	Z+11, r20	; 0x0b
     140:	d1 13       	cpse	r29, r17
     142:	3d 19       	sub	r19, r13
     144:	0e 3c       	cpi	r16, 0xCE	; 206
     146:	c3 bd       	out	0x23, r28	; 35
     148:	42 82       	std	Z+2, r4	; 0x02
     14a:	ad 2b       	or	r26, r29
     14c:	3e 68       	ori	r19, 0x8E	; 142
     14e:	ec 82       	std	Y+4, r14	; 0x04
     150:	76 be       	out	0x36, r7	; 54
     152:	d9 8f       	std	Y+25, r29	; 0x19
     154:	e1 a9       	ldd	r30, Z+49	; 0x31
     156:	3e 4c       	sbci	r19, 0xCE	; 206
     158:	80 ef       	ldi	r24, 0xF0	; 240
     15a:	ff be       	out	0x3f, r15	; 63
     15c:	01 c4       	rjmp	.+2050   	; 0x960 <lcd_set_4bit+0x7b4>
     15e:	ff 7f       	andi	r31, 0xFF	; 255
     160:	3f 00       	.word	0x003f	; ????
     162:	00 00       	nop
	...

00000166 <__ctors_end>:
     166:	11 24       	eor	r1, r1
     168:	1f be       	out	0x3f, r1	; 63
     16a:	cf ef       	ldi	r28, 0xFF	; 255
     16c:	d1 e2       	ldi	r29, 0x21	; 33
     16e:	de bf       	out	0x3e, r29	; 62
     170:	cd bf       	out	0x3d, r28	; 61
     172:	00 e0       	ldi	r16, 0x00	; 0
     174:	0c bf       	out	0x3c, r16	; 60

00000176 <__do_copy_data>:
     176:	13 e0       	ldi	r17, 0x03	; 3
     178:	a0 e0       	ldi	r26, 0x00	; 0
     17a:	b2 e0       	ldi	r27, 0x02	; 2
     17c:	e0 e1       	ldi	r30, 0x10	; 16
     17e:	f8 e4       	ldi	r31, 0x48	; 72
     180:	00 e0       	ldi	r16, 0x00	; 0
     182:	0b bf       	out	0x3b, r16	; 59
     184:	02 c0       	rjmp	.+4      	; 0x18a <__do_copy_data+0x14>
     186:	07 90       	elpm	r0, Z+
     188:	0d 92       	st	X+, r0
     18a:	a8 30       	cpi	r26, 0x08	; 8
     18c:	b1 07       	cpc	r27, r17
     18e:	d9 f7       	brne	.-10     	; 0x186 <__do_copy_data+0x10>

00000190 <__do_clear_bss>:
     190:	13 e0       	ldi	r17, 0x03	; 3
     192:	a8 e0       	ldi	r26, 0x08	; 8
     194:	b3 e0       	ldi	r27, 0x03	; 3
     196:	01 c0       	rjmp	.+2      	; 0x19a <.do_clear_bss_start>

00000198 <.do_clear_bss_loop>:
     198:	1d 92       	st	X+, r1

0000019a <.do_clear_bss_start>:
     19a:	aa 32       	cpi	r26, 0x2A	; 42
     19c:	b1 07       	cpc	r27, r17
     19e:	e1 f7       	brne	.-8      	; 0x198 <.do_clear_bss_loop>
     1a0:	0e 94 75 10 	call	0x20ea	; 0x20ea <main>
     1a4:	0c 94 06 24 	jmp	0x480c	; 0x480c <_exit>

000001a8 <__bad_interrupt>:
     1a8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ac <lcd_set_4bit>:
int i;


/*****Function to Reset LCD*****/
void lcd_set_4bit()
{
     1ac:	0f 93       	push	r16
     1ae:	1f 93       	push	r17
     1b0:	df 93       	push	r29
     1b2:	cf 93       	push	r28
     1b4:	cd b7       	in	r28, 0x3d	; 61
     1b6:	de b7       	in	r29, 0x3e	; 62
     1b8:	c0 57       	subi	r28, 0x70	; 112
     1ba:	d0 40       	sbci	r29, 0x00	; 0
     1bc:	0f b6       	in	r0, 0x3f	; 63
     1be:	f8 94       	cli
     1c0:	de bf       	out	0x3e, r29	; 62
     1c2:	0f be       	out	0x3f, r0	; 63
     1c4:	cd bf       	out	0x3d, r28	; 61
     1c6:	fe 01       	movw	r30, r28
     1c8:	e3 59       	subi	r30, 0x93	; 147
     1ca:	ff 4f       	sbci	r31, 0xFF	; 255
     1cc:	80 e0       	ldi	r24, 0x00	; 0
     1ce:	90 e0       	ldi	r25, 0x00	; 0
     1d0:	a0 e8       	ldi	r26, 0x80	; 128
     1d2:	bf e3       	ldi	r27, 0x3F	; 63
     1d4:	80 83       	st	Z, r24
     1d6:	91 83       	std	Z+1, r25	; 0x01
     1d8:	a2 83       	std	Z+2, r26	; 0x02
     1da:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     1dc:	8e 01       	movw	r16, r28
     1de:	07 59       	subi	r16, 0x97	; 151
     1e0:	1f 4f       	sbci	r17, 0xFF	; 255
     1e2:	fe 01       	movw	r30, r28
     1e4:	e3 59       	subi	r30, 0x93	; 147
     1e6:	ff 4f       	sbci	r31, 0xFF	; 255
     1e8:	60 81       	ld	r22, Z
     1ea:	71 81       	ldd	r23, Z+1	; 0x01
     1ec:	82 81       	ldd	r24, Z+2	; 0x02
     1ee:	93 81       	ldd	r25, Z+3	; 0x03
     1f0:	2d ec       	ldi	r18, 0xCD	; 205
     1f2:	3c ec       	ldi	r19, 0xCC	; 204
     1f4:	4c e2       	ldi	r20, 0x2C	; 44
     1f6:	55 e4       	ldi	r21, 0x45	; 69
     1f8:	0e 94 ee 1b 	call	0x37dc	; 0x37dc <__mulsf3>
     1fc:	dc 01       	movw	r26, r24
     1fe:	cb 01       	movw	r24, r22
     200:	f8 01       	movw	r30, r16
     202:	80 83       	st	Z, r24
     204:	91 83       	std	Z+1, r25	; 0x01
     206:	a2 83       	std	Z+2, r26	; 0x02
     208:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     20a:	fe 01       	movw	r30, r28
     20c:	e7 59       	subi	r30, 0x97	; 151
     20e:	ff 4f       	sbci	r31, 0xFF	; 255
     210:	60 81       	ld	r22, Z
     212:	71 81       	ldd	r23, Z+1	; 0x01
     214:	82 81       	ldd	r24, Z+2	; 0x02
     216:	93 81       	ldd	r25, Z+3	; 0x03
     218:	20 e0       	ldi	r18, 0x00	; 0
     21a:	30 e0       	ldi	r19, 0x00	; 0
     21c:	40 e8       	ldi	r20, 0x80	; 128
     21e:	5f e3       	ldi	r21, 0x3F	; 63
     220:	0e 94 f4 1d 	call	0x3be8	; 0x3be8 <__ltsf2>
     224:	88 23       	and	r24, r24
     226:	44 f4       	brge	.+16     	; 0x238 <lcd_set_4bit+0x8c>
		__ticks = 1;
     228:	fe 01       	movw	r30, r28
     22a:	e9 59       	subi	r30, 0x99	; 153
     22c:	ff 4f       	sbci	r31, 0xFF	; 255
     22e:	81 e0       	ldi	r24, 0x01	; 1
     230:	90 e0       	ldi	r25, 0x00	; 0
     232:	91 83       	std	Z+1, r25	; 0x01
     234:	80 83       	st	Z, r24
     236:	64 c0       	rjmp	.+200    	; 0x300 <lcd_set_4bit+0x154>
	else if (__tmp > 65535)
     238:	fe 01       	movw	r30, r28
     23a:	e7 59       	subi	r30, 0x97	; 151
     23c:	ff 4f       	sbci	r31, 0xFF	; 255
     23e:	60 81       	ld	r22, Z
     240:	71 81       	ldd	r23, Z+1	; 0x01
     242:	82 81       	ldd	r24, Z+2	; 0x02
     244:	93 81       	ldd	r25, Z+3	; 0x03
     246:	20 e0       	ldi	r18, 0x00	; 0
     248:	3f ef       	ldi	r19, 0xFF	; 255
     24a:	4f e7       	ldi	r20, 0x7F	; 127
     24c:	57 e4       	ldi	r21, 0x47	; 71
     24e:	0e 94 94 1d 	call	0x3b28	; 0x3b28 <__gtsf2>
     252:	18 16       	cp	r1, r24
     254:	0c f0       	brlt	.+2      	; 0x258 <lcd_set_4bit+0xac>
     256:	43 c0       	rjmp	.+134    	; 0x2de <lcd_set_4bit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     258:	fe 01       	movw	r30, r28
     25a:	e3 59       	subi	r30, 0x93	; 147
     25c:	ff 4f       	sbci	r31, 0xFF	; 255
     25e:	60 81       	ld	r22, Z
     260:	71 81       	ldd	r23, Z+1	; 0x01
     262:	82 81       	ldd	r24, Z+2	; 0x02
     264:	93 81       	ldd	r25, Z+3	; 0x03
     266:	20 e0       	ldi	r18, 0x00	; 0
     268:	30 e0       	ldi	r19, 0x00	; 0
     26a:	40 e2       	ldi	r20, 0x20	; 32
     26c:	51 e4       	ldi	r21, 0x41	; 65
     26e:	0e 94 ee 1b 	call	0x37dc	; 0x37dc <__mulsf3>
     272:	dc 01       	movw	r26, r24
     274:	cb 01       	movw	r24, r22
     276:	8e 01       	movw	r16, r28
     278:	09 59       	subi	r16, 0x99	; 153
     27a:	1f 4f       	sbci	r17, 0xFF	; 255
     27c:	bc 01       	movw	r22, r24
     27e:	cd 01       	movw	r24, r26
     280:	0e 94 18 1a 	call	0x3430	; 0x3430 <__fixunssfsi>
     284:	dc 01       	movw	r26, r24
     286:	cb 01       	movw	r24, r22
     288:	f8 01       	movw	r30, r16
     28a:	91 83       	std	Z+1, r25	; 0x01
     28c:	80 83       	st	Z, r24
     28e:	1f c0       	rjmp	.+62     	; 0x2ce <lcd_set_4bit+0x122>
     290:	fe 01       	movw	r30, r28
     292:	eb 59       	subi	r30, 0x9B	; 155
     294:	ff 4f       	sbci	r31, 0xFF	; 255
     296:	84 e1       	ldi	r24, 0x14	; 20
     298:	91 e0       	ldi	r25, 0x01	; 1
     29a:	91 83       	std	Z+1, r25	; 0x01
     29c:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     29e:	fe 01       	movw	r30, r28
     2a0:	eb 59       	subi	r30, 0x9B	; 155
     2a2:	ff 4f       	sbci	r31, 0xFF	; 255
     2a4:	80 81       	ld	r24, Z
     2a6:	91 81       	ldd	r25, Z+1	; 0x01
     2a8:	01 97       	sbiw	r24, 0x01	; 1
     2aa:	f1 f7       	brne	.-4      	; 0x2a8 <lcd_set_4bit+0xfc>
     2ac:	fe 01       	movw	r30, r28
     2ae:	eb 59       	subi	r30, 0x9B	; 155
     2b0:	ff 4f       	sbci	r31, 0xFF	; 255
     2b2:	91 83       	std	Z+1, r25	; 0x01
     2b4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     2b6:	de 01       	movw	r26, r28
     2b8:	a9 59       	subi	r26, 0x99	; 153
     2ba:	bf 4f       	sbci	r27, 0xFF	; 255
     2bc:	fe 01       	movw	r30, r28
     2be:	e9 59       	subi	r30, 0x99	; 153
     2c0:	ff 4f       	sbci	r31, 0xFF	; 255
     2c2:	80 81       	ld	r24, Z
     2c4:	91 81       	ldd	r25, Z+1	; 0x01
     2c6:	01 97       	sbiw	r24, 0x01	; 1
     2c8:	11 96       	adiw	r26, 0x01	; 1
     2ca:	9c 93       	st	X, r25
     2cc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     2ce:	fe 01       	movw	r30, r28
     2d0:	e9 59       	subi	r30, 0x99	; 153
     2d2:	ff 4f       	sbci	r31, 0xFF	; 255
     2d4:	80 81       	ld	r24, Z
     2d6:	91 81       	ldd	r25, Z+1	; 0x01
     2d8:	00 97       	sbiw	r24, 0x00	; 0
     2da:	d1 f6       	brne	.-76     	; 0x290 <lcd_set_4bit+0xe4>
     2dc:	27 c0       	rjmp	.+78     	; 0x32c <lcd_set_4bit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     2de:	8e 01       	movw	r16, r28
     2e0:	09 59       	subi	r16, 0x99	; 153
     2e2:	1f 4f       	sbci	r17, 0xFF	; 255
     2e4:	fe 01       	movw	r30, r28
     2e6:	e7 59       	subi	r30, 0x97	; 151
     2e8:	ff 4f       	sbci	r31, 0xFF	; 255
     2ea:	60 81       	ld	r22, Z
     2ec:	71 81       	ldd	r23, Z+1	; 0x01
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	0e 94 18 1a 	call	0x3430	; 0x3430 <__fixunssfsi>
     2f6:	dc 01       	movw	r26, r24
     2f8:	cb 01       	movw	r24, r22
     2fa:	f8 01       	movw	r30, r16
     2fc:	91 83       	std	Z+1, r25	; 0x01
     2fe:	80 83       	st	Z, r24
     300:	de 01       	movw	r26, r28
     302:	ad 59       	subi	r26, 0x9D	; 157
     304:	bf 4f       	sbci	r27, 0xFF	; 255
     306:	fe 01       	movw	r30, r28
     308:	e9 59       	subi	r30, 0x99	; 153
     30a:	ff 4f       	sbci	r31, 0xFF	; 255
     30c:	80 81       	ld	r24, Z
     30e:	91 81       	ldd	r25, Z+1	; 0x01
     310:	8d 93       	st	X+, r24
     312:	9c 93       	st	X, r25
     314:	fe 01       	movw	r30, r28
     316:	ed 59       	subi	r30, 0x9D	; 157
     318:	ff 4f       	sbci	r31, 0xFF	; 255
     31a:	80 81       	ld	r24, Z
     31c:	91 81       	ldd	r25, Z+1	; 0x01
     31e:	01 97       	sbiw	r24, 0x01	; 1
     320:	f1 f7       	brne	.-4      	; 0x31e <lcd_set_4bit+0x172>
     322:	fe 01       	movw	r30, r28
     324:	ed 59       	subi	r30, 0x9D	; 157
     326:	ff 4f       	sbci	r31, 0xFF	; 255
     328:	91 83       	std	Z+1, r25	; 0x01
     32a:	80 83       	st	Z, r24
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     32c:	a8 e2       	ldi	r26, 0x28	; 40
     32e:	b0 e0       	ldi	r27, 0x00	; 0
     330:	e8 e2       	ldi	r30, 0x28	; 40
     332:	f0 e0       	ldi	r31, 0x00	; 0
     334:	80 81       	ld	r24, Z
     336:	8e 7f       	andi	r24, 0xFE	; 254
     338:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     33a:	a8 e2       	ldi	r26, 0x28	; 40
     33c:	b0 e0       	ldi	r27, 0x00	; 0
     33e:	e8 e2       	ldi	r30, 0x28	; 40
     340:	f0 e0       	ldi	r31, 0x00	; 0
     342:	80 81       	ld	r24, Z
     344:	8d 7f       	andi	r24, 0xFD	; 253
     346:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     348:	e8 e2       	ldi	r30, 0x28	; 40
     34a:	f0 e0       	ldi	r31, 0x00	; 0
     34c:	80 e3       	ldi	r24, 0x30	; 48
     34e:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     350:	a8 e2       	ldi	r26, 0x28	; 40
     352:	b0 e0       	ldi	r27, 0x00	; 0
     354:	e8 e2       	ldi	r30, 0x28	; 40
     356:	f0 e0       	ldi	r31, 0x00	; 0
     358:	80 81       	ld	r24, Z
     35a:	84 60       	ori	r24, 0x04	; 4
     35c:	8c 93       	st	X, r24
     35e:	fe 01       	movw	r30, r28
     360:	e1 5a       	subi	r30, 0xA1	; 161
     362:	ff 4f       	sbci	r31, 0xFF	; 255
     364:	80 e0       	ldi	r24, 0x00	; 0
     366:	90 e0       	ldi	r25, 0x00	; 0
     368:	a0 ea       	ldi	r26, 0xA0	; 160
     36a:	b0 e4       	ldi	r27, 0x40	; 64
     36c:	80 83       	st	Z, r24
     36e:	91 83       	std	Z+1, r25	; 0x01
     370:	a2 83       	std	Z+2, r26	; 0x02
     372:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     374:	8e 01       	movw	r16, r28
     376:	05 5a       	subi	r16, 0xA5	; 165
     378:	1f 4f       	sbci	r17, 0xFF	; 255
     37a:	fe 01       	movw	r30, r28
     37c:	e1 5a       	subi	r30, 0xA1	; 161
     37e:	ff 4f       	sbci	r31, 0xFF	; 255
     380:	60 81       	ld	r22, Z
     382:	71 81       	ldd	r23, Z+1	; 0x01
     384:	82 81       	ldd	r24, Z+2	; 0x02
     386:	93 81       	ldd	r25, Z+3	; 0x03
     388:	2d ec       	ldi	r18, 0xCD	; 205
     38a:	3c ec       	ldi	r19, 0xCC	; 204
     38c:	4c e2       	ldi	r20, 0x2C	; 44
     38e:	55 e4       	ldi	r21, 0x45	; 69
     390:	0e 94 ee 1b 	call	0x37dc	; 0x37dc <__mulsf3>
     394:	dc 01       	movw	r26, r24
     396:	cb 01       	movw	r24, r22
     398:	f8 01       	movw	r30, r16
     39a:	80 83       	st	Z, r24
     39c:	91 83       	std	Z+1, r25	; 0x01
     39e:	a2 83       	std	Z+2, r26	; 0x02
     3a0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     3a2:	fe 01       	movw	r30, r28
     3a4:	e5 5a       	subi	r30, 0xA5	; 165
     3a6:	ff 4f       	sbci	r31, 0xFF	; 255
     3a8:	60 81       	ld	r22, Z
     3aa:	71 81       	ldd	r23, Z+1	; 0x01
     3ac:	82 81       	ldd	r24, Z+2	; 0x02
     3ae:	93 81       	ldd	r25, Z+3	; 0x03
     3b0:	20 e0       	ldi	r18, 0x00	; 0
     3b2:	30 e0       	ldi	r19, 0x00	; 0
     3b4:	40 e8       	ldi	r20, 0x80	; 128
     3b6:	5f e3       	ldi	r21, 0x3F	; 63
     3b8:	0e 94 f4 1d 	call	0x3be8	; 0x3be8 <__ltsf2>
     3bc:	88 23       	and	r24, r24
     3be:	44 f4       	brge	.+16     	; 0x3d0 <lcd_set_4bit+0x224>
		__ticks = 1;
     3c0:	fe 01       	movw	r30, r28
     3c2:	e7 5a       	subi	r30, 0xA7	; 167
     3c4:	ff 4f       	sbci	r31, 0xFF	; 255
     3c6:	81 e0       	ldi	r24, 0x01	; 1
     3c8:	90 e0       	ldi	r25, 0x00	; 0
     3ca:	91 83       	std	Z+1, r25	; 0x01
     3cc:	80 83       	st	Z, r24
     3ce:	64 c0       	rjmp	.+200    	; 0x498 <lcd_set_4bit+0x2ec>
	else if (__tmp > 65535)
     3d0:	fe 01       	movw	r30, r28
     3d2:	e5 5a       	subi	r30, 0xA5	; 165
     3d4:	ff 4f       	sbci	r31, 0xFF	; 255
     3d6:	60 81       	ld	r22, Z
     3d8:	71 81       	ldd	r23, Z+1	; 0x01
     3da:	82 81       	ldd	r24, Z+2	; 0x02
     3dc:	93 81       	ldd	r25, Z+3	; 0x03
     3de:	20 e0       	ldi	r18, 0x00	; 0
     3e0:	3f ef       	ldi	r19, 0xFF	; 255
     3e2:	4f e7       	ldi	r20, 0x7F	; 127
     3e4:	57 e4       	ldi	r21, 0x47	; 71
     3e6:	0e 94 94 1d 	call	0x3b28	; 0x3b28 <__gtsf2>
     3ea:	18 16       	cp	r1, r24
     3ec:	0c f0       	brlt	.+2      	; 0x3f0 <lcd_set_4bit+0x244>
     3ee:	43 c0       	rjmp	.+134    	; 0x476 <lcd_set_4bit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     3f0:	fe 01       	movw	r30, r28
     3f2:	e1 5a       	subi	r30, 0xA1	; 161
     3f4:	ff 4f       	sbci	r31, 0xFF	; 255
     3f6:	60 81       	ld	r22, Z
     3f8:	71 81       	ldd	r23, Z+1	; 0x01
     3fa:	82 81       	ldd	r24, Z+2	; 0x02
     3fc:	93 81       	ldd	r25, Z+3	; 0x03
     3fe:	20 e0       	ldi	r18, 0x00	; 0
     400:	30 e0       	ldi	r19, 0x00	; 0
     402:	40 e2       	ldi	r20, 0x20	; 32
     404:	51 e4       	ldi	r21, 0x41	; 65
     406:	0e 94 ee 1b 	call	0x37dc	; 0x37dc <__mulsf3>
     40a:	dc 01       	movw	r26, r24
     40c:	cb 01       	movw	r24, r22
     40e:	8e 01       	movw	r16, r28
     410:	07 5a       	subi	r16, 0xA7	; 167
     412:	1f 4f       	sbci	r17, 0xFF	; 255
     414:	bc 01       	movw	r22, r24
     416:	cd 01       	movw	r24, r26
     418:	0e 94 18 1a 	call	0x3430	; 0x3430 <__fixunssfsi>
     41c:	dc 01       	movw	r26, r24
     41e:	cb 01       	movw	r24, r22
     420:	f8 01       	movw	r30, r16
     422:	91 83       	std	Z+1, r25	; 0x01
     424:	80 83       	st	Z, r24
     426:	1f c0       	rjmp	.+62     	; 0x466 <lcd_set_4bit+0x2ba>
     428:	fe 01       	movw	r30, r28
     42a:	e9 5a       	subi	r30, 0xA9	; 169
     42c:	ff 4f       	sbci	r31, 0xFF	; 255
     42e:	84 e1       	ldi	r24, 0x14	; 20
     430:	91 e0       	ldi	r25, 0x01	; 1
     432:	91 83       	std	Z+1, r25	; 0x01
     434:	80 83       	st	Z, r24
     436:	fe 01       	movw	r30, r28
     438:	e9 5a       	subi	r30, 0xA9	; 169
     43a:	ff 4f       	sbci	r31, 0xFF	; 255
     43c:	80 81       	ld	r24, Z
     43e:	91 81       	ldd	r25, Z+1	; 0x01
     440:	01 97       	sbiw	r24, 0x01	; 1
     442:	f1 f7       	brne	.-4      	; 0x440 <lcd_set_4bit+0x294>
     444:	fe 01       	movw	r30, r28
     446:	e9 5a       	subi	r30, 0xA9	; 169
     448:	ff 4f       	sbci	r31, 0xFF	; 255
     44a:	91 83       	std	Z+1, r25	; 0x01
     44c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     44e:	de 01       	movw	r26, r28
     450:	a7 5a       	subi	r26, 0xA7	; 167
     452:	bf 4f       	sbci	r27, 0xFF	; 255
     454:	fe 01       	movw	r30, r28
     456:	e7 5a       	subi	r30, 0xA7	; 167
     458:	ff 4f       	sbci	r31, 0xFF	; 255
     45a:	80 81       	ld	r24, Z
     45c:	91 81       	ldd	r25, Z+1	; 0x01
     45e:	01 97       	sbiw	r24, 0x01	; 1
     460:	11 96       	adiw	r26, 0x01	; 1
     462:	9c 93       	st	X, r25
     464:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     466:	fe 01       	movw	r30, r28
     468:	e7 5a       	subi	r30, 0xA7	; 167
     46a:	ff 4f       	sbci	r31, 0xFF	; 255
     46c:	80 81       	ld	r24, Z
     46e:	91 81       	ldd	r25, Z+1	; 0x01
     470:	00 97       	sbiw	r24, 0x00	; 0
     472:	d1 f6       	brne	.-76     	; 0x428 <lcd_set_4bit+0x27c>
     474:	27 c0       	rjmp	.+78     	; 0x4c4 <lcd_set_4bit+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     476:	8e 01       	movw	r16, r28
     478:	07 5a       	subi	r16, 0xA7	; 167
     47a:	1f 4f       	sbci	r17, 0xFF	; 255
     47c:	fe 01       	movw	r30, r28
     47e:	e5 5a       	subi	r30, 0xA5	; 165
     480:	ff 4f       	sbci	r31, 0xFF	; 255
     482:	60 81       	ld	r22, Z
     484:	71 81       	ldd	r23, Z+1	; 0x01
     486:	82 81       	ldd	r24, Z+2	; 0x02
     488:	93 81       	ldd	r25, Z+3	; 0x03
     48a:	0e 94 18 1a 	call	0x3430	; 0x3430 <__fixunssfsi>
     48e:	dc 01       	movw	r26, r24
     490:	cb 01       	movw	r24, r22
     492:	f8 01       	movw	r30, r16
     494:	91 83       	std	Z+1, r25	; 0x01
     496:	80 83       	st	Z, r24
     498:	de 01       	movw	r26, r28
     49a:	ab 5a       	subi	r26, 0xAB	; 171
     49c:	bf 4f       	sbci	r27, 0xFF	; 255
     49e:	fe 01       	movw	r30, r28
     4a0:	e7 5a       	subi	r30, 0xA7	; 167
     4a2:	ff 4f       	sbci	r31, 0xFF	; 255
     4a4:	80 81       	ld	r24, Z
     4a6:	91 81       	ldd	r25, Z+1	; 0x01
     4a8:	8d 93       	st	X+, r24
     4aa:	9c 93       	st	X, r25
     4ac:	fe 01       	movw	r30, r28
     4ae:	eb 5a       	subi	r30, 0xAB	; 171
     4b0:	ff 4f       	sbci	r31, 0xFF	; 255
     4b2:	80 81       	ld	r24, Z
     4b4:	91 81       	ldd	r25, Z+1	; 0x01
     4b6:	01 97       	sbiw	r24, 0x01	; 1
     4b8:	f1 f7       	brne	.-4      	; 0x4b6 <lcd_set_4bit+0x30a>
     4ba:	fe 01       	movw	r30, r28
     4bc:	eb 5a       	subi	r30, 0xAB	; 171
     4be:	ff 4f       	sbci	r31, 0xFF	; 255
     4c0:	91 83       	std	Z+1, r25	; 0x01
     4c2:	80 83       	st	Z, r24
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     4c4:	a8 e2       	ldi	r26, 0x28	; 40
     4c6:	b0 e0       	ldi	r27, 0x00	; 0
     4c8:	e8 e2       	ldi	r30, 0x28	; 40
     4ca:	f0 e0       	ldi	r31, 0x00	; 0
     4cc:	80 81       	ld	r24, Z
     4ce:	8b 7f       	andi	r24, 0xFB	; 251
     4d0:	8c 93       	st	X, r24
     4d2:	fe 01       	movw	r30, r28
     4d4:	ef 5a       	subi	r30, 0xAF	; 175
     4d6:	ff 4f       	sbci	r31, 0xFF	; 255
     4d8:	80 e0       	ldi	r24, 0x00	; 0
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	a0 e8       	ldi	r26, 0x80	; 128
     4de:	bf e3       	ldi	r27, 0x3F	; 63
     4e0:	80 83       	st	Z, r24
     4e2:	91 83       	std	Z+1, r25	; 0x01
     4e4:	a2 83       	std	Z+2, r26	; 0x02
     4e6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     4e8:	8e 01       	movw	r16, r28
     4ea:	03 5b       	subi	r16, 0xB3	; 179
     4ec:	1f 4f       	sbci	r17, 0xFF	; 255
     4ee:	fe 01       	movw	r30, r28
     4f0:	ef 5a       	subi	r30, 0xAF	; 175
     4f2:	ff 4f       	sbci	r31, 0xFF	; 255
     4f4:	60 81       	ld	r22, Z
     4f6:	71 81       	ldd	r23, Z+1	; 0x01
     4f8:	82 81       	ldd	r24, Z+2	; 0x02
     4fa:	93 81       	ldd	r25, Z+3	; 0x03
     4fc:	2d ec       	ldi	r18, 0xCD	; 205
     4fe:	3c ec       	ldi	r19, 0xCC	; 204
     500:	4c e2       	ldi	r20, 0x2C	; 44
     502:	55 e4       	ldi	r21, 0x45	; 69
     504:	0e 94 ee 1b 	call	0x37dc	; 0x37dc <__mulsf3>
     508:	dc 01       	movw	r26, r24
     50a:	cb 01       	movw	r24, r22
     50c:	f8 01       	movw	r30, r16
     50e:	80 83       	st	Z, r24
     510:	91 83       	std	Z+1, r25	; 0x01
     512:	a2 83       	std	Z+2, r26	; 0x02
     514:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     516:	fe 01       	movw	r30, r28
     518:	e3 5b       	subi	r30, 0xB3	; 179
     51a:	ff 4f       	sbci	r31, 0xFF	; 255
     51c:	60 81       	ld	r22, Z
     51e:	71 81       	ldd	r23, Z+1	; 0x01
     520:	82 81       	ldd	r24, Z+2	; 0x02
     522:	93 81       	ldd	r25, Z+3	; 0x03
     524:	20 e0       	ldi	r18, 0x00	; 0
     526:	30 e0       	ldi	r19, 0x00	; 0
     528:	40 e8       	ldi	r20, 0x80	; 128
     52a:	5f e3       	ldi	r21, 0x3F	; 63
     52c:	0e 94 f4 1d 	call	0x3be8	; 0x3be8 <__ltsf2>
     530:	88 23       	and	r24, r24
     532:	44 f4       	brge	.+16     	; 0x544 <lcd_set_4bit+0x398>
		__ticks = 1;
     534:	fe 01       	movw	r30, r28
     536:	e5 5b       	subi	r30, 0xB5	; 181
     538:	ff 4f       	sbci	r31, 0xFF	; 255
     53a:	81 e0       	ldi	r24, 0x01	; 1
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	91 83       	std	Z+1, r25	; 0x01
     540:	80 83       	st	Z, r24
     542:	64 c0       	rjmp	.+200    	; 0x60c <lcd_set_4bit+0x460>
	else if (__tmp > 65535)
     544:	fe 01       	movw	r30, r28
     546:	e3 5b       	subi	r30, 0xB3	; 179
     548:	ff 4f       	sbci	r31, 0xFF	; 255
     54a:	60 81       	ld	r22, Z
     54c:	71 81       	ldd	r23, Z+1	; 0x01
     54e:	82 81       	ldd	r24, Z+2	; 0x02
     550:	93 81       	ldd	r25, Z+3	; 0x03
     552:	20 e0       	ldi	r18, 0x00	; 0
     554:	3f ef       	ldi	r19, 0xFF	; 255
     556:	4f e7       	ldi	r20, 0x7F	; 127
     558:	57 e4       	ldi	r21, 0x47	; 71
     55a:	0e 94 94 1d 	call	0x3b28	; 0x3b28 <__gtsf2>
     55e:	18 16       	cp	r1, r24
     560:	0c f0       	brlt	.+2      	; 0x564 <lcd_set_4bit+0x3b8>
     562:	43 c0       	rjmp	.+134    	; 0x5ea <lcd_set_4bit+0x43e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     564:	fe 01       	movw	r30, r28
     566:	ef 5a       	subi	r30, 0xAF	; 175
     568:	ff 4f       	sbci	r31, 0xFF	; 255
     56a:	60 81       	ld	r22, Z
     56c:	71 81       	ldd	r23, Z+1	; 0x01
     56e:	82 81       	ldd	r24, Z+2	; 0x02
     570:	93 81       	ldd	r25, Z+3	; 0x03
     572:	20 e0       	ldi	r18, 0x00	; 0
     574:	30 e0       	ldi	r19, 0x00	; 0
     576:	40 e2       	ldi	r20, 0x20	; 32
     578:	51 e4       	ldi	r21, 0x41	; 65
     57a:	0e 94 ee 1b 	call	0x37dc	; 0x37dc <__mulsf3>
     57e:	dc 01       	movw	r26, r24
     580:	cb 01       	movw	r24, r22
     582:	8e 01       	movw	r16, r28
     584:	05 5b       	subi	r16, 0xB5	; 181
     586:	1f 4f       	sbci	r17, 0xFF	; 255
     588:	bc 01       	movw	r22, r24
     58a:	cd 01       	movw	r24, r26
     58c:	0e 94 18 1a 	call	0x3430	; 0x3430 <__fixunssfsi>
     590:	dc 01       	movw	r26, r24
     592:	cb 01       	movw	r24, r22
     594:	f8 01       	movw	r30, r16
     596:	91 83       	std	Z+1, r25	; 0x01
     598:	80 83       	st	Z, r24
     59a:	1f c0       	rjmp	.+62     	; 0x5da <lcd_set_4bit+0x42e>
     59c:	fe 01       	movw	r30, r28
     59e:	e7 5b       	subi	r30, 0xB7	; 183
     5a0:	ff 4f       	sbci	r31, 0xFF	; 255
     5a2:	84 e1       	ldi	r24, 0x14	; 20
     5a4:	91 e0       	ldi	r25, 0x01	; 1
     5a6:	91 83       	std	Z+1, r25	; 0x01
     5a8:	80 83       	st	Z, r24
     5aa:	fe 01       	movw	r30, r28
     5ac:	e7 5b       	subi	r30, 0xB7	; 183
     5ae:	ff 4f       	sbci	r31, 0xFF	; 255
     5b0:	80 81       	ld	r24, Z
     5b2:	91 81       	ldd	r25, Z+1	; 0x01
     5b4:	01 97       	sbiw	r24, 0x01	; 1
     5b6:	f1 f7       	brne	.-4      	; 0x5b4 <lcd_set_4bit+0x408>
     5b8:	fe 01       	movw	r30, r28
     5ba:	e7 5b       	subi	r30, 0xB7	; 183
     5bc:	ff 4f       	sbci	r31, 0xFF	; 255
     5be:	91 83       	std	Z+1, r25	; 0x01
     5c0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5c2:	de 01       	movw	r26, r28
     5c4:	a5 5b       	subi	r26, 0xB5	; 181
     5c6:	bf 4f       	sbci	r27, 0xFF	; 255
     5c8:	fe 01       	movw	r30, r28
     5ca:	e5 5b       	subi	r30, 0xB5	; 181
     5cc:	ff 4f       	sbci	r31, 0xFF	; 255
     5ce:	80 81       	ld	r24, Z
     5d0:	91 81       	ldd	r25, Z+1	; 0x01
     5d2:	01 97       	sbiw	r24, 0x01	; 1
     5d4:	11 96       	adiw	r26, 0x01	; 1
     5d6:	9c 93       	st	X, r25
     5d8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5da:	fe 01       	movw	r30, r28
     5dc:	e5 5b       	subi	r30, 0xB5	; 181
     5de:	ff 4f       	sbci	r31, 0xFF	; 255
     5e0:	80 81       	ld	r24, Z
     5e2:	91 81       	ldd	r25, Z+1	; 0x01
     5e4:	00 97       	sbiw	r24, 0x00	; 0
     5e6:	d1 f6       	brne	.-76     	; 0x59c <lcd_set_4bit+0x3f0>
     5e8:	27 c0       	rjmp	.+78     	; 0x638 <lcd_set_4bit+0x48c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     5ea:	8e 01       	movw	r16, r28
     5ec:	05 5b       	subi	r16, 0xB5	; 181
     5ee:	1f 4f       	sbci	r17, 0xFF	; 255
     5f0:	fe 01       	movw	r30, r28
     5f2:	e3 5b       	subi	r30, 0xB3	; 179
     5f4:	ff 4f       	sbci	r31, 0xFF	; 255
     5f6:	60 81       	ld	r22, Z
     5f8:	71 81       	ldd	r23, Z+1	; 0x01
     5fa:	82 81       	ldd	r24, Z+2	; 0x02
     5fc:	93 81       	ldd	r25, Z+3	; 0x03
     5fe:	0e 94 18 1a 	call	0x3430	; 0x3430 <__fixunssfsi>
     602:	dc 01       	movw	r26, r24
     604:	cb 01       	movw	r24, r22
     606:	f8 01       	movw	r30, r16
     608:	91 83       	std	Z+1, r25	; 0x01
     60a:	80 83       	st	Z, r24
     60c:	de 01       	movw	r26, r28
     60e:	a9 5b       	subi	r26, 0xB9	; 185
     610:	bf 4f       	sbci	r27, 0xFF	; 255
     612:	fe 01       	movw	r30, r28
     614:	e5 5b       	subi	r30, 0xB5	; 181
     616:	ff 4f       	sbci	r31, 0xFF	; 255
     618:	80 81       	ld	r24, Z
     61a:	91 81       	ldd	r25, Z+1	; 0x01
     61c:	8d 93       	st	X+, r24
     61e:	9c 93       	st	X, r25
     620:	fe 01       	movw	r30, r28
     622:	e9 5b       	subi	r30, 0xB9	; 185
     624:	ff 4f       	sbci	r31, 0xFF	; 255
     626:	80 81       	ld	r24, Z
     628:	91 81       	ldd	r25, Z+1	; 0x01
     62a:	01 97       	sbiw	r24, 0x01	; 1
     62c:	f1 f7       	brne	.-4      	; 0x62a <lcd_set_4bit+0x47e>
     62e:	fe 01       	movw	r30, r28
     630:	e9 5b       	subi	r30, 0xB9	; 185
     632:	ff 4f       	sbci	r31, 0xFF	; 255
     634:	91 83       	std	Z+1, r25	; 0x01
     636:	80 83       	st	Z, r24

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     638:	a8 e2       	ldi	r26, 0x28	; 40
     63a:	b0 e0       	ldi	r27, 0x00	; 0
     63c:	e8 e2       	ldi	r30, 0x28	; 40
     63e:	f0 e0       	ldi	r31, 0x00	; 0
     640:	80 81       	ld	r24, Z
     642:	8e 7f       	andi	r24, 0xFE	; 254
     644:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     646:	a8 e2       	ldi	r26, 0x28	; 40
     648:	b0 e0       	ldi	r27, 0x00	; 0
     64a:	e8 e2       	ldi	r30, 0x28	; 40
     64c:	f0 e0       	ldi	r31, 0x00	; 0
     64e:	80 81       	ld	r24, Z
     650:	8d 7f       	andi	r24, 0xFD	; 253
     652:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     654:	e8 e2       	ldi	r30, 0x28	; 40
     656:	f0 e0       	ldi	r31, 0x00	; 0
     658:	80 e3       	ldi	r24, 0x30	; 48
     65a:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     65c:	a8 e2       	ldi	r26, 0x28	; 40
     65e:	b0 e0       	ldi	r27, 0x00	; 0
     660:	e8 e2       	ldi	r30, 0x28	; 40
     662:	f0 e0       	ldi	r31, 0x00	; 0
     664:	80 81       	ld	r24, Z
     666:	84 60       	ori	r24, 0x04	; 4
     668:	8c 93       	st	X, r24
     66a:	fe 01       	movw	r30, r28
     66c:	ed 5b       	subi	r30, 0xBD	; 189
     66e:	ff 4f       	sbci	r31, 0xFF	; 255
     670:	80 e0       	ldi	r24, 0x00	; 0
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	a0 ea       	ldi	r26, 0xA0	; 160
     676:	b0 e4       	ldi	r27, 0x40	; 64
     678:	80 83       	st	Z, r24
     67a:	91 83       	std	Z+1, r25	; 0x01
     67c:	a2 83       	std	Z+2, r26	; 0x02
     67e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     680:	8e 01       	movw	r16, r28
     682:	01 5c       	subi	r16, 0xC1	; 193
     684:	1f 4f       	sbci	r17, 0xFF	; 255
     686:	fe 01       	movw	r30, r28
     688:	ed 5b       	subi	r30, 0xBD	; 189
     68a:	ff 4f       	sbci	r31, 0xFF	; 255
     68c:	60 81       	ld	r22, Z
     68e:	71 81       	ldd	r23, Z+1	; 0x01
     690:	82 81       	ldd	r24, Z+2	; 0x02
     692:	93 81       	ldd	r25, Z+3	; 0x03
     694:	2d ec       	ldi	r18, 0xCD	; 205
     696:	3c ec       	ldi	r19, 0xCC	; 204
     698:	4c e2       	ldi	r20, 0x2C	; 44
     69a:	55 e4       	ldi	r21, 0x45	; 69
     69c:	0e 94 ee 1b 	call	0x37dc	; 0x37dc <__mulsf3>
     6a0:	dc 01       	movw	r26, r24
     6a2:	cb 01       	movw	r24, r22
     6a4:	f8 01       	movw	r30, r16
     6a6:	80 83       	st	Z, r24
     6a8:	91 83       	std	Z+1, r25	; 0x01
     6aa:	a2 83       	std	Z+2, r26	; 0x02
     6ac:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     6ae:	fe 01       	movw	r30, r28
     6b0:	ff 96       	adiw	r30, 0x3f	; 63
     6b2:	60 81       	ld	r22, Z
     6b4:	71 81       	ldd	r23, Z+1	; 0x01
     6b6:	82 81       	ldd	r24, Z+2	; 0x02
     6b8:	93 81       	ldd	r25, Z+3	; 0x03
     6ba:	20 e0       	ldi	r18, 0x00	; 0
     6bc:	30 e0       	ldi	r19, 0x00	; 0
     6be:	40 e8       	ldi	r20, 0x80	; 128
     6c0:	5f e3       	ldi	r21, 0x3F	; 63
     6c2:	0e 94 f4 1d 	call	0x3be8	; 0x3be8 <__ltsf2>
     6c6:	88 23       	and	r24, r24
     6c8:	2c f4       	brge	.+10     	; 0x6d4 <lcd_set_4bit+0x528>
		__ticks = 1;
     6ca:	81 e0       	ldi	r24, 0x01	; 1
     6cc:	90 e0       	ldi	r25, 0x00	; 0
     6ce:	9e af       	std	Y+62, r25	; 0x3e
     6d0:	8d af       	std	Y+61, r24	; 0x3d
     6d2:	46 c0       	rjmp	.+140    	; 0x760 <lcd_set_4bit+0x5b4>
	else if (__tmp > 65535)
     6d4:	fe 01       	movw	r30, r28
     6d6:	ff 96       	adiw	r30, 0x3f	; 63
     6d8:	60 81       	ld	r22, Z
     6da:	71 81       	ldd	r23, Z+1	; 0x01
     6dc:	82 81       	ldd	r24, Z+2	; 0x02
     6de:	93 81       	ldd	r25, Z+3	; 0x03
     6e0:	20 e0       	ldi	r18, 0x00	; 0
     6e2:	3f ef       	ldi	r19, 0xFF	; 255
     6e4:	4f e7       	ldi	r20, 0x7F	; 127
     6e6:	57 e4       	ldi	r21, 0x47	; 71
     6e8:	0e 94 94 1d 	call	0x3b28	; 0x3b28 <__gtsf2>
     6ec:	18 16       	cp	r1, r24
     6ee:	64 f5       	brge	.+88     	; 0x748 <lcd_set_4bit+0x59c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     6f0:	fe 01       	movw	r30, r28
     6f2:	ed 5b       	subi	r30, 0xBD	; 189
     6f4:	ff 4f       	sbci	r31, 0xFF	; 255
     6f6:	60 81       	ld	r22, Z
     6f8:	71 81       	ldd	r23, Z+1	; 0x01
     6fa:	82 81       	ldd	r24, Z+2	; 0x02
     6fc:	93 81       	ldd	r25, Z+3	; 0x03
     6fe:	20 e0       	ldi	r18, 0x00	; 0
     700:	30 e0       	ldi	r19, 0x00	; 0
     702:	40 e2       	ldi	r20, 0x20	; 32
     704:	51 e4       	ldi	r21, 0x41	; 65
     706:	0e 94 ee 1b 	call	0x37dc	; 0x37dc <__mulsf3>
     70a:	dc 01       	movw	r26, r24
     70c:	cb 01       	movw	r24, r22
     70e:	bc 01       	movw	r22, r24
     710:	cd 01       	movw	r24, r26
     712:	0e 94 18 1a 	call	0x3430	; 0x3430 <__fixunssfsi>
     716:	dc 01       	movw	r26, r24
     718:	cb 01       	movw	r24, r22
     71a:	9e af       	std	Y+62, r25	; 0x3e
     71c:	8d af       	std	Y+61, r24	; 0x3d
     71e:	0f c0       	rjmp	.+30     	; 0x73e <lcd_set_4bit+0x592>
     720:	84 e1       	ldi	r24, 0x14	; 20
     722:	91 e0       	ldi	r25, 0x01	; 1
     724:	9c af       	std	Y+60, r25	; 0x3c
     726:	8b af       	std	Y+59, r24	; 0x3b
     728:	8b ad       	ldd	r24, Y+59	; 0x3b
     72a:	9c ad       	ldd	r25, Y+60	; 0x3c
     72c:	01 97       	sbiw	r24, 0x01	; 1
     72e:	f1 f7       	brne	.-4      	; 0x72c <lcd_set_4bit+0x580>
     730:	9c af       	std	Y+60, r25	; 0x3c
     732:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     734:	8d ad       	ldd	r24, Y+61	; 0x3d
     736:	9e ad       	ldd	r25, Y+62	; 0x3e
     738:	01 97       	sbiw	r24, 0x01	; 1
     73a:	9e af       	std	Y+62, r25	; 0x3e
     73c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     73e:	8d ad       	ldd	r24, Y+61	; 0x3d
     740:	9e ad       	ldd	r25, Y+62	; 0x3e
     742:	00 97       	sbiw	r24, 0x00	; 0
     744:	69 f7       	brne	.-38     	; 0x720 <lcd_set_4bit+0x574>
     746:	16 c0       	rjmp	.+44     	; 0x774 <lcd_set_4bit+0x5c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     748:	fe 01       	movw	r30, r28
     74a:	ff 96       	adiw	r30, 0x3f	; 63
     74c:	60 81       	ld	r22, Z
     74e:	71 81       	ldd	r23, Z+1	; 0x01
     750:	82 81       	ldd	r24, Z+2	; 0x02
     752:	93 81       	ldd	r25, Z+3	; 0x03
     754:	0e 94 18 1a 	call	0x3430	; 0x3430 <__fixunssfsi>
     758:	dc 01       	movw	r26, r24
     75a:	cb 01       	movw	r24, r22
     75c:	9e af       	std	Y+62, r25	; 0x3e
     75e:	8d af       	std	Y+61, r24	; 0x3d
     760:	8d ad       	ldd	r24, Y+61	; 0x3d
     762:	9e ad       	ldd	r25, Y+62	; 0x3e
     764:	9a af       	std	Y+58, r25	; 0x3a
     766:	89 af       	std	Y+57, r24	; 0x39
     768:	89 ad       	ldd	r24, Y+57	; 0x39
     76a:	9a ad       	ldd	r25, Y+58	; 0x3a
     76c:	01 97       	sbiw	r24, 0x01	; 1
     76e:	f1 f7       	brne	.-4      	; 0x76c <lcd_set_4bit+0x5c0>
     770:	9a af       	std	Y+58, r25	; 0x3a
     772:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     774:	a8 e2       	ldi	r26, 0x28	; 40
     776:	b0 e0       	ldi	r27, 0x00	; 0
     778:	e8 e2       	ldi	r30, 0x28	; 40
     77a:	f0 e0       	ldi	r31, 0x00	; 0
     77c:	80 81       	ld	r24, Z
     77e:	8b 7f       	andi	r24, 0xFB	; 251
     780:	8c 93       	st	X, r24
     782:	80 e0       	ldi	r24, 0x00	; 0
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	a0 e8       	ldi	r26, 0x80	; 128
     788:	bf e3       	ldi	r27, 0x3F	; 63
     78a:	8d ab       	std	Y+53, r24	; 0x35
     78c:	9e ab       	std	Y+54, r25	; 0x36
     78e:	af ab       	std	Y+55, r26	; 0x37
     790:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     792:	6d a9       	ldd	r22, Y+53	; 0x35
     794:	7e a9       	ldd	r23, Y+54	; 0x36
     796:	8f a9       	ldd	r24, Y+55	; 0x37
     798:	98 ad       	ldd	r25, Y+56	; 0x38
     79a:	2d ec       	ldi	r18, 0xCD	; 205
     79c:	3c ec       	ldi	r19, 0xCC	; 204
     79e:	4c e2       	ldi	r20, 0x2C	; 44
     7a0:	55 e4       	ldi	r21, 0x45	; 69
     7a2:	0e 94 ee 1b 	call	0x37dc	; 0x37dc <__mulsf3>
     7a6:	dc 01       	movw	r26, r24
     7a8:	cb 01       	movw	r24, r22
     7aa:	89 ab       	std	Y+49, r24	; 0x31
     7ac:	9a ab       	std	Y+50, r25	; 0x32
     7ae:	ab ab       	std	Y+51, r26	; 0x33
     7b0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     7b2:	69 a9       	ldd	r22, Y+49	; 0x31
     7b4:	7a a9       	ldd	r23, Y+50	; 0x32
     7b6:	8b a9       	ldd	r24, Y+51	; 0x33
     7b8:	9c a9       	ldd	r25, Y+52	; 0x34
     7ba:	20 e0       	ldi	r18, 0x00	; 0
     7bc:	30 e0       	ldi	r19, 0x00	; 0
     7be:	40 e8       	ldi	r20, 0x80	; 128
     7c0:	5f e3       	ldi	r21, 0x3F	; 63
     7c2:	0e 94 f4 1d 	call	0x3be8	; 0x3be8 <__ltsf2>
     7c6:	88 23       	and	r24, r24
     7c8:	2c f4       	brge	.+10     	; 0x7d4 <lcd_set_4bit+0x628>
		__ticks = 1;
     7ca:	81 e0       	ldi	r24, 0x01	; 1
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	98 ab       	std	Y+48, r25	; 0x30
     7d0:	8f a7       	std	Y+47, r24	; 0x2f
     7d2:	3f c0       	rjmp	.+126    	; 0x852 <lcd_set_4bit+0x6a6>
	else if (__tmp > 65535)
     7d4:	69 a9       	ldd	r22, Y+49	; 0x31
     7d6:	7a a9       	ldd	r23, Y+50	; 0x32
     7d8:	8b a9       	ldd	r24, Y+51	; 0x33
     7da:	9c a9       	ldd	r25, Y+52	; 0x34
     7dc:	20 e0       	ldi	r18, 0x00	; 0
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f e7       	ldi	r20, 0x7F	; 127
     7e2:	57 e4       	ldi	r21, 0x47	; 71
     7e4:	0e 94 94 1d 	call	0x3b28	; 0x3b28 <__gtsf2>
     7e8:	18 16       	cp	r1, r24
     7ea:	4c f5       	brge	.+82     	; 0x83e <lcd_set_4bit+0x692>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     7ec:	6d a9       	ldd	r22, Y+53	; 0x35
     7ee:	7e a9       	ldd	r23, Y+54	; 0x36
     7f0:	8f a9       	ldd	r24, Y+55	; 0x37
     7f2:	98 ad       	ldd	r25, Y+56	; 0x38
     7f4:	20 e0       	ldi	r18, 0x00	; 0
     7f6:	30 e0       	ldi	r19, 0x00	; 0
     7f8:	40 e2       	ldi	r20, 0x20	; 32
     7fa:	51 e4       	ldi	r21, 0x41	; 65
     7fc:	0e 94 ee 1b 	call	0x37dc	; 0x37dc <__mulsf3>
     800:	dc 01       	movw	r26, r24
     802:	cb 01       	movw	r24, r22
     804:	bc 01       	movw	r22, r24
     806:	cd 01       	movw	r24, r26
     808:	0e 94 18 1a 	call	0x3430	; 0x3430 <__fixunssfsi>
     80c:	dc 01       	movw	r26, r24
     80e:	cb 01       	movw	r24, r22
     810:	98 ab       	std	Y+48, r25	; 0x30
     812:	8f a7       	std	Y+47, r24	; 0x2f
     814:	0f c0       	rjmp	.+30     	; 0x834 <lcd_set_4bit+0x688>
     816:	84 e1       	ldi	r24, 0x14	; 20
     818:	91 e0       	ldi	r25, 0x01	; 1
     81a:	9e a7       	std	Y+46, r25	; 0x2e
     81c:	8d a7       	std	Y+45, r24	; 0x2d
     81e:	8d a5       	ldd	r24, Y+45	; 0x2d
     820:	9e a5       	ldd	r25, Y+46	; 0x2e
     822:	01 97       	sbiw	r24, 0x01	; 1
     824:	f1 f7       	brne	.-4      	; 0x822 <lcd_set_4bit+0x676>
     826:	9e a7       	std	Y+46, r25	; 0x2e
     828:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     82a:	8f a5       	ldd	r24, Y+47	; 0x2f
     82c:	98 a9       	ldd	r25, Y+48	; 0x30
     82e:	01 97       	sbiw	r24, 0x01	; 1
     830:	98 ab       	std	Y+48, r25	; 0x30
     832:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     834:	8f a5       	ldd	r24, Y+47	; 0x2f
     836:	98 a9       	ldd	r25, Y+48	; 0x30
     838:	00 97       	sbiw	r24, 0x00	; 0
     83a:	69 f7       	brne	.-38     	; 0x816 <lcd_set_4bit+0x66a>
     83c:	14 c0       	rjmp	.+40     	; 0x866 <lcd_set_4bit+0x6ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     83e:	69 a9       	ldd	r22, Y+49	; 0x31
     840:	7a a9       	ldd	r23, Y+50	; 0x32
     842:	8b a9       	ldd	r24, Y+51	; 0x33
     844:	9c a9       	ldd	r25, Y+52	; 0x34
     846:	0e 94 18 1a 	call	0x3430	; 0x3430 <__fixunssfsi>
     84a:	dc 01       	movw	r26, r24
     84c:	cb 01       	movw	r24, r22
     84e:	98 ab       	std	Y+48, r25	; 0x30
     850:	8f a7       	std	Y+47, r24	; 0x2f
     852:	8f a5       	ldd	r24, Y+47	; 0x2f
     854:	98 a9       	ldd	r25, Y+48	; 0x30
     856:	9c a7       	std	Y+44, r25	; 0x2c
     858:	8b a7       	std	Y+43, r24	; 0x2b
     85a:	8b a5       	ldd	r24, Y+43	; 0x2b
     85c:	9c a5       	ldd	r25, Y+44	; 0x2c
     85e:	01 97       	sbiw	r24, 0x01	; 1
     860:	f1 f7       	brne	.-4      	; 0x85e <lcd_set_4bit+0x6b2>
     862:	9c a7       	std	Y+44, r25	; 0x2c
     864:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     866:	a8 e2       	ldi	r26, 0x28	; 40
     868:	b0 e0       	ldi	r27, 0x00	; 0
     86a:	e8 e2       	ldi	r30, 0x28	; 40
     86c:	f0 e0       	ldi	r31, 0x00	; 0
     86e:	80 81       	ld	r24, Z
     870:	8e 7f       	andi	r24, 0xFE	; 254
     872:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     874:	a8 e2       	ldi	r26, 0x28	; 40
     876:	b0 e0       	ldi	r27, 0x00	; 0
     878:	e8 e2       	ldi	r30, 0x28	; 40
     87a:	f0 e0       	ldi	r31, 0x00	; 0
     87c:	80 81       	ld	r24, Z
     87e:	8d 7f       	andi	r24, 0xFD	; 253
     880:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     882:	e8 e2       	ldi	r30, 0x28	; 40
     884:	f0 e0       	ldi	r31, 0x00	; 0
     886:	80 e3       	ldi	r24, 0x30	; 48
     888:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     88a:	a8 e2       	ldi	r26, 0x28	; 40
     88c:	b0 e0       	ldi	r27, 0x00	; 0
     88e:	e8 e2       	ldi	r30, 0x28	; 40
     890:	f0 e0       	ldi	r31, 0x00	; 0
     892:	80 81       	ld	r24, Z
     894:	84 60       	ori	r24, 0x04	; 4
     896:	8c 93       	st	X, r24
     898:	80 e0       	ldi	r24, 0x00	; 0
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	a0 ea       	ldi	r26, 0xA0	; 160
     89e:	b0 e4       	ldi	r27, 0x40	; 64
     8a0:	8f a3       	std	Y+39, r24	; 0x27
     8a2:	98 a7       	std	Y+40, r25	; 0x28
     8a4:	a9 a7       	std	Y+41, r26	; 0x29
     8a6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     8a8:	6f a1       	ldd	r22, Y+39	; 0x27
     8aa:	78 a5       	ldd	r23, Y+40	; 0x28
     8ac:	89 a5       	ldd	r24, Y+41	; 0x29
     8ae:	9a a5       	ldd	r25, Y+42	; 0x2a
     8b0:	2d ec       	ldi	r18, 0xCD	; 205
     8b2:	3c ec       	ldi	r19, 0xCC	; 204
     8b4:	4c e2       	ldi	r20, 0x2C	; 44
     8b6:	55 e4       	ldi	r21, 0x45	; 69
     8b8:	0e 94 ee 1b 	call	0x37dc	; 0x37dc <__mulsf3>
     8bc:	dc 01       	movw	r26, r24
     8be:	cb 01       	movw	r24, r22
     8c0:	8b a3       	std	Y+35, r24	; 0x23
     8c2:	9c a3       	std	Y+36, r25	; 0x24
     8c4:	ad a3       	std	Y+37, r26	; 0x25
     8c6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     8c8:	6b a1       	ldd	r22, Y+35	; 0x23
     8ca:	7c a1       	ldd	r23, Y+36	; 0x24
     8cc:	8d a1       	ldd	r24, Y+37	; 0x25
     8ce:	9e a1       	ldd	r25, Y+38	; 0x26
     8d0:	20 e0       	ldi	r18, 0x00	; 0
     8d2:	30 e0       	ldi	r19, 0x00	; 0
     8d4:	40 e8       	ldi	r20, 0x80	; 128
     8d6:	5f e3       	ldi	r21, 0x3F	; 63
     8d8:	0e 94 f4 1d 	call	0x3be8	; 0x3be8 <__ltsf2>
     8dc:	88 23       	and	r24, r24
     8de:	2c f4       	brge	.+10     	; 0x8ea <lcd_set_4bit+0x73e>
		__ticks = 1;
     8e0:	81 e0       	ldi	r24, 0x01	; 1
     8e2:	90 e0       	ldi	r25, 0x00	; 0
     8e4:	9a a3       	std	Y+34, r25	; 0x22
     8e6:	89 a3       	std	Y+33, r24	; 0x21
     8e8:	3f c0       	rjmp	.+126    	; 0x968 <lcd_set_4bit+0x7bc>
	else if (__tmp > 65535)
     8ea:	6b a1       	ldd	r22, Y+35	; 0x23
     8ec:	7c a1       	ldd	r23, Y+36	; 0x24
     8ee:	8d a1       	ldd	r24, Y+37	; 0x25
     8f0:	9e a1       	ldd	r25, Y+38	; 0x26
     8f2:	20 e0       	ldi	r18, 0x00	; 0
     8f4:	3f ef       	ldi	r19, 0xFF	; 255
     8f6:	4f e7       	ldi	r20, 0x7F	; 127
     8f8:	57 e4       	ldi	r21, 0x47	; 71
     8fa:	0e 94 94 1d 	call	0x3b28	; 0x3b28 <__gtsf2>
     8fe:	18 16       	cp	r1, r24
     900:	4c f5       	brge	.+82     	; 0x954 <lcd_set_4bit+0x7a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     902:	6f a1       	ldd	r22, Y+39	; 0x27
     904:	78 a5       	ldd	r23, Y+40	; 0x28
     906:	89 a5       	ldd	r24, Y+41	; 0x29
     908:	9a a5       	ldd	r25, Y+42	; 0x2a
     90a:	20 e0       	ldi	r18, 0x00	; 0
     90c:	30 e0       	ldi	r19, 0x00	; 0
     90e:	40 e2       	ldi	r20, 0x20	; 32
     910:	51 e4       	ldi	r21, 0x41	; 65
     912:	0e 94 ee 1b 	call	0x37dc	; 0x37dc <__mulsf3>
     916:	dc 01       	movw	r26, r24
     918:	cb 01       	movw	r24, r22
     91a:	bc 01       	movw	r22, r24
     91c:	cd 01       	movw	r24, r26
     91e:	0e 94 18 1a 	call	0x3430	; 0x3430 <__fixunssfsi>
     922:	dc 01       	movw	r26, r24
     924:	cb 01       	movw	r24, r22
     926:	9a a3       	std	Y+34, r25	; 0x22
     928:	89 a3       	std	Y+33, r24	; 0x21
     92a:	0f c0       	rjmp	.+30     	; 0x94a <lcd_set_4bit+0x79e>
     92c:	84 e1       	ldi	r24, 0x14	; 20
     92e:	91 e0       	ldi	r25, 0x01	; 1
     930:	98 a3       	std	Y+32, r25	; 0x20
     932:	8f 8f       	std	Y+31, r24	; 0x1f
     934:	8f 8d       	ldd	r24, Y+31	; 0x1f
     936:	98 a1       	ldd	r25, Y+32	; 0x20
     938:	01 97       	sbiw	r24, 0x01	; 1
     93a:	f1 f7       	brne	.-4      	; 0x938 <lcd_set_4bit+0x78c>
     93c:	98 a3       	std	Y+32, r25	; 0x20
     93e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     940:	89 a1       	ldd	r24, Y+33	; 0x21
     942:	9a a1       	ldd	r25, Y+34	; 0x22
     944:	01 97       	sbiw	r24, 0x01	; 1
     946:	9a a3       	std	Y+34, r25	; 0x22
     948:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     94a:	89 a1       	ldd	r24, Y+33	; 0x21
     94c:	9a a1       	ldd	r25, Y+34	; 0x22
     94e:	00 97       	sbiw	r24, 0x00	; 0
     950:	69 f7       	brne	.-38     	; 0x92c <lcd_set_4bit+0x780>
     952:	14 c0       	rjmp	.+40     	; 0x97c <lcd_set_4bit+0x7d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     954:	6b a1       	ldd	r22, Y+35	; 0x23
     956:	7c a1       	ldd	r23, Y+36	; 0x24
     958:	8d a1       	ldd	r24, Y+37	; 0x25
     95a:	9e a1       	ldd	r25, Y+38	; 0x26
     95c:	0e 94 18 1a 	call	0x3430	; 0x3430 <__fixunssfsi>
     960:	dc 01       	movw	r26, r24
     962:	cb 01       	movw	r24, r22
     964:	9a a3       	std	Y+34, r25	; 0x22
     966:	89 a3       	std	Y+33, r24	; 0x21
     968:	89 a1       	ldd	r24, Y+33	; 0x21
     96a:	9a a1       	ldd	r25, Y+34	; 0x22
     96c:	9e 8f       	std	Y+30, r25	; 0x1e
     96e:	8d 8f       	std	Y+29, r24	; 0x1d
     970:	8d 8d       	ldd	r24, Y+29	; 0x1d
     972:	9e 8d       	ldd	r25, Y+30	; 0x1e
     974:	01 97       	sbiw	r24, 0x01	; 1
     976:	f1 f7       	brne	.-4      	; 0x974 <lcd_set_4bit+0x7c8>
     978:	9e 8f       	std	Y+30, r25	; 0x1e
     97a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     97c:	a8 e2       	ldi	r26, 0x28	; 40
     97e:	b0 e0       	ldi	r27, 0x00	; 0
     980:	e8 e2       	ldi	r30, 0x28	; 40
     982:	f0 e0       	ldi	r31, 0x00	; 0
     984:	80 81       	ld	r24, Z
     986:	8b 7f       	andi	r24, 0xFB	; 251
     988:	8c 93       	st	X, r24
     98a:	80 e0       	ldi	r24, 0x00	; 0
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	a0 e8       	ldi	r26, 0x80	; 128
     990:	bf e3       	ldi	r27, 0x3F	; 63
     992:	89 8f       	std	Y+25, r24	; 0x19
     994:	9a 8f       	std	Y+26, r25	; 0x1a
     996:	ab 8f       	std	Y+27, r26	; 0x1b
     998:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     99a:	69 8d       	ldd	r22, Y+25	; 0x19
     99c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     99e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     9a0:	9c 8d       	ldd	r25, Y+28	; 0x1c
     9a2:	2d ec       	ldi	r18, 0xCD	; 205
     9a4:	3c ec       	ldi	r19, 0xCC	; 204
     9a6:	4c e2       	ldi	r20, 0x2C	; 44
     9a8:	55 e4       	ldi	r21, 0x45	; 69
     9aa:	0e 94 ee 1b 	call	0x37dc	; 0x37dc <__mulsf3>
     9ae:	dc 01       	movw	r26, r24
     9b0:	cb 01       	movw	r24, r22
     9b2:	8d 8b       	std	Y+21, r24	; 0x15
     9b4:	9e 8b       	std	Y+22, r25	; 0x16
     9b6:	af 8b       	std	Y+23, r26	; 0x17
     9b8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     9ba:	6d 89       	ldd	r22, Y+21	; 0x15
     9bc:	7e 89       	ldd	r23, Y+22	; 0x16
     9be:	8f 89       	ldd	r24, Y+23	; 0x17
     9c0:	98 8d       	ldd	r25, Y+24	; 0x18
     9c2:	20 e0       	ldi	r18, 0x00	; 0
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	40 e8       	ldi	r20, 0x80	; 128
     9c8:	5f e3       	ldi	r21, 0x3F	; 63
     9ca:	0e 94 f4 1d 	call	0x3be8	; 0x3be8 <__ltsf2>
     9ce:	88 23       	and	r24, r24
     9d0:	2c f4       	brge	.+10     	; 0x9dc <lcd_set_4bit+0x830>
		__ticks = 1;
     9d2:	81 e0       	ldi	r24, 0x01	; 1
     9d4:	90 e0       	ldi	r25, 0x00	; 0
     9d6:	9c 8b       	std	Y+20, r25	; 0x14
     9d8:	8b 8b       	std	Y+19, r24	; 0x13
     9da:	3f c0       	rjmp	.+126    	; 0xa5a <lcd_set_4bit+0x8ae>
	else if (__tmp > 65535)
     9dc:	6d 89       	ldd	r22, Y+21	; 0x15
     9de:	7e 89       	ldd	r23, Y+22	; 0x16
     9e0:	8f 89       	ldd	r24, Y+23	; 0x17
     9e2:	98 8d       	ldd	r25, Y+24	; 0x18
     9e4:	20 e0       	ldi	r18, 0x00	; 0
     9e6:	3f ef       	ldi	r19, 0xFF	; 255
     9e8:	4f e7       	ldi	r20, 0x7F	; 127
     9ea:	57 e4       	ldi	r21, 0x47	; 71
     9ec:	0e 94 94 1d 	call	0x3b28	; 0x3b28 <__gtsf2>
     9f0:	18 16       	cp	r1, r24
     9f2:	4c f5       	brge	.+82     	; 0xa46 <lcd_set_4bit+0x89a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     9f4:	69 8d       	ldd	r22, Y+25	; 0x19
     9f6:	7a 8d       	ldd	r23, Y+26	; 0x1a
     9f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     9fa:	9c 8d       	ldd	r25, Y+28	; 0x1c
     9fc:	20 e0       	ldi	r18, 0x00	; 0
     9fe:	30 e0       	ldi	r19, 0x00	; 0
     a00:	40 e2       	ldi	r20, 0x20	; 32
     a02:	51 e4       	ldi	r21, 0x41	; 65
     a04:	0e 94 ee 1b 	call	0x37dc	; 0x37dc <__mulsf3>
     a08:	dc 01       	movw	r26, r24
     a0a:	cb 01       	movw	r24, r22
     a0c:	bc 01       	movw	r22, r24
     a0e:	cd 01       	movw	r24, r26
     a10:	0e 94 18 1a 	call	0x3430	; 0x3430 <__fixunssfsi>
     a14:	dc 01       	movw	r26, r24
     a16:	cb 01       	movw	r24, r22
     a18:	9c 8b       	std	Y+20, r25	; 0x14
     a1a:	8b 8b       	std	Y+19, r24	; 0x13
     a1c:	0f c0       	rjmp	.+30     	; 0xa3c <lcd_set_4bit+0x890>
     a1e:	84 e1       	ldi	r24, 0x14	; 20
     a20:	91 e0       	ldi	r25, 0x01	; 1
     a22:	9a 8b       	std	Y+18, r25	; 0x12
     a24:	89 8b       	std	Y+17, r24	; 0x11
     a26:	89 89       	ldd	r24, Y+17	; 0x11
     a28:	9a 89       	ldd	r25, Y+18	; 0x12
     a2a:	01 97       	sbiw	r24, 0x01	; 1
     a2c:	f1 f7       	brne	.-4      	; 0xa2a <lcd_set_4bit+0x87e>
     a2e:	9a 8b       	std	Y+18, r25	; 0x12
     a30:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a32:	8b 89       	ldd	r24, Y+19	; 0x13
     a34:	9c 89       	ldd	r25, Y+20	; 0x14
     a36:	01 97       	sbiw	r24, 0x01	; 1
     a38:	9c 8b       	std	Y+20, r25	; 0x14
     a3a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a3c:	8b 89       	ldd	r24, Y+19	; 0x13
     a3e:	9c 89       	ldd	r25, Y+20	; 0x14
     a40:	00 97       	sbiw	r24, 0x00	; 0
     a42:	69 f7       	brne	.-38     	; 0xa1e <lcd_set_4bit+0x872>
     a44:	14 c0       	rjmp	.+40     	; 0xa6e <lcd_set_4bit+0x8c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a46:	6d 89       	ldd	r22, Y+21	; 0x15
     a48:	7e 89       	ldd	r23, Y+22	; 0x16
     a4a:	8f 89       	ldd	r24, Y+23	; 0x17
     a4c:	98 8d       	ldd	r25, Y+24	; 0x18
     a4e:	0e 94 18 1a 	call	0x3430	; 0x3430 <__fixunssfsi>
     a52:	dc 01       	movw	r26, r24
     a54:	cb 01       	movw	r24, r22
     a56:	9c 8b       	std	Y+20, r25	; 0x14
     a58:	8b 8b       	std	Y+19, r24	; 0x13
     a5a:	8b 89       	ldd	r24, Y+19	; 0x13
     a5c:	9c 89       	ldd	r25, Y+20	; 0x14
     a5e:	98 8b       	std	Y+16, r25	; 0x10
     a60:	8f 87       	std	Y+15, r24	; 0x0f
     a62:	8f 85       	ldd	r24, Y+15	; 0x0f
     a64:	98 89       	ldd	r25, Y+16	; 0x10
     a66:	01 97       	sbiw	r24, 0x01	; 1
     a68:	f1 f7       	brne	.-4      	; 0xa66 <lcd_set_4bit+0x8ba>
     a6a:	98 8b       	std	Y+16, r25	; 0x10
     a6c:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     a6e:	a8 e2       	ldi	r26, 0x28	; 40
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	e8 e2       	ldi	r30, 0x28	; 40
     a74:	f0 e0       	ldi	r31, 0x00	; 0
     a76:	80 81       	ld	r24, Z
     a78:	8e 7f       	andi	r24, 0xFE	; 254
     a7a:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     a7c:	a8 e2       	ldi	r26, 0x28	; 40
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	e8 e2       	ldi	r30, 0x28	; 40
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	80 81       	ld	r24, Z
     a86:	8d 7f       	andi	r24, 0xFD	; 253
     a88:	8c 93       	st	X, r24
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
     a8a:	e8 e2       	ldi	r30, 0x28	; 40
     a8c:	f0 e0       	ldi	r31, 0x00	; 0
     a8e:	80 e2       	ldi	r24, 0x20	; 32
     a90:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     a92:	a8 e2       	ldi	r26, 0x28	; 40
     a94:	b0 e0       	ldi	r27, 0x00	; 0
     a96:	e8 e2       	ldi	r30, 0x28	; 40
     a98:	f0 e0       	ldi	r31, 0x00	; 0
     a9a:	80 81       	ld	r24, Z
     a9c:	84 60       	ori	r24, 0x04	; 4
     a9e:	8c 93       	st	X, r24
     aa0:	80 e0       	ldi	r24, 0x00	; 0
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 ea       	ldi	r26, 0xA0	; 160
     aa6:	b0 e4       	ldi	r27, 0x40	; 64
     aa8:	8b 87       	std	Y+11, r24	; 0x0b
     aaa:	9c 87       	std	Y+12, r25	; 0x0c
     aac:	ad 87       	std	Y+13, r26	; 0x0d
     aae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ab0:	6b 85       	ldd	r22, Y+11	; 0x0b
     ab2:	7c 85       	ldd	r23, Y+12	; 0x0c
     ab4:	8d 85       	ldd	r24, Y+13	; 0x0d
     ab6:	9e 85       	ldd	r25, Y+14	; 0x0e
     ab8:	2d ec       	ldi	r18, 0xCD	; 205
     aba:	3c ec       	ldi	r19, 0xCC	; 204
     abc:	4c e2       	ldi	r20, 0x2C	; 44
     abe:	55 e4       	ldi	r21, 0x45	; 69
     ac0:	0e 94 ee 1b 	call	0x37dc	; 0x37dc <__mulsf3>
     ac4:	dc 01       	movw	r26, r24
     ac6:	cb 01       	movw	r24, r22
     ac8:	8f 83       	std	Y+7, r24	; 0x07
     aca:	98 87       	std	Y+8, r25	; 0x08
     acc:	a9 87       	std	Y+9, r26	; 0x09
     ace:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ad0:	6f 81       	ldd	r22, Y+7	; 0x07
     ad2:	78 85       	ldd	r23, Y+8	; 0x08
     ad4:	89 85       	ldd	r24, Y+9	; 0x09
     ad6:	9a 85       	ldd	r25, Y+10	; 0x0a
     ad8:	20 e0       	ldi	r18, 0x00	; 0
     ada:	30 e0       	ldi	r19, 0x00	; 0
     adc:	40 e8       	ldi	r20, 0x80	; 128
     ade:	5f e3       	ldi	r21, 0x3F	; 63
     ae0:	0e 94 f4 1d 	call	0x3be8	; 0x3be8 <__ltsf2>
     ae4:	88 23       	and	r24, r24
     ae6:	2c f4       	brge	.+10     	; 0xaf2 <lcd_set_4bit+0x946>
		__ticks = 1;
     ae8:	81 e0       	ldi	r24, 0x01	; 1
     aea:	90 e0       	ldi	r25, 0x00	; 0
     aec:	9e 83       	std	Y+6, r25	; 0x06
     aee:	8d 83       	std	Y+5, r24	; 0x05
     af0:	3f c0       	rjmp	.+126    	; 0xb70 <lcd_set_4bit+0x9c4>
	else if (__tmp > 65535)
     af2:	6f 81       	ldd	r22, Y+7	; 0x07
     af4:	78 85       	ldd	r23, Y+8	; 0x08
     af6:	89 85       	ldd	r24, Y+9	; 0x09
     af8:	9a 85       	ldd	r25, Y+10	; 0x0a
     afa:	20 e0       	ldi	r18, 0x00	; 0
     afc:	3f ef       	ldi	r19, 0xFF	; 255
     afe:	4f e7       	ldi	r20, 0x7F	; 127
     b00:	57 e4       	ldi	r21, 0x47	; 71
     b02:	0e 94 94 1d 	call	0x3b28	; 0x3b28 <__gtsf2>
     b06:	18 16       	cp	r1, r24
     b08:	4c f5       	brge	.+82     	; 0xb5c <lcd_set_4bit+0x9b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b0a:	6b 85       	ldd	r22, Y+11	; 0x0b
     b0c:	7c 85       	ldd	r23, Y+12	; 0x0c
     b0e:	8d 85       	ldd	r24, Y+13	; 0x0d
     b10:	9e 85       	ldd	r25, Y+14	; 0x0e
     b12:	20 e0       	ldi	r18, 0x00	; 0
     b14:	30 e0       	ldi	r19, 0x00	; 0
     b16:	40 e2       	ldi	r20, 0x20	; 32
     b18:	51 e4       	ldi	r21, 0x41	; 65
     b1a:	0e 94 ee 1b 	call	0x37dc	; 0x37dc <__mulsf3>
     b1e:	dc 01       	movw	r26, r24
     b20:	cb 01       	movw	r24, r22
     b22:	bc 01       	movw	r22, r24
     b24:	cd 01       	movw	r24, r26
     b26:	0e 94 18 1a 	call	0x3430	; 0x3430 <__fixunssfsi>
     b2a:	dc 01       	movw	r26, r24
     b2c:	cb 01       	movw	r24, r22
     b2e:	9e 83       	std	Y+6, r25	; 0x06
     b30:	8d 83       	std	Y+5, r24	; 0x05
     b32:	0f c0       	rjmp	.+30     	; 0xb52 <lcd_set_4bit+0x9a6>
     b34:	84 e1       	ldi	r24, 0x14	; 20
     b36:	91 e0       	ldi	r25, 0x01	; 1
     b38:	9c 83       	std	Y+4, r25	; 0x04
     b3a:	8b 83       	std	Y+3, r24	; 0x03
     b3c:	8b 81       	ldd	r24, Y+3	; 0x03
     b3e:	9c 81       	ldd	r25, Y+4	; 0x04
     b40:	01 97       	sbiw	r24, 0x01	; 1
     b42:	f1 f7       	brne	.-4      	; 0xb40 <lcd_set_4bit+0x994>
     b44:	9c 83       	std	Y+4, r25	; 0x04
     b46:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b48:	8d 81       	ldd	r24, Y+5	; 0x05
     b4a:	9e 81       	ldd	r25, Y+6	; 0x06
     b4c:	01 97       	sbiw	r24, 0x01	; 1
     b4e:	9e 83       	std	Y+6, r25	; 0x06
     b50:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b52:	8d 81       	ldd	r24, Y+5	; 0x05
     b54:	9e 81       	ldd	r25, Y+6	; 0x06
     b56:	00 97       	sbiw	r24, 0x00	; 0
     b58:	69 f7       	brne	.-38     	; 0xb34 <lcd_set_4bit+0x988>
     b5a:	14 c0       	rjmp	.+40     	; 0xb84 <lcd_set_4bit+0x9d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b5c:	6f 81       	ldd	r22, Y+7	; 0x07
     b5e:	78 85       	ldd	r23, Y+8	; 0x08
     b60:	89 85       	ldd	r24, Y+9	; 0x09
     b62:	9a 85       	ldd	r25, Y+10	; 0x0a
     b64:	0e 94 18 1a 	call	0x3430	; 0x3430 <__fixunssfsi>
     b68:	dc 01       	movw	r26, r24
     b6a:	cb 01       	movw	r24, r22
     b6c:	9e 83       	std	Y+6, r25	; 0x06
     b6e:	8d 83       	std	Y+5, r24	; 0x05
     b70:	8d 81       	ldd	r24, Y+5	; 0x05
     b72:	9e 81       	ldd	r25, Y+6	; 0x06
     b74:	9a 83       	std	Y+2, r25	; 0x02
     b76:	89 83       	std	Y+1, r24	; 0x01
     b78:	89 81       	ldd	r24, Y+1	; 0x01
     b7a:	9a 81       	ldd	r25, Y+2	; 0x02
     b7c:	01 97       	sbiw	r24, 0x01	; 1
     b7e:	f1 f7       	brne	.-4      	; 0xb7c <lcd_set_4bit+0x9d0>
     b80:	9a 83       	std	Y+2, r25	; 0x02
     b82:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     b84:	a8 e2       	ldi	r26, 0x28	; 40
     b86:	b0 e0       	ldi	r27, 0x00	; 0
     b88:	e8 e2       	ldi	r30, 0x28	; 40
     b8a:	f0 e0       	ldi	r31, 0x00	; 0
     b8c:	80 81       	ld	r24, Z
     b8e:	8b 7f       	andi	r24, 0xFB	; 251
     b90:	8c 93       	st	X, r24

	
}
     b92:	c0 59       	subi	r28, 0x90	; 144
     b94:	df 4f       	sbci	r29, 0xFF	; 255
     b96:	0f b6       	in	r0, 0x3f	; 63
     b98:	f8 94       	cli
     b9a:	de bf       	out	0x3e, r29	; 62
     b9c:	0f be       	out	0x3f, r0	; 63
     b9e:	cd bf       	out	0x3d, r28	; 61
     ba0:	cf 91       	pop	r28
     ba2:	df 91       	pop	r29
     ba4:	1f 91       	pop	r17
     ba6:	0f 91       	pop	r16
     ba8:	08 95       	ret

00000baa <lcd_init>:

/*****Function to Initialize LCD*****/
void lcd_init()
{
     baa:	df 93       	push	r29
     bac:	cf 93       	push	r28
     bae:	cd b7       	in	r28, 0x3d	; 61
     bb0:	de b7       	in	r29, 0x3e	; 62
     bb2:	2e 97       	sbiw	r28, 0x0e	; 14
     bb4:	0f b6       	in	r0, 0x3f	; 63
     bb6:	f8 94       	cli
     bb8:	de bf       	out	0x3e, r29	; 62
     bba:	0f be       	out	0x3f, r0	; 63
     bbc:	cd bf       	out	0x3d, r28	; 61
     bbe:	80 e0       	ldi	r24, 0x00	; 0
     bc0:	90 e0       	ldi	r25, 0x00	; 0
     bc2:	a0 e8       	ldi	r26, 0x80	; 128
     bc4:	bf e3       	ldi	r27, 0x3F	; 63
     bc6:	8b 87       	std	Y+11, r24	; 0x0b
     bc8:	9c 87       	std	Y+12, r25	; 0x0c
     bca:	ad 87       	std	Y+13, r26	; 0x0d
     bcc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bce:	6b 85       	ldd	r22, Y+11	; 0x0b
     bd0:	7c 85       	ldd	r23, Y+12	; 0x0c
     bd2:	8d 85       	ldd	r24, Y+13	; 0x0d
     bd4:	9e 85       	ldd	r25, Y+14	; 0x0e
     bd6:	2d ec       	ldi	r18, 0xCD	; 205
     bd8:	3c ec       	ldi	r19, 0xCC	; 204
     bda:	4c e2       	ldi	r20, 0x2C	; 44
     bdc:	55 e4       	ldi	r21, 0x45	; 69
     bde:	0e 94 ee 1b 	call	0x37dc	; 0x37dc <__mulsf3>
     be2:	dc 01       	movw	r26, r24
     be4:	cb 01       	movw	r24, r22
     be6:	8f 83       	std	Y+7, r24	; 0x07
     be8:	98 87       	std	Y+8, r25	; 0x08
     bea:	a9 87       	std	Y+9, r26	; 0x09
     bec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     bee:	6f 81       	ldd	r22, Y+7	; 0x07
     bf0:	78 85       	ldd	r23, Y+8	; 0x08
     bf2:	89 85       	ldd	r24, Y+9	; 0x09
     bf4:	9a 85       	ldd	r25, Y+10	; 0x0a
     bf6:	20 e0       	ldi	r18, 0x00	; 0
     bf8:	30 e0       	ldi	r19, 0x00	; 0
     bfa:	40 e8       	ldi	r20, 0x80	; 128
     bfc:	5f e3       	ldi	r21, 0x3F	; 63
     bfe:	0e 94 f4 1d 	call	0x3be8	; 0x3be8 <__ltsf2>
     c02:	88 23       	and	r24, r24
     c04:	2c f4       	brge	.+10     	; 0xc10 <lcd_init+0x66>
		__ticks = 1;
     c06:	81 e0       	ldi	r24, 0x01	; 1
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	9e 83       	std	Y+6, r25	; 0x06
     c0c:	8d 83       	std	Y+5, r24	; 0x05
     c0e:	3f c0       	rjmp	.+126    	; 0xc8e <lcd_init+0xe4>
	else if (__tmp > 65535)
     c10:	6f 81       	ldd	r22, Y+7	; 0x07
     c12:	78 85       	ldd	r23, Y+8	; 0x08
     c14:	89 85       	ldd	r24, Y+9	; 0x09
     c16:	9a 85       	ldd	r25, Y+10	; 0x0a
     c18:	20 e0       	ldi	r18, 0x00	; 0
     c1a:	3f ef       	ldi	r19, 0xFF	; 255
     c1c:	4f e7       	ldi	r20, 0x7F	; 127
     c1e:	57 e4       	ldi	r21, 0x47	; 71
     c20:	0e 94 94 1d 	call	0x3b28	; 0x3b28 <__gtsf2>
     c24:	18 16       	cp	r1, r24
     c26:	4c f5       	brge	.+82     	; 0xc7a <lcd_init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c28:	6b 85       	ldd	r22, Y+11	; 0x0b
     c2a:	7c 85       	ldd	r23, Y+12	; 0x0c
     c2c:	8d 85       	ldd	r24, Y+13	; 0x0d
     c2e:	9e 85       	ldd	r25, Y+14	; 0x0e
     c30:	20 e0       	ldi	r18, 0x00	; 0
     c32:	30 e0       	ldi	r19, 0x00	; 0
     c34:	40 e2       	ldi	r20, 0x20	; 32
     c36:	51 e4       	ldi	r21, 0x41	; 65
     c38:	0e 94 ee 1b 	call	0x37dc	; 0x37dc <__mulsf3>
     c3c:	dc 01       	movw	r26, r24
     c3e:	cb 01       	movw	r24, r22
     c40:	bc 01       	movw	r22, r24
     c42:	cd 01       	movw	r24, r26
     c44:	0e 94 18 1a 	call	0x3430	; 0x3430 <__fixunssfsi>
     c48:	dc 01       	movw	r26, r24
     c4a:	cb 01       	movw	r24, r22
     c4c:	9e 83       	std	Y+6, r25	; 0x06
     c4e:	8d 83       	std	Y+5, r24	; 0x05
     c50:	0f c0       	rjmp	.+30     	; 0xc70 <lcd_init+0xc6>
     c52:	84 e1       	ldi	r24, 0x14	; 20
     c54:	91 e0       	ldi	r25, 0x01	; 1
     c56:	9c 83       	std	Y+4, r25	; 0x04
     c58:	8b 83       	std	Y+3, r24	; 0x03
     c5a:	8b 81       	ldd	r24, Y+3	; 0x03
     c5c:	9c 81       	ldd	r25, Y+4	; 0x04
     c5e:	01 97       	sbiw	r24, 0x01	; 1
     c60:	f1 f7       	brne	.-4      	; 0xc5e <lcd_init+0xb4>
     c62:	9c 83       	std	Y+4, r25	; 0x04
     c64:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c66:	8d 81       	ldd	r24, Y+5	; 0x05
     c68:	9e 81       	ldd	r25, Y+6	; 0x06
     c6a:	01 97       	sbiw	r24, 0x01	; 1
     c6c:	9e 83       	std	Y+6, r25	; 0x06
     c6e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c70:	8d 81       	ldd	r24, Y+5	; 0x05
     c72:	9e 81       	ldd	r25, Y+6	; 0x06
     c74:	00 97       	sbiw	r24, 0x00	; 0
     c76:	69 f7       	brne	.-38     	; 0xc52 <lcd_init+0xa8>
     c78:	14 c0       	rjmp	.+40     	; 0xca2 <lcd_init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c7a:	6f 81       	ldd	r22, Y+7	; 0x07
     c7c:	78 85       	ldd	r23, Y+8	; 0x08
     c7e:	89 85       	ldd	r24, Y+9	; 0x09
     c80:	9a 85       	ldd	r25, Y+10	; 0x0a
     c82:	0e 94 18 1a 	call	0x3430	; 0x3430 <__fixunssfsi>
     c86:	dc 01       	movw	r26, r24
     c88:	cb 01       	movw	r24, r22
     c8a:	9e 83       	std	Y+6, r25	; 0x06
     c8c:	8d 83       	std	Y+5, r24	; 0x05
     c8e:	8d 81       	ldd	r24, Y+5	; 0x05
     c90:	9e 81       	ldd	r25, Y+6	; 0x06
     c92:	9a 83       	std	Y+2, r25	; 0x02
     c94:	89 83       	std	Y+1, r24	; 0x01
     c96:	89 81       	ldd	r24, Y+1	; 0x01
     c98:	9a 81       	ldd	r25, Y+2	; 0x02
     c9a:	01 97       	sbiw	r24, 0x01	; 1
     c9c:	f1 f7       	brne	.-4      	; 0xc9a <lcd_init+0xf0>
     c9e:	9a 83       	std	Y+2, r25	; 0x02
     ca0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
     ca2:	88 e2       	ldi	r24, 0x28	; 40
     ca4:	0e 94 69 06 	call	0xcd2	; 0xcd2 <lcd_wr_command>
	lcd_wr_command(0x01);
     ca8:	81 e0       	ldi	r24, 0x01	; 1
     caa:	0e 94 69 06 	call	0xcd2	; 0xcd2 <lcd_wr_command>
	lcd_wr_command(0x06);
     cae:	86 e0       	ldi	r24, 0x06	; 6
     cb0:	0e 94 69 06 	call	0xcd2	; 0xcd2 <lcd_wr_command>
	lcd_wr_command(0x0E);
     cb4:	8e e0       	ldi	r24, 0x0E	; 14
     cb6:	0e 94 69 06 	call	0xcd2	; 0xcd2 <lcd_wr_command>
	lcd_wr_command(0x80);
     cba:	80 e8       	ldi	r24, 0x80	; 128
     cbc:	0e 94 69 06 	call	0xcd2	; 0xcd2 <lcd_wr_command>
		
}
     cc0:	2e 96       	adiw	r28, 0x0e	; 14
     cc2:	0f b6       	in	r0, 0x3f	; 63
     cc4:	f8 94       	cli
     cc6:	de bf       	out	0x3e, r29	; 62
     cc8:	0f be       	out	0x3f, r0	; 63
     cca:	cd bf       	out	0x3d, r28	; 61
     ccc:	cf 91       	pop	r28
     cce:	df 91       	pop	r29
     cd0:	08 95       	ret

00000cd2 <lcd_wr_command>:

	 
/*****Function to Write Command on LCD*****/
void lcd_wr_command(unsigned char cmd)
{
     cd2:	df 93       	push	r29
     cd4:	cf 93       	push	r28
     cd6:	cd b7       	in	r28, 0x3d	; 61
     cd8:	de b7       	in	r29, 0x3e	; 62
     cda:	6e 97       	sbiw	r28, 0x1e	; 30
     cdc:	0f b6       	in	r0, 0x3f	; 63
     cde:	f8 94       	cli
     ce0:	de bf       	out	0x3e, r29	; 62
     ce2:	0f be       	out	0x3f, r0	; 63
     ce4:	cd bf       	out	0x3d, r28	; 61
     ce6:	8e 8f       	std	Y+30, r24	; 0x1e
	unsigned char temp;
	temp = cmd;
     ce8:	8e 8d       	ldd	r24, Y+30	; 0x1e
     cea:	8d 8f       	std	Y+29, r24	; 0x1d
	temp = temp & 0xF0;
     cec:	8d 8d       	ldd	r24, Y+29	; 0x1d
     cee:	80 7f       	andi	r24, 0xF0	; 240
     cf0:	8d 8f       	std	Y+29, r24	; 0x1d
	lcd_port &= 0x0F;
     cf2:	a8 e2       	ldi	r26, 0x28	; 40
     cf4:	b0 e0       	ldi	r27, 0x00	; 0
     cf6:	e8 e2       	ldi	r30, 0x28	; 40
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	80 81       	ld	r24, Z
     cfc:	8f 70       	andi	r24, 0x0F	; 15
     cfe:	8c 93       	st	X, r24
	lcd_port |= temp;
     d00:	a8 e2       	ldi	r26, 0x28	; 40
     d02:	b0 e0       	ldi	r27, 0x00	; 0
     d04:	e8 e2       	ldi	r30, 0x28	; 40
     d06:	f0 e0       	ldi	r31, 0x00	; 0
     d08:	90 81       	ld	r25, Z
     d0a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d0c:	89 2b       	or	r24, r25
     d0e:	8c 93       	st	X, r24
	cbit(lcd_port,RS);
     d10:	a8 e2       	ldi	r26, 0x28	; 40
     d12:	b0 e0       	ldi	r27, 0x00	; 0
     d14:	e8 e2       	ldi	r30, 0x28	; 40
     d16:	f0 e0       	ldi	r31, 0x00	; 0
     d18:	80 81       	ld	r24, Z
     d1a:	8e 7f       	andi	r24, 0xFE	; 254
     d1c:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
     d1e:	a8 e2       	ldi	r26, 0x28	; 40
     d20:	b0 e0       	ldi	r27, 0x00	; 0
     d22:	e8 e2       	ldi	r30, 0x28	; 40
     d24:	f0 e0       	ldi	r31, 0x00	; 0
     d26:	80 81       	ld	r24, Z
     d28:	8d 7f       	andi	r24, 0xFD	; 253
     d2a:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
     d2c:	a8 e2       	ldi	r26, 0x28	; 40
     d2e:	b0 e0       	ldi	r27, 0x00	; 0
     d30:	e8 e2       	ldi	r30, 0x28	; 40
     d32:	f0 e0       	ldi	r31, 0x00	; 0
     d34:	80 81       	ld	r24, Z
     d36:	84 60       	ori	r24, 0x04	; 4
     d38:	8c 93       	st	X, r24
     d3a:	80 e0       	ldi	r24, 0x00	; 0
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	a0 ea       	ldi	r26, 0xA0	; 160
     d40:	b0 e4       	ldi	r27, 0x40	; 64
     d42:	89 8f       	std	Y+25, r24	; 0x19
     d44:	9a 8f       	std	Y+26, r25	; 0x1a
     d46:	ab 8f       	std	Y+27, r26	; 0x1b
     d48:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d4a:	69 8d       	ldd	r22, Y+25	; 0x19
     d4c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d4e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d50:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d52:	2d ec       	ldi	r18, 0xCD	; 205
     d54:	3c ec       	ldi	r19, 0xCC	; 204
     d56:	4c e2       	ldi	r20, 0x2C	; 44
     d58:	55 e4       	ldi	r21, 0x45	; 69
     d5a:	0e 94 ee 1b 	call	0x37dc	; 0x37dc <__mulsf3>
     d5e:	dc 01       	movw	r26, r24
     d60:	cb 01       	movw	r24, r22
     d62:	8d 8b       	std	Y+21, r24	; 0x15
     d64:	9e 8b       	std	Y+22, r25	; 0x16
     d66:	af 8b       	std	Y+23, r26	; 0x17
     d68:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     d6a:	6d 89       	ldd	r22, Y+21	; 0x15
     d6c:	7e 89       	ldd	r23, Y+22	; 0x16
     d6e:	8f 89       	ldd	r24, Y+23	; 0x17
     d70:	98 8d       	ldd	r25, Y+24	; 0x18
     d72:	20 e0       	ldi	r18, 0x00	; 0
     d74:	30 e0       	ldi	r19, 0x00	; 0
     d76:	40 e8       	ldi	r20, 0x80	; 128
     d78:	5f e3       	ldi	r21, 0x3F	; 63
     d7a:	0e 94 f4 1d 	call	0x3be8	; 0x3be8 <__ltsf2>
     d7e:	88 23       	and	r24, r24
     d80:	2c f4       	brge	.+10     	; 0xd8c <lcd_wr_command+0xba>
		__ticks = 1;
     d82:	81 e0       	ldi	r24, 0x01	; 1
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	9c 8b       	std	Y+20, r25	; 0x14
     d88:	8b 8b       	std	Y+19, r24	; 0x13
     d8a:	3f c0       	rjmp	.+126    	; 0xe0a <lcd_wr_command+0x138>
	else if (__tmp > 65535)
     d8c:	6d 89       	ldd	r22, Y+21	; 0x15
     d8e:	7e 89       	ldd	r23, Y+22	; 0x16
     d90:	8f 89       	ldd	r24, Y+23	; 0x17
     d92:	98 8d       	ldd	r25, Y+24	; 0x18
     d94:	20 e0       	ldi	r18, 0x00	; 0
     d96:	3f ef       	ldi	r19, 0xFF	; 255
     d98:	4f e7       	ldi	r20, 0x7F	; 127
     d9a:	57 e4       	ldi	r21, 0x47	; 71
     d9c:	0e 94 94 1d 	call	0x3b28	; 0x3b28 <__gtsf2>
     da0:	18 16       	cp	r1, r24
     da2:	4c f5       	brge	.+82     	; 0xdf6 <lcd_wr_command+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     da4:	69 8d       	ldd	r22, Y+25	; 0x19
     da6:	7a 8d       	ldd	r23, Y+26	; 0x1a
     da8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     daa:	9c 8d       	ldd	r25, Y+28	; 0x1c
     dac:	20 e0       	ldi	r18, 0x00	; 0
     dae:	30 e0       	ldi	r19, 0x00	; 0
     db0:	40 e2       	ldi	r20, 0x20	; 32
     db2:	51 e4       	ldi	r21, 0x41	; 65
     db4:	0e 94 ee 1b 	call	0x37dc	; 0x37dc <__mulsf3>
     db8:	dc 01       	movw	r26, r24
     dba:	cb 01       	movw	r24, r22
     dbc:	bc 01       	movw	r22, r24
     dbe:	cd 01       	movw	r24, r26
     dc0:	0e 94 18 1a 	call	0x3430	; 0x3430 <__fixunssfsi>
     dc4:	dc 01       	movw	r26, r24
     dc6:	cb 01       	movw	r24, r22
     dc8:	9c 8b       	std	Y+20, r25	; 0x14
     dca:	8b 8b       	std	Y+19, r24	; 0x13
     dcc:	0f c0       	rjmp	.+30     	; 0xdec <lcd_wr_command+0x11a>
     dce:	84 e1       	ldi	r24, 0x14	; 20
     dd0:	91 e0       	ldi	r25, 0x01	; 1
     dd2:	9a 8b       	std	Y+18, r25	; 0x12
     dd4:	89 8b       	std	Y+17, r24	; 0x11
     dd6:	89 89       	ldd	r24, Y+17	; 0x11
     dd8:	9a 89       	ldd	r25, Y+18	; 0x12
     dda:	01 97       	sbiw	r24, 0x01	; 1
     ddc:	f1 f7       	brne	.-4      	; 0xdda <lcd_wr_command+0x108>
     dde:	9a 8b       	std	Y+18, r25	; 0x12
     de0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     de2:	8b 89       	ldd	r24, Y+19	; 0x13
     de4:	9c 89       	ldd	r25, Y+20	; 0x14
     de6:	01 97       	sbiw	r24, 0x01	; 1
     de8:	9c 8b       	std	Y+20, r25	; 0x14
     dea:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dec:	8b 89       	ldd	r24, Y+19	; 0x13
     dee:	9c 89       	ldd	r25, Y+20	; 0x14
     df0:	00 97       	sbiw	r24, 0x00	; 0
     df2:	69 f7       	brne	.-38     	; 0xdce <lcd_wr_command+0xfc>
     df4:	14 c0       	rjmp	.+40     	; 0xe1e <lcd_wr_command+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     df6:	6d 89       	ldd	r22, Y+21	; 0x15
     df8:	7e 89       	ldd	r23, Y+22	; 0x16
     dfa:	8f 89       	ldd	r24, Y+23	; 0x17
     dfc:	98 8d       	ldd	r25, Y+24	; 0x18
     dfe:	0e 94 18 1a 	call	0x3430	; 0x3430 <__fixunssfsi>
     e02:	dc 01       	movw	r26, r24
     e04:	cb 01       	movw	r24, r22
     e06:	9c 8b       	std	Y+20, r25	; 0x14
     e08:	8b 8b       	std	Y+19, r24	; 0x13
     e0a:	8b 89       	ldd	r24, Y+19	; 0x13
     e0c:	9c 89       	ldd	r25, Y+20	; 0x14
     e0e:	98 8b       	std	Y+16, r25	; 0x10
     e10:	8f 87       	std	Y+15, r24	; 0x0f
     e12:	8f 85       	ldd	r24, Y+15	; 0x0f
     e14:	98 89       	ldd	r25, Y+16	; 0x10
     e16:	01 97       	sbiw	r24, 0x01	; 1
     e18:	f1 f7       	brne	.-4      	; 0xe16 <lcd_wr_command+0x144>
     e1a:	98 8b       	std	Y+16, r25	; 0x10
     e1c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	cbit(lcd_port,EN);
     e1e:	a8 e2       	ldi	r26, 0x28	; 40
     e20:	b0 e0       	ldi	r27, 0x00	; 0
     e22:	e8 e2       	ldi	r30, 0x28	; 40
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	80 81       	ld	r24, Z
     e28:	8b 7f       	andi	r24, 0xFB	; 251
     e2a:	8c 93       	st	X, r24
	
	cmd = cmd & 0x0F;
     e2c:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e2e:	8f 70       	andi	r24, 0x0F	; 15
     e30:	8e 8f       	std	Y+30, r24	; 0x1e
	cmd = cmd<<4;
     e32:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e34:	82 95       	swap	r24
     e36:	80 7f       	andi	r24, 0xF0	; 240
     e38:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
     e3a:	a8 e2       	ldi	r26, 0x28	; 40
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	e8 e2       	ldi	r30, 0x28	; 40
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	8f 70       	andi	r24, 0x0F	; 15
     e46:	8c 93       	st	X, r24
	lcd_port |= cmd;
     e48:	a8 e2       	ldi	r26, 0x28	; 40
     e4a:	b0 e0       	ldi	r27, 0x00	; 0
     e4c:	e8 e2       	ldi	r30, 0x28	; 40
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	90 81       	ld	r25, Z
     e52:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e54:	89 2b       	or	r24, r25
     e56:	8c 93       	st	X, r24
	cbit(lcd_port,RS);
     e58:	a8 e2       	ldi	r26, 0x28	; 40
     e5a:	b0 e0       	ldi	r27, 0x00	; 0
     e5c:	e8 e2       	ldi	r30, 0x28	; 40
     e5e:	f0 e0       	ldi	r31, 0x00	; 0
     e60:	80 81       	ld	r24, Z
     e62:	8e 7f       	andi	r24, 0xFE	; 254
     e64:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
     e66:	a8 e2       	ldi	r26, 0x28	; 40
     e68:	b0 e0       	ldi	r27, 0x00	; 0
     e6a:	e8 e2       	ldi	r30, 0x28	; 40
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	80 81       	ld	r24, Z
     e70:	8d 7f       	andi	r24, 0xFD	; 253
     e72:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
     e74:	a8 e2       	ldi	r26, 0x28	; 40
     e76:	b0 e0       	ldi	r27, 0x00	; 0
     e78:	e8 e2       	ldi	r30, 0x28	; 40
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	80 81       	ld	r24, Z
     e7e:	84 60       	ori	r24, 0x04	; 4
     e80:	8c 93       	st	X, r24
     e82:	80 e0       	ldi	r24, 0x00	; 0
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	a0 ea       	ldi	r26, 0xA0	; 160
     e88:	b0 e4       	ldi	r27, 0x40	; 64
     e8a:	8b 87       	std	Y+11, r24	; 0x0b
     e8c:	9c 87       	std	Y+12, r25	; 0x0c
     e8e:	ad 87       	std	Y+13, r26	; 0x0d
     e90:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e92:	6b 85       	ldd	r22, Y+11	; 0x0b
     e94:	7c 85       	ldd	r23, Y+12	; 0x0c
     e96:	8d 85       	ldd	r24, Y+13	; 0x0d
     e98:	9e 85       	ldd	r25, Y+14	; 0x0e
     e9a:	2d ec       	ldi	r18, 0xCD	; 205
     e9c:	3c ec       	ldi	r19, 0xCC	; 204
     e9e:	4c e2       	ldi	r20, 0x2C	; 44
     ea0:	55 e4       	ldi	r21, 0x45	; 69
     ea2:	0e 94 ee 1b 	call	0x37dc	; 0x37dc <__mulsf3>
     ea6:	dc 01       	movw	r26, r24
     ea8:	cb 01       	movw	r24, r22
     eaa:	8f 83       	std	Y+7, r24	; 0x07
     eac:	98 87       	std	Y+8, r25	; 0x08
     eae:	a9 87       	std	Y+9, r26	; 0x09
     eb0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     eb2:	6f 81       	ldd	r22, Y+7	; 0x07
     eb4:	78 85       	ldd	r23, Y+8	; 0x08
     eb6:	89 85       	ldd	r24, Y+9	; 0x09
     eb8:	9a 85       	ldd	r25, Y+10	; 0x0a
     eba:	20 e0       	ldi	r18, 0x00	; 0
     ebc:	30 e0       	ldi	r19, 0x00	; 0
     ebe:	40 e8       	ldi	r20, 0x80	; 128
     ec0:	5f e3       	ldi	r21, 0x3F	; 63
     ec2:	0e 94 f4 1d 	call	0x3be8	; 0x3be8 <__ltsf2>
     ec6:	88 23       	and	r24, r24
     ec8:	2c f4       	brge	.+10     	; 0xed4 <lcd_wr_command+0x202>
		__ticks = 1;
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	9e 83       	std	Y+6, r25	; 0x06
     ed0:	8d 83       	std	Y+5, r24	; 0x05
     ed2:	3f c0       	rjmp	.+126    	; 0xf52 <lcd_wr_command+0x280>
	else if (__tmp > 65535)
     ed4:	6f 81       	ldd	r22, Y+7	; 0x07
     ed6:	78 85       	ldd	r23, Y+8	; 0x08
     ed8:	89 85       	ldd	r24, Y+9	; 0x09
     eda:	9a 85       	ldd	r25, Y+10	; 0x0a
     edc:	20 e0       	ldi	r18, 0x00	; 0
     ede:	3f ef       	ldi	r19, 0xFF	; 255
     ee0:	4f e7       	ldi	r20, 0x7F	; 127
     ee2:	57 e4       	ldi	r21, 0x47	; 71
     ee4:	0e 94 94 1d 	call	0x3b28	; 0x3b28 <__gtsf2>
     ee8:	18 16       	cp	r1, r24
     eea:	4c f5       	brge	.+82     	; 0xf3e <lcd_wr_command+0x26c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     eec:	6b 85       	ldd	r22, Y+11	; 0x0b
     eee:	7c 85       	ldd	r23, Y+12	; 0x0c
     ef0:	8d 85       	ldd	r24, Y+13	; 0x0d
     ef2:	9e 85       	ldd	r25, Y+14	; 0x0e
     ef4:	20 e0       	ldi	r18, 0x00	; 0
     ef6:	30 e0       	ldi	r19, 0x00	; 0
     ef8:	40 e2       	ldi	r20, 0x20	; 32
     efa:	51 e4       	ldi	r21, 0x41	; 65
     efc:	0e 94 ee 1b 	call	0x37dc	; 0x37dc <__mulsf3>
     f00:	dc 01       	movw	r26, r24
     f02:	cb 01       	movw	r24, r22
     f04:	bc 01       	movw	r22, r24
     f06:	cd 01       	movw	r24, r26
     f08:	0e 94 18 1a 	call	0x3430	; 0x3430 <__fixunssfsi>
     f0c:	dc 01       	movw	r26, r24
     f0e:	cb 01       	movw	r24, r22
     f10:	9e 83       	std	Y+6, r25	; 0x06
     f12:	8d 83       	std	Y+5, r24	; 0x05
     f14:	0f c0       	rjmp	.+30     	; 0xf34 <lcd_wr_command+0x262>
     f16:	84 e1       	ldi	r24, 0x14	; 20
     f18:	91 e0       	ldi	r25, 0x01	; 1
     f1a:	9c 83       	std	Y+4, r25	; 0x04
     f1c:	8b 83       	std	Y+3, r24	; 0x03
     f1e:	8b 81       	ldd	r24, Y+3	; 0x03
     f20:	9c 81       	ldd	r25, Y+4	; 0x04
     f22:	01 97       	sbiw	r24, 0x01	; 1
     f24:	f1 f7       	brne	.-4      	; 0xf22 <lcd_wr_command+0x250>
     f26:	9c 83       	std	Y+4, r25	; 0x04
     f28:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f2a:	8d 81       	ldd	r24, Y+5	; 0x05
     f2c:	9e 81       	ldd	r25, Y+6	; 0x06
     f2e:	01 97       	sbiw	r24, 0x01	; 1
     f30:	9e 83       	std	Y+6, r25	; 0x06
     f32:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f34:	8d 81       	ldd	r24, Y+5	; 0x05
     f36:	9e 81       	ldd	r25, Y+6	; 0x06
     f38:	00 97       	sbiw	r24, 0x00	; 0
     f3a:	69 f7       	brne	.-38     	; 0xf16 <lcd_wr_command+0x244>
     f3c:	14 c0       	rjmp	.+40     	; 0xf66 <lcd_wr_command+0x294>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f3e:	6f 81       	ldd	r22, Y+7	; 0x07
     f40:	78 85       	ldd	r23, Y+8	; 0x08
     f42:	89 85       	ldd	r24, Y+9	; 0x09
     f44:	9a 85       	ldd	r25, Y+10	; 0x0a
     f46:	0e 94 18 1a 	call	0x3430	; 0x3430 <__fixunssfsi>
     f4a:	dc 01       	movw	r26, r24
     f4c:	cb 01       	movw	r24, r22
     f4e:	9e 83       	std	Y+6, r25	; 0x06
     f50:	8d 83       	std	Y+5, r24	; 0x05
     f52:	8d 81       	ldd	r24, Y+5	; 0x05
     f54:	9e 81       	ldd	r25, Y+6	; 0x06
     f56:	9a 83       	std	Y+2, r25	; 0x02
     f58:	89 83       	std	Y+1, r24	; 0x01
     f5a:	89 81       	ldd	r24, Y+1	; 0x01
     f5c:	9a 81       	ldd	r25, Y+2	; 0x02
     f5e:	01 97       	sbiw	r24, 0x01	; 1
     f60:	f1 f7       	brne	.-4      	; 0xf5e <lcd_wr_command+0x28c>
     f62:	9a 83       	std	Y+2, r25	; 0x02
     f64:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	cbit(lcd_port,EN);
     f66:	a8 e2       	ldi	r26, 0x28	; 40
     f68:	b0 e0       	ldi	r27, 0x00	; 0
     f6a:	e8 e2       	ldi	r30, 0x28	; 40
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	80 81       	ld	r24, Z
     f70:	8b 7f       	andi	r24, 0xFB	; 251
     f72:	8c 93       	st	X, r24
}
     f74:	6e 96       	adiw	r28, 0x1e	; 30
     f76:	0f b6       	in	r0, 0x3f	; 63
     f78:	f8 94       	cli
     f7a:	de bf       	out	0x3e, r29	; 62
     f7c:	0f be       	out	0x3f, r0	; 63
     f7e:	cd bf       	out	0x3d, r28	; 61
     f80:	cf 91       	pop	r28
     f82:	df 91       	pop	r29
     f84:	08 95       	ret

00000f86 <lcd_wr_char>:

/*****Function to Write Data on LCD*****/
void lcd_wr_char(char letter)
{
     f86:	df 93       	push	r29
     f88:	cf 93       	push	r28
     f8a:	cd b7       	in	r28, 0x3d	; 61
     f8c:	de b7       	in	r29, 0x3e	; 62
     f8e:	6e 97       	sbiw	r28, 0x1e	; 30
     f90:	0f b6       	in	r0, 0x3f	; 63
     f92:	f8 94       	cli
     f94:	de bf       	out	0x3e, r29	; 62
     f96:	0f be       	out	0x3f, r0	; 63
     f98:	cd bf       	out	0x3d, r28	; 61
     f9a:	8e 8f       	std	Y+30, r24	; 0x1e
	char temp;
	temp = letter;
     f9c:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f9e:	8d 8f       	std	Y+29, r24	; 0x1d
	temp = (temp & 0xF0);
     fa0:	8d 8d       	ldd	r24, Y+29	; 0x1d
     fa2:	80 7f       	andi	r24, 0xF0	; 240
     fa4:	8d 8f       	std	Y+29, r24	; 0x1d
	lcd_port &= 0x0F;
     fa6:	a8 e2       	ldi	r26, 0x28	; 40
     fa8:	b0 e0       	ldi	r27, 0x00	; 0
     faa:	e8 e2       	ldi	r30, 0x28	; 40
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	80 81       	ld	r24, Z
     fb0:	8f 70       	andi	r24, 0x0F	; 15
     fb2:	8c 93       	st	X, r24
	lcd_port |= temp;
     fb4:	a8 e2       	ldi	r26, 0x28	; 40
     fb6:	b0 e0       	ldi	r27, 0x00	; 0
     fb8:	e8 e2       	ldi	r30, 0x28	; 40
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	90 81       	ld	r25, Z
     fbe:	8d 8d       	ldd	r24, Y+29	; 0x1d
     fc0:	89 2b       	or	r24, r25
     fc2:	8c 93       	st	X, r24
	sbit(lcd_port,RS);
     fc4:	a8 e2       	ldi	r26, 0x28	; 40
     fc6:	b0 e0       	ldi	r27, 0x00	; 0
     fc8:	e8 e2       	ldi	r30, 0x28	; 40
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	80 81       	ld	r24, Z
     fce:	81 60       	ori	r24, 0x01	; 1
     fd0:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
     fd2:	a8 e2       	ldi	r26, 0x28	; 40
     fd4:	b0 e0       	ldi	r27, 0x00	; 0
     fd6:	e8 e2       	ldi	r30, 0x28	; 40
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	80 81       	ld	r24, Z
     fdc:	8d 7f       	andi	r24, 0xFD	; 253
     fde:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
     fe0:	a8 e2       	ldi	r26, 0x28	; 40
     fe2:	b0 e0       	ldi	r27, 0x00	; 0
     fe4:	e8 e2       	ldi	r30, 0x28	; 40
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
     fe8:	80 81       	ld	r24, Z
     fea:	84 60       	ori	r24, 0x04	; 4
     fec:	8c 93       	st	X, r24
     fee:	80 e0       	ldi	r24, 0x00	; 0
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	a0 ea       	ldi	r26, 0xA0	; 160
     ff4:	b0 e4       	ldi	r27, 0x40	; 64
     ff6:	89 8f       	std	Y+25, r24	; 0x19
     ff8:	9a 8f       	std	Y+26, r25	; 0x1a
     ffa:	ab 8f       	std	Y+27, r26	; 0x1b
     ffc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ffe:	69 8d       	ldd	r22, Y+25	; 0x19
    1000:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1002:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1004:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1006:	2d ec       	ldi	r18, 0xCD	; 205
    1008:	3c ec       	ldi	r19, 0xCC	; 204
    100a:	4c e2       	ldi	r20, 0x2C	; 44
    100c:	55 e4       	ldi	r21, 0x45	; 69
    100e:	0e 94 ee 1b 	call	0x37dc	; 0x37dc <__mulsf3>
    1012:	dc 01       	movw	r26, r24
    1014:	cb 01       	movw	r24, r22
    1016:	8d 8b       	std	Y+21, r24	; 0x15
    1018:	9e 8b       	std	Y+22, r25	; 0x16
    101a:	af 8b       	std	Y+23, r26	; 0x17
    101c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    101e:	6d 89       	ldd	r22, Y+21	; 0x15
    1020:	7e 89       	ldd	r23, Y+22	; 0x16
    1022:	8f 89       	ldd	r24, Y+23	; 0x17
    1024:	98 8d       	ldd	r25, Y+24	; 0x18
    1026:	20 e0       	ldi	r18, 0x00	; 0
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	40 e8       	ldi	r20, 0x80	; 128
    102c:	5f e3       	ldi	r21, 0x3F	; 63
    102e:	0e 94 f4 1d 	call	0x3be8	; 0x3be8 <__ltsf2>
    1032:	88 23       	and	r24, r24
    1034:	2c f4       	brge	.+10     	; 0x1040 <lcd_wr_char+0xba>
		__ticks = 1;
    1036:	81 e0       	ldi	r24, 0x01	; 1
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	9c 8b       	std	Y+20, r25	; 0x14
    103c:	8b 8b       	std	Y+19, r24	; 0x13
    103e:	3f c0       	rjmp	.+126    	; 0x10be <lcd_wr_char+0x138>
	else if (__tmp > 65535)
    1040:	6d 89       	ldd	r22, Y+21	; 0x15
    1042:	7e 89       	ldd	r23, Y+22	; 0x16
    1044:	8f 89       	ldd	r24, Y+23	; 0x17
    1046:	98 8d       	ldd	r25, Y+24	; 0x18
    1048:	20 e0       	ldi	r18, 0x00	; 0
    104a:	3f ef       	ldi	r19, 0xFF	; 255
    104c:	4f e7       	ldi	r20, 0x7F	; 127
    104e:	57 e4       	ldi	r21, 0x47	; 71
    1050:	0e 94 94 1d 	call	0x3b28	; 0x3b28 <__gtsf2>
    1054:	18 16       	cp	r1, r24
    1056:	4c f5       	brge	.+82     	; 0x10aa <lcd_wr_char+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1058:	69 8d       	ldd	r22, Y+25	; 0x19
    105a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    105c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    105e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1060:	20 e0       	ldi	r18, 0x00	; 0
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	40 e2       	ldi	r20, 0x20	; 32
    1066:	51 e4       	ldi	r21, 0x41	; 65
    1068:	0e 94 ee 1b 	call	0x37dc	; 0x37dc <__mulsf3>
    106c:	dc 01       	movw	r26, r24
    106e:	cb 01       	movw	r24, r22
    1070:	bc 01       	movw	r22, r24
    1072:	cd 01       	movw	r24, r26
    1074:	0e 94 18 1a 	call	0x3430	; 0x3430 <__fixunssfsi>
    1078:	dc 01       	movw	r26, r24
    107a:	cb 01       	movw	r24, r22
    107c:	9c 8b       	std	Y+20, r25	; 0x14
    107e:	8b 8b       	std	Y+19, r24	; 0x13
    1080:	0f c0       	rjmp	.+30     	; 0x10a0 <lcd_wr_char+0x11a>
    1082:	84 e1       	ldi	r24, 0x14	; 20
    1084:	91 e0       	ldi	r25, 0x01	; 1
    1086:	9a 8b       	std	Y+18, r25	; 0x12
    1088:	89 8b       	std	Y+17, r24	; 0x11
    108a:	89 89       	ldd	r24, Y+17	; 0x11
    108c:	9a 89       	ldd	r25, Y+18	; 0x12
    108e:	01 97       	sbiw	r24, 0x01	; 1
    1090:	f1 f7       	brne	.-4      	; 0x108e <lcd_wr_char+0x108>
    1092:	9a 8b       	std	Y+18, r25	; 0x12
    1094:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1096:	8b 89       	ldd	r24, Y+19	; 0x13
    1098:	9c 89       	ldd	r25, Y+20	; 0x14
    109a:	01 97       	sbiw	r24, 0x01	; 1
    109c:	9c 8b       	std	Y+20, r25	; 0x14
    109e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10a0:	8b 89       	ldd	r24, Y+19	; 0x13
    10a2:	9c 89       	ldd	r25, Y+20	; 0x14
    10a4:	00 97       	sbiw	r24, 0x00	; 0
    10a6:	69 f7       	brne	.-38     	; 0x1082 <lcd_wr_char+0xfc>
    10a8:	14 c0       	rjmp	.+40     	; 0x10d2 <lcd_wr_char+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10aa:	6d 89       	ldd	r22, Y+21	; 0x15
    10ac:	7e 89       	ldd	r23, Y+22	; 0x16
    10ae:	8f 89       	ldd	r24, Y+23	; 0x17
    10b0:	98 8d       	ldd	r25, Y+24	; 0x18
    10b2:	0e 94 18 1a 	call	0x3430	; 0x3430 <__fixunssfsi>
    10b6:	dc 01       	movw	r26, r24
    10b8:	cb 01       	movw	r24, r22
    10ba:	9c 8b       	std	Y+20, r25	; 0x14
    10bc:	8b 8b       	std	Y+19, r24	; 0x13
    10be:	8b 89       	ldd	r24, Y+19	; 0x13
    10c0:	9c 89       	ldd	r25, Y+20	; 0x14
    10c2:	98 8b       	std	Y+16, r25	; 0x10
    10c4:	8f 87       	std	Y+15, r24	; 0x0f
    10c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    10c8:	98 89       	ldd	r25, Y+16	; 0x10
    10ca:	01 97       	sbiw	r24, 0x01	; 1
    10cc:	f1 f7       	brne	.-4      	; 0x10ca <lcd_wr_char+0x144>
    10ce:	98 8b       	std	Y+16, r25	; 0x10
    10d0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	cbit(lcd_port,EN);
    10d2:	a8 e2       	ldi	r26, 0x28	; 40
    10d4:	b0 e0       	ldi	r27, 0x00	; 0
    10d6:	e8 e2       	ldi	r30, 0x28	; 40
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	80 81       	ld	r24, Z
    10dc:	8b 7f       	andi	r24, 0xFB	; 251
    10de:	8c 93       	st	X, r24

	letter = letter & 0x0F;
    10e0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    10e2:	8f 70       	andi	r24, 0x0F	; 15
    10e4:	8e 8f       	std	Y+30, r24	; 0x1e
	letter = letter<<4;
    10e6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    10e8:	82 95       	swap	r24
    10ea:	80 7f       	andi	r24, 0xF0	; 240
    10ec:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
    10ee:	a8 e2       	ldi	r26, 0x28	; 40
    10f0:	b0 e0       	ldi	r27, 0x00	; 0
    10f2:	e8 e2       	ldi	r30, 0x28	; 40
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	80 81       	ld	r24, Z
    10f8:	8f 70       	andi	r24, 0x0F	; 15
    10fa:	8c 93       	st	X, r24
	lcd_port |= letter;
    10fc:	a8 e2       	ldi	r26, 0x28	; 40
    10fe:	b0 e0       	ldi	r27, 0x00	; 0
    1100:	e8 e2       	ldi	r30, 0x28	; 40
    1102:	f0 e0       	ldi	r31, 0x00	; 0
    1104:	90 81       	ld	r25, Z
    1106:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1108:	89 2b       	or	r24, r25
    110a:	8c 93       	st	X, r24
	sbit(lcd_port,RS);
    110c:	a8 e2       	ldi	r26, 0x28	; 40
    110e:	b0 e0       	ldi	r27, 0x00	; 0
    1110:	e8 e2       	ldi	r30, 0x28	; 40
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	80 81       	ld	r24, Z
    1116:	81 60       	ori	r24, 0x01	; 1
    1118:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
    111a:	a8 e2       	ldi	r26, 0x28	; 40
    111c:	b0 e0       	ldi	r27, 0x00	; 0
    111e:	e8 e2       	ldi	r30, 0x28	; 40
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	80 81       	ld	r24, Z
    1124:	8d 7f       	andi	r24, 0xFD	; 253
    1126:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
    1128:	a8 e2       	ldi	r26, 0x28	; 40
    112a:	b0 e0       	ldi	r27, 0x00	; 0
    112c:	e8 e2       	ldi	r30, 0x28	; 40
    112e:	f0 e0       	ldi	r31, 0x00	; 0
    1130:	80 81       	ld	r24, Z
    1132:	84 60       	ori	r24, 0x04	; 4
    1134:	8c 93       	st	X, r24
    1136:	80 e0       	ldi	r24, 0x00	; 0
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	a0 ea       	ldi	r26, 0xA0	; 160
    113c:	b0 e4       	ldi	r27, 0x40	; 64
    113e:	8b 87       	std	Y+11, r24	; 0x0b
    1140:	9c 87       	std	Y+12, r25	; 0x0c
    1142:	ad 87       	std	Y+13, r26	; 0x0d
    1144:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1146:	6b 85       	ldd	r22, Y+11	; 0x0b
    1148:	7c 85       	ldd	r23, Y+12	; 0x0c
    114a:	8d 85       	ldd	r24, Y+13	; 0x0d
    114c:	9e 85       	ldd	r25, Y+14	; 0x0e
    114e:	2d ec       	ldi	r18, 0xCD	; 205
    1150:	3c ec       	ldi	r19, 0xCC	; 204
    1152:	4c e2       	ldi	r20, 0x2C	; 44
    1154:	55 e4       	ldi	r21, 0x45	; 69
    1156:	0e 94 ee 1b 	call	0x37dc	; 0x37dc <__mulsf3>
    115a:	dc 01       	movw	r26, r24
    115c:	cb 01       	movw	r24, r22
    115e:	8f 83       	std	Y+7, r24	; 0x07
    1160:	98 87       	std	Y+8, r25	; 0x08
    1162:	a9 87       	std	Y+9, r26	; 0x09
    1164:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1166:	6f 81       	ldd	r22, Y+7	; 0x07
    1168:	78 85       	ldd	r23, Y+8	; 0x08
    116a:	89 85       	ldd	r24, Y+9	; 0x09
    116c:	9a 85       	ldd	r25, Y+10	; 0x0a
    116e:	20 e0       	ldi	r18, 0x00	; 0
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	40 e8       	ldi	r20, 0x80	; 128
    1174:	5f e3       	ldi	r21, 0x3F	; 63
    1176:	0e 94 f4 1d 	call	0x3be8	; 0x3be8 <__ltsf2>
    117a:	88 23       	and	r24, r24
    117c:	2c f4       	brge	.+10     	; 0x1188 <lcd_wr_char+0x202>
		__ticks = 1;
    117e:	81 e0       	ldi	r24, 0x01	; 1
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	9e 83       	std	Y+6, r25	; 0x06
    1184:	8d 83       	std	Y+5, r24	; 0x05
    1186:	3f c0       	rjmp	.+126    	; 0x1206 <lcd_wr_char+0x280>
	else if (__tmp > 65535)
    1188:	6f 81       	ldd	r22, Y+7	; 0x07
    118a:	78 85       	ldd	r23, Y+8	; 0x08
    118c:	89 85       	ldd	r24, Y+9	; 0x09
    118e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1190:	20 e0       	ldi	r18, 0x00	; 0
    1192:	3f ef       	ldi	r19, 0xFF	; 255
    1194:	4f e7       	ldi	r20, 0x7F	; 127
    1196:	57 e4       	ldi	r21, 0x47	; 71
    1198:	0e 94 94 1d 	call	0x3b28	; 0x3b28 <__gtsf2>
    119c:	18 16       	cp	r1, r24
    119e:	4c f5       	brge	.+82     	; 0x11f2 <lcd_wr_char+0x26c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    11a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    11a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    11a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    11a8:	20 e0       	ldi	r18, 0x00	; 0
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	40 e2       	ldi	r20, 0x20	; 32
    11ae:	51 e4       	ldi	r21, 0x41	; 65
    11b0:	0e 94 ee 1b 	call	0x37dc	; 0x37dc <__mulsf3>
    11b4:	dc 01       	movw	r26, r24
    11b6:	cb 01       	movw	r24, r22
    11b8:	bc 01       	movw	r22, r24
    11ba:	cd 01       	movw	r24, r26
    11bc:	0e 94 18 1a 	call	0x3430	; 0x3430 <__fixunssfsi>
    11c0:	dc 01       	movw	r26, r24
    11c2:	cb 01       	movw	r24, r22
    11c4:	9e 83       	std	Y+6, r25	; 0x06
    11c6:	8d 83       	std	Y+5, r24	; 0x05
    11c8:	0f c0       	rjmp	.+30     	; 0x11e8 <lcd_wr_char+0x262>
    11ca:	84 e1       	ldi	r24, 0x14	; 20
    11cc:	91 e0       	ldi	r25, 0x01	; 1
    11ce:	9c 83       	std	Y+4, r25	; 0x04
    11d0:	8b 83       	std	Y+3, r24	; 0x03
    11d2:	8b 81       	ldd	r24, Y+3	; 0x03
    11d4:	9c 81       	ldd	r25, Y+4	; 0x04
    11d6:	01 97       	sbiw	r24, 0x01	; 1
    11d8:	f1 f7       	brne	.-4      	; 0x11d6 <lcd_wr_char+0x250>
    11da:	9c 83       	std	Y+4, r25	; 0x04
    11dc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11de:	8d 81       	ldd	r24, Y+5	; 0x05
    11e0:	9e 81       	ldd	r25, Y+6	; 0x06
    11e2:	01 97       	sbiw	r24, 0x01	; 1
    11e4:	9e 83       	std	Y+6, r25	; 0x06
    11e6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11e8:	8d 81       	ldd	r24, Y+5	; 0x05
    11ea:	9e 81       	ldd	r25, Y+6	; 0x06
    11ec:	00 97       	sbiw	r24, 0x00	; 0
    11ee:	69 f7       	brne	.-38     	; 0x11ca <lcd_wr_char+0x244>
    11f0:	14 c0       	rjmp	.+40     	; 0x121a <lcd_wr_char+0x294>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11f2:	6f 81       	ldd	r22, Y+7	; 0x07
    11f4:	78 85       	ldd	r23, Y+8	; 0x08
    11f6:	89 85       	ldd	r24, Y+9	; 0x09
    11f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    11fa:	0e 94 18 1a 	call	0x3430	; 0x3430 <__fixunssfsi>
    11fe:	dc 01       	movw	r26, r24
    1200:	cb 01       	movw	r24, r22
    1202:	9e 83       	std	Y+6, r25	; 0x06
    1204:	8d 83       	std	Y+5, r24	; 0x05
    1206:	8d 81       	ldd	r24, Y+5	; 0x05
    1208:	9e 81       	ldd	r25, Y+6	; 0x06
    120a:	9a 83       	std	Y+2, r25	; 0x02
    120c:	89 83       	std	Y+1, r24	; 0x01
    120e:	89 81       	ldd	r24, Y+1	; 0x01
    1210:	9a 81       	ldd	r25, Y+2	; 0x02
    1212:	01 97       	sbiw	r24, 0x01	; 1
    1214:	f1 f7       	brne	.-4      	; 0x1212 <lcd_wr_char+0x28c>
    1216:	9a 83       	std	Y+2, r25	; 0x02
    1218:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	cbit(lcd_port,EN);
    121a:	a8 e2       	ldi	r26, 0x28	; 40
    121c:	b0 e0       	ldi	r27, 0x00	; 0
    121e:	e8 e2       	ldi	r30, 0x28	; 40
    1220:	f0 e0       	ldi	r31, 0x00	; 0
    1222:	80 81       	ld	r24, Z
    1224:	8b 7f       	andi	r24, 0xFB	; 251
    1226:	8c 93       	st	X, r24
}
    1228:	6e 96       	adiw	r28, 0x1e	; 30
    122a:	0f b6       	in	r0, 0x3f	; 63
    122c:	f8 94       	cli
    122e:	de bf       	out	0x3e, r29	; 62
    1230:	0f be       	out	0x3f, r0	; 63
    1232:	cd bf       	out	0x3d, r28	; 61
    1234:	cf 91       	pop	r28
    1236:	df 91       	pop	r29
    1238:	08 95       	ret

0000123a <lcd_home>:


void lcd_home()
{
    123a:	df 93       	push	r29
    123c:	cf 93       	push	r28
    123e:	cd b7       	in	r28, 0x3d	; 61
    1240:	de b7       	in	r29, 0x3e	; 62
	lcd_wr_command(0x80);
    1242:	80 e8       	ldi	r24, 0x80	; 128
    1244:	0e 94 69 06 	call	0xcd2	; 0xcd2 <lcd_wr_command>
}
    1248:	cf 91       	pop	r28
    124a:	df 91       	pop	r29
    124c:	08 95       	ret

0000124e <lcd_string>:


/*****Function to Print String on LCD*****/
void lcd_string(char *str)
{
    124e:	df 93       	push	r29
    1250:	cf 93       	push	r28
    1252:	0f 92       	push	r0
    1254:	0f 92       	push	r0
    1256:	cd b7       	in	r28, 0x3d	; 61
    1258:	de b7       	in	r29, 0x3e	; 62
    125a:	9a 83       	std	Y+2, r25	; 0x02
    125c:	89 83       	std	Y+1, r24	; 0x01
    125e:	0a c0       	rjmp	.+20     	; 0x1274 <lcd_string+0x26>
	while(*str != '\0')
	{
		lcd_wr_char(*str);
    1260:	e9 81       	ldd	r30, Y+1	; 0x01
    1262:	fa 81       	ldd	r31, Y+2	; 0x02
    1264:	80 81       	ld	r24, Z
    1266:	0e 94 c3 07 	call	0xf86	; 0xf86 <lcd_wr_char>
		str++;
    126a:	89 81       	ldd	r24, Y+1	; 0x01
    126c:	9a 81       	ldd	r25, Y+2	; 0x02
    126e:	01 96       	adiw	r24, 0x01	; 1
    1270:	9a 83       	std	Y+2, r25	; 0x02
    1272:	89 83       	std	Y+1, r24	; 0x01


/*****Function to Print String on LCD*****/
void lcd_string(char *str)
{
	while(*str != '\0')
    1274:	e9 81       	ldd	r30, Y+1	; 0x01
    1276:	fa 81       	ldd	r31, Y+2	; 0x02
    1278:	80 81       	ld	r24, Z
    127a:	88 23       	and	r24, r24
    127c:	89 f7       	brne	.-30     	; 0x1260 <lcd_string+0x12>
	{
		lcd_wr_char(*str);
		str++;
	}
}
    127e:	0f 90       	pop	r0
    1280:	0f 90       	pop	r0
    1282:	cf 91       	pop	r28
    1284:	df 91       	pop	r29
    1286:	08 95       	ret

00001288 <lcd_cursor>:

/*** Position the LCD cursor at "row", "column". ***/

void lcd_cursor (char row, char column)
{
    1288:	df 93       	push	r29
    128a:	cf 93       	push	r28
    128c:	00 d0       	rcall	.+0      	; 0x128e <lcd_cursor+0x6>
    128e:	0f 92       	push	r0
    1290:	cd b7       	in	r28, 0x3d	; 61
    1292:	de b7       	in	r29, 0x3e	; 62
    1294:	89 83       	std	Y+1, r24	; 0x01
    1296:	6a 83       	std	Y+2, r22	; 0x02
	switch (row) {
    1298:	89 81       	ldd	r24, Y+1	; 0x01
    129a:	28 2f       	mov	r18, r24
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	3c 83       	std	Y+4, r19	; 0x04
    12a0:	2b 83       	std	Y+3, r18	; 0x03
    12a2:	8b 81       	ldd	r24, Y+3	; 0x03
    12a4:	9c 81       	ldd	r25, Y+4	; 0x04
    12a6:	82 30       	cpi	r24, 0x02	; 2
    12a8:	91 05       	cpc	r25, r1
    12aa:	d9 f0       	breq	.+54     	; 0x12e2 <lcd_cursor+0x5a>
    12ac:	2b 81       	ldd	r18, Y+3	; 0x03
    12ae:	3c 81       	ldd	r19, Y+4	; 0x04
    12b0:	23 30       	cpi	r18, 0x03	; 3
    12b2:	31 05       	cpc	r19, r1
    12b4:	34 f4       	brge	.+12     	; 0x12c2 <lcd_cursor+0x3a>
    12b6:	8b 81       	ldd	r24, Y+3	; 0x03
    12b8:	9c 81       	ldd	r25, Y+4	; 0x04
    12ba:	81 30       	cpi	r24, 0x01	; 1
    12bc:	91 05       	cpc	r25, r1
    12be:	61 f0       	breq	.+24     	; 0x12d8 <lcd_cursor+0x50>
    12c0:	1e c0       	rjmp	.+60     	; 0x12fe <lcd_cursor+0x76>
    12c2:	2b 81       	ldd	r18, Y+3	; 0x03
    12c4:	3c 81       	ldd	r19, Y+4	; 0x04
    12c6:	23 30       	cpi	r18, 0x03	; 3
    12c8:	31 05       	cpc	r19, r1
    12ca:	81 f0       	breq	.+32     	; 0x12ec <lcd_cursor+0x64>
    12cc:	8b 81       	ldd	r24, Y+3	; 0x03
    12ce:	9c 81       	ldd	r25, Y+4	; 0x04
    12d0:	84 30       	cpi	r24, 0x04	; 4
    12d2:	91 05       	cpc	r25, r1
    12d4:	81 f0       	breq	.+32     	; 0x12f6 <lcd_cursor+0x6e>
    12d6:	13 c0       	rjmp	.+38     	; 0x12fe <lcd_cursor+0x76>
		case 1: lcd_wr_command (0x80 + column - 1); break;
    12d8:	8a 81       	ldd	r24, Y+2	; 0x02
    12da:	81 58       	subi	r24, 0x81	; 129
    12dc:	0e 94 69 06 	call	0xcd2	; 0xcd2 <lcd_wr_command>
    12e0:	0e c0       	rjmp	.+28     	; 0x12fe <lcd_cursor+0x76>
		case 2: lcd_wr_command (0xc0 + column - 1); break;
    12e2:	8a 81       	ldd	r24, Y+2	; 0x02
    12e4:	81 54       	subi	r24, 0x41	; 65
    12e6:	0e 94 69 06 	call	0xcd2	; 0xcd2 <lcd_wr_command>
    12ea:	09 c0       	rjmp	.+18     	; 0x12fe <lcd_cursor+0x76>
		case 3: lcd_wr_command (0x94 + column - 1); break;
    12ec:	8a 81       	ldd	r24, Y+2	; 0x02
    12ee:	8d 56       	subi	r24, 0x6D	; 109
    12f0:	0e 94 69 06 	call	0xcd2	; 0xcd2 <lcd_wr_command>
    12f4:	04 c0       	rjmp	.+8      	; 0x12fe <lcd_cursor+0x76>
		case 4: lcd_wr_command (0xd4 + column - 1); break;
    12f6:	8a 81       	ldd	r24, Y+2	; 0x02
    12f8:	8d 52       	subi	r24, 0x2D	; 45
    12fa:	0e 94 69 06 	call	0xcd2	; 0xcd2 <lcd_wr_command>
		default: break;
	}
}
    12fe:	0f 90       	pop	r0
    1300:	0f 90       	pop	r0
    1302:	0f 90       	pop	r0
    1304:	0f 90       	pop	r0
    1306:	cf 91       	pop	r28
    1308:	df 91       	pop	r29
    130a:	08 95       	ret

0000130c <lcd_print>:

/***** Function To Print Any input value upto the desired digit on LCD *****/
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
    130c:	df 93       	push	r29
    130e:	cf 93       	push	r28
    1310:	cd b7       	in	r28, 0x3d	; 61
    1312:	de b7       	in	r29, 0x3e	; 62
    1314:	27 97       	sbiw	r28, 0x07	; 7
    1316:	0f b6       	in	r0, 0x3f	; 63
    1318:	f8 94       	cli
    131a:	de bf       	out	0x3e, r29	; 62
    131c:	0f be       	out	0x3f, r0	; 63
    131e:	cd bf       	out	0x3d, r28	; 61
    1320:	8a 83       	std	Y+2, r24	; 0x02
    1322:	6b 83       	std	Y+3, r22	; 0x03
    1324:	5d 83       	std	Y+5, r21	; 0x05
    1326:	4c 83       	std	Y+4, r20	; 0x04
    1328:	3f 83       	std	Y+7, r19	; 0x07
    132a:	2e 83       	std	Y+6, r18	; 0x06
	unsigned char flag=0;
    132c:	19 82       	std	Y+1, r1	; 0x01
	if(row==0||coloumn==0)
    132e:	8a 81       	ldd	r24, Y+2	; 0x02
    1330:	88 23       	and	r24, r24
    1332:	19 f0       	breq	.+6      	; 0x133a <lcd_print+0x2e>
    1334:	8b 81       	ldd	r24, Y+3	; 0x03
    1336:	88 23       	and	r24, r24
    1338:	19 f4       	brne	.+6      	; 0x1340 <lcd_print+0x34>
	{
		lcd_home();
    133a:	0e 94 1d 09 	call	0x123a	; 0x123a <lcd_home>
    133e:	04 c0       	rjmp	.+8      	; 0x1348 <lcd_print+0x3c>
	}
	else
	{
		lcd_cursor(row,coloumn);
    1340:	8a 81       	ldd	r24, Y+2	; 0x02
    1342:	6b 81       	ldd	r22, Y+3	; 0x03
    1344:	0e 94 44 09 	call	0x1288	; 0x1288 <lcd_cursor>
	}
	if(digits==5 || flag==1)
    1348:	8e 81       	ldd	r24, Y+6	; 0x06
    134a:	9f 81       	ldd	r25, Y+7	; 0x07
    134c:	85 30       	cpi	r24, 0x05	; 5
    134e:	91 05       	cpc	r25, r1
    1350:	19 f0       	breq	.+6      	; 0x1358 <lcd_print+0x4c>
    1352:	89 81       	ldd	r24, Y+1	; 0x01
    1354:	81 30       	cpi	r24, 0x01	; 1
    1356:	a9 f4       	brne	.+42     	; 0x1382 <lcd_print+0x76>
	{
		million=value/10000+48;
    1358:	8c 81       	ldd	r24, Y+4	; 0x04
    135a:	9d 81       	ldd	r25, Y+5	; 0x05
    135c:	20 e1       	ldi	r18, 0x10	; 16
    135e:	37 e2       	ldi	r19, 0x27	; 39
    1360:	b9 01       	movw	r22, r18
    1362:	0e 94 44 21 	call	0x4288	; 0x4288 <__udivmodhi4>
    1366:	cb 01       	movw	r24, r22
    1368:	c0 96       	adiw	r24, 0x30	; 48
    136a:	90 93 09 03 	sts	0x0309, r25
    136e:	80 93 08 03 	sts	0x0308, r24
		lcd_wr_char(million);
    1372:	80 91 08 03 	lds	r24, 0x0308
    1376:	90 91 09 03 	lds	r25, 0x0309
    137a:	0e 94 c3 07 	call	0xf86	; 0xf86 <lcd_wr_char>
		flag=1;
    137e:	81 e0       	ldi	r24, 0x01	; 1
    1380:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==4 || flag==1)
    1382:	8e 81       	ldd	r24, Y+6	; 0x06
    1384:	9f 81       	ldd	r25, Y+7	; 0x07
    1386:	84 30       	cpi	r24, 0x04	; 4
    1388:	91 05       	cpc	r25, r1
    138a:	19 f0       	breq	.+6      	; 0x1392 <lcd_print+0x86>
    138c:	89 81       	ldd	r24, Y+1	; 0x01
    138e:	81 30       	cpi	r24, 0x01	; 1
    1390:	11 f5       	brne	.+68     	; 0x13d6 <lcd_print+0xca>
	{
		temp = value/1000;
    1392:	8c 81       	ldd	r24, Y+4	; 0x04
    1394:	9d 81       	ldd	r25, Y+5	; 0x05
    1396:	28 ee       	ldi	r18, 0xE8	; 232
    1398:	33 e0       	ldi	r19, 0x03	; 3
    139a:	b9 01       	movw	r22, r18
    139c:	0e 94 44 21 	call	0x4288	; 0x4288 <__udivmodhi4>
    13a0:	cb 01       	movw	r24, r22
    13a2:	90 93 12 03 	sts	0x0312, r25
    13a6:	80 93 11 03 	sts	0x0311, r24
		thousand = temp%10 + 48;
    13aa:	80 91 11 03 	lds	r24, 0x0311
    13ae:	90 91 12 03 	lds	r25, 0x0312
    13b2:	2a e0       	ldi	r18, 0x0A	; 10
    13b4:	30 e0       	ldi	r19, 0x00	; 0
    13b6:	b9 01       	movw	r22, r18
    13b8:	0e 94 44 21 	call	0x4288	; 0x4288 <__udivmodhi4>
    13bc:	c0 96       	adiw	r24, 0x30	; 48
    13be:	90 93 27 03 	sts	0x0327, r25
    13c2:	80 93 26 03 	sts	0x0326, r24
		lcd_wr_char(thousand);
    13c6:	80 91 26 03 	lds	r24, 0x0326
    13ca:	90 91 27 03 	lds	r25, 0x0327
    13ce:	0e 94 c3 07 	call	0xf86	; 0xf86 <lcd_wr_char>
		flag=1;
    13d2:	81 e0       	ldi	r24, 0x01	; 1
    13d4:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==3 || flag==1)
    13d6:	8e 81       	ldd	r24, Y+6	; 0x06
    13d8:	9f 81       	ldd	r25, Y+7	; 0x07
    13da:	83 30       	cpi	r24, 0x03	; 3
    13dc:	91 05       	cpc	r25, r1
    13de:	19 f0       	breq	.+6      	; 0x13e6 <lcd_print+0xda>
    13e0:	89 81       	ldd	r24, Y+1	; 0x01
    13e2:	81 30       	cpi	r24, 0x01	; 1
    13e4:	11 f5       	brne	.+68     	; 0x142a <lcd_print+0x11e>
	{
		temp = value/100;
    13e6:	8c 81       	ldd	r24, Y+4	; 0x04
    13e8:	9d 81       	ldd	r25, Y+5	; 0x05
    13ea:	24 e6       	ldi	r18, 0x64	; 100
    13ec:	30 e0       	ldi	r19, 0x00	; 0
    13ee:	b9 01       	movw	r22, r18
    13f0:	0e 94 44 21 	call	0x4288	; 0x4288 <__udivmodhi4>
    13f4:	cb 01       	movw	r24, r22
    13f6:	90 93 12 03 	sts	0x0312, r25
    13fa:	80 93 11 03 	sts	0x0311, r24
		hundred = temp%10 + 48;
    13fe:	80 91 11 03 	lds	r24, 0x0311
    1402:	90 91 12 03 	lds	r25, 0x0312
    1406:	2a e0       	ldi	r18, 0x0A	; 10
    1408:	30 e0       	ldi	r19, 0x00	; 0
    140a:	b9 01       	movw	r22, r18
    140c:	0e 94 44 21 	call	0x4288	; 0x4288 <__udivmodhi4>
    1410:	c0 96       	adiw	r24, 0x30	; 48
    1412:	90 93 20 03 	sts	0x0320, r25
    1416:	80 93 1f 03 	sts	0x031F, r24
		lcd_wr_char(hundred);
    141a:	80 91 1f 03 	lds	r24, 0x031F
    141e:	90 91 20 03 	lds	r25, 0x0320
    1422:	0e 94 c3 07 	call	0xf86	; 0xf86 <lcd_wr_char>
		flag=1;
    1426:	81 e0       	ldi	r24, 0x01	; 1
    1428:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==2 || flag==1)
    142a:	8e 81       	ldd	r24, Y+6	; 0x06
    142c:	9f 81       	ldd	r25, Y+7	; 0x07
    142e:	82 30       	cpi	r24, 0x02	; 2
    1430:	91 05       	cpc	r25, r1
    1432:	19 f0       	breq	.+6      	; 0x143a <lcd_print+0x12e>
    1434:	89 81       	ldd	r24, Y+1	; 0x01
    1436:	81 30       	cpi	r24, 0x01	; 1
    1438:	11 f5       	brne	.+68     	; 0x147e <lcd_print+0x172>
	{
		temp = value/10;
    143a:	8c 81       	ldd	r24, Y+4	; 0x04
    143c:	9d 81       	ldd	r25, Y+5	; 0x05
    143e:	2a e0       	ldi	r18, 0x0A	; 10
    1440:	30 e0       	ldi	r19, 0x00	; 0
    1442:	b9 01       	movw	r22, r18
    1444:	0e 94 44 21 	call	0x4288	; 0x4288 <__udivmodhi4>
    1448:	cb 01       	movw	r24, r22
    144a:	90 93 12 03 	sts	0x0312, r25
    144e:	80 93 11 03 	sts	0x0311, r24
		tens = temp%10 + 48;
    1452:	80 91 11 03 	lds	r24, 0x0311
    1456:	90 91 12 03 	lds	r25, 0x0312
    145a:	2a e0       	ldi	r18, 0x0A	; 10
    145c:	30 e0       	ldi	r19, 0x00	; 0
    145e:	b9 01       	movw	r22, r18
    1460:	0e 94 44 21 	call	0x4288	; 0x4288 <__udivmodhi4>
    1464:	c0 96       	adiw	r24, 0x30	; 48
    1466:	90 93 1d 03 	sts	0x031D, r25
    146a:	80 93 1c 03 	sts	0x031C, r24
		lcd_wr_char(tens);
    146e:	80 91 1c 03 	lds	r24, 0x031C
    1472:	90 91 1d 03 	lds	r25, 0x031D
    1476:	0e 94 c3 07 	call	0xf86	; 0xf86 <lcd_wr_char>
		flag=1;
    147a:	81 e0       	ldi	r24, 0x01	; 1
    147c:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==1 || flag==1)
    147e:	8e 81       	ldd	r24, Y+6	; 0x06
    1480:	9f 81       	ldd	r25, Y+7	; 0x07
    1482:	81 30       	cpi	r24, 0x01	; 1
    1484:	91 05       	cpc	r25, r1
    1486:	19 f0       	breq	.+6      	; 0x148e <lcd_print+0x182>
    1488:	89 81       	ldd	r24, Y+1	; 0x01
    148a:	81 30       	cpi	r24, 0x01	; 1
    148c:	91 f4       	brne	.+36     	; 0x14b2 <lcd_print+0x1a6>
	{
		unit = value%10 + 48;
    148e:	8c 81       	ldd	r24, Y+4	; 0x04
    1490:	9d 81       	ldd	r25, Y+5	; 0x05
    1492:	2a e0       	ldi	r18, 0x0A	; 10
    1494:	30 e0       	ldi	r19, 0x00	; 0
    1496:	b9 01       	movw	r22, r18
    1498:	0e 94 44 21 	call	0x4288	; 0x4288 <__udivmodhi4>
    149c:	c0 96       	adiw	r24, 0x30	; 48
    149e:	90 93 25 03 	sts	0x0325, r25
    14a2:	80 93 24 03 	sts	0x0324, r24
		lcd_wr_char(unit);
    14a6:	80 91 24 03 	lds	r24, 0x0324
    14aa:	90 91 25 03 	lds	r25, 0x0325
    14ae:	0e 94 c3 07 	call	0xf86	; 0xf86 <lcd_wr_char>
	}
	if(digits>5)
    14b2:	8e 81       	ldd	r24, Y+6	; 0x06
    14b4:	9f 81       	ldd	r25, Y+7	; 0x07
    14b6:	86 30       	cpi	r24, 0x06	; 6
    14b8:	91 05       	cpc	r25, r1
    14ba:	1c f0       	brlt	.+6      	; 0x14c2 <lcd_print+0x1b6>
	{
		lcd_wr_char('E');
    14bc:	85 e4       	ldi	r24, 0x45	; 69
    14be:	0e 94 c3 07 	call	0xf86	; 0xf86 <lcd_wr_char>
	}
	
}
    14c2:	27 96       	adiw	r28, 0x07	; 7
    14c4:	0f b6       	in	r0, 0x3f	; 63
    14c6:	f8 94       	cli
    14c8:	de bf       	out	0x3e, r29	; 62
    14ca:	0f be       	out	0x3f, r0	; 63
    14cc:	cd bf       	out	0x3d, r28	; 61
    14ce:	cf 91       	pop	r28
    14d0:	df 91       	pop	r29
    14d2:	08 95       	ret

000014d4 <INIT_PORTS>:
//unsigned char data;

int scr,scl;

void INIT_PORTS()
{
    14d4:	df 93       	push	r29
    14d6:	cf 93       	push	r28
    14d8:	cd b7       	in	r28, 0x3d	; 61
    14da:	de b7       	in	r29, 0x3e	; 62
	DDRA=0x0F;
    14dc:	e1 e2       	ldi	r30, 0x21	; 33
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	8f e0       	ldi	r24, 0x0F	; 15
    14e2:	80 83       	st	Z, r24
	PORTA=0x00;				//INITIALIZE
    14e4:	e2 e2       	ldi	r30, 0x22	; 34
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	10 82       	st	Z, r1
	DDRE=0xCF;
    14ea:	ed e2       	ldi	r30, 0x2D	; 45
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	8f ec       	ldi	r24, 0xCF	; 207
    14f0:	80 83       	st	Z, r24
	PORTE=0xFF;	
    14f2:	ee e2       	ldi	r30, 0x2E	; 46
    14f4:	f0 e0       	ldi	r31, 0x00	; 0
    14f6:	8f ef       	ldi	r24, 0xFF	; 255
    14f8:	80 83       	st	Z, r24
	DDRL=0x18;
    14fa:	ea e0       	ldi	r30, 0x0A	; 10
    14fc:	f1 e0       	ldi	r31, 0x01	; 1
    14fe:	88 e1       	ldi	r24, 0x18	; 24
    1500:	80 83       	st	Z, r24
	PORTL=0x18;
    1502:	eb e0       	ldi	r30, 0x0B	; 11
    1504:	f1 e0       	ldi	r31, 0x01	; 1
    1506:	88 e1       	ldi	r24, 0x18	; 24
    1508:	80 83       	st	Z, r24
	DDRC=0x00; 				// buzzer off
    150a:	e7 e2       	ldi	r30, 0x27	; 39
    150c:	f0 e0       	ldi	r31, 0x00	; 0
    150e:	10 82       	st	Z, r1
	PORTC =0x00;
    1510:	e8 e2       	ldi	r30, 0x28	; 40
    1512:	f0 e0       	ldi	r31, 0x00	; 0
    1514:	10 82       	st	Z, r1
	TCCR5B =0x00;
    1516:	e1 e2       	ldi	r30, 0x21	; 33
    1518:	f1 e0       	ldi	r31, 0x01	; 1
    151a:	10 82       	st	Z, r1
	TCCR5A = 0xA1;
    151c:	e0 e2       	ldi	r30, 0x20	; 32
    151e:	f1 e0       	ldi	r31, 0x01	; 1
    1520:	81 ea       	ldi	r24, 0xA1	; 161
    1522:	80 83       	st	Z, r24
	TCCR5B=0x0B;
    1524:	e1 e2       	ldi	r30, 0x21	; 33
    1526:	f1 e0       	ldi	r31, 0x01	; 1
    1528:	8b e0       	ldi	r24, 0x0B	; 11
    152a:	80 83       	st	Z, r24

}
    152c:	cf 91       	pop	r28
    152e:	df 91       	pop	r29
    1530:	08 95       	ret

00001532 <INIT_PORTS_ROTATE>:


void INIT_PORTS_ROTATE()
{
    1532:	df 93       	push	r29
    1534:	cf 93       	push	r28
    1536:	cd b7       	in	r28, 0x3d	; 61
    1538:	de b7       	in	r29, 0x3e	; 62
	DDRA=0x0F;
    153a:	e1 e2       	ldi	r30, 0x21	; 33
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	8f e0       	ldi	r24, 0x0F	; 15
    1540:	80 83       	st	Z, r24
	PORTA=0x00;				//INITIALIZE
    1542:	e2 e2       	ldi	r30, 0x22	; 34
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	10 82       	st	Z, r1
	DDRE=0xCF;
    1548:	ed e2       	ldi	r30, 0x2D	; 45
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	8f ec       	ldi	r24, 0xCF	; 207
    154e:	80 83       	st	Z, r24
	PORTE=0xFF;	
    1550:	ee e2       	ldi	r30, 0x2E	; 46
    1552:	f0 e0       	ldi	r31, 0x00	; 0
    1554:	8f ef       	ldi	r24, 0xFF	; 255
    1556:	80 83       	st	Z, r24
	DDRL=0x18;
    1558:	ea e0       	ldi	r30, 0x0A	; 10
    155a:	f1 e0       	ldi	r31, 0x01	; 1
    155c:	88 e1       	ldi	r24, 0x18	; 24
    155e:	80 83       	st	Z, r24
	PORTL=0x18;
    1560:	eb e0       	ldi	r30, 0x0B	; 11
    1562:	f1 e0       	ldi	r31, 0x01	; 1
    1564:	88 e1       	ldi	r24, 0x18	; 24
    1566:	80 83       	st	Z, r24

}
    1568:	cf 91       	pop	r28
    156a:	df 91       	pop	r29
    156c:	08 95       	ret

0000156e <uart0_init>:
// actual baud rate:9600 (0.0%)
// char size: 8 bit
// parity: Disabled

void uart0_init(void)
{
    156e:	df 93       	push	r29
    1570:	cf 93       	push	r28
    1572:	cd b7       	in	r28, 0x3d	; 61
    1574:	de b7       	in	r29, 0x3e	; 62
 	UCSR0B = 0x00; 			//disable while setting baud rate
    1576:	e1 ec       	ldi	r30, 0xC1	; 193
    1578:	f0 e0       	ldi	r31, 0x00	; 0
    157a:	10 82       	st	Z, r1
 	UCSR0A = 0x00;
    157c:	e0 ec       	ldi	r30, 0xC0	; 192
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	10 82       	st	Z, r1
 	UCSR0C = 0x06;
    1582:	e2 ec       	ldi	r30, 0xC2	; 194
    1584:	f0 e0       	ldi	r31, 0x00	; 0
    1586:	86 e0       	ldi	r24, 0x06	; 6
    1588:	80 83       	st	Z, r24
 	UBRR0L = 0x47; 			//set baud rate lo
    158a:	e4 ec       	ldi	r30, 0xC4	; 196
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	87 e4       	ldi	r24, 0x47	; 71
    1590:	80 83       	st	Z, r24
 	UBRR0H = 0x00; 			//set baud rate hi
    1592:	e5 ec       	ldi	r30, 0xC5	; 197
    1594:	f0 e0       	ldi	r31, 0x00	; 0
    1596:	10 82       	st	Z, r1
 	UCSR0B = 0x98;
    1598:	e1 ec       	ldi	r30, 0xC1	; 193
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	88 e9       	ldi	r24, 0x98	; 152
    159e:	80 83       	st	Z, r24
}
    15a0:	cf 91       	pop	r28
    15a2:	df 91       	pop	r29
    15a4:	08 95       	ret

000015a6 <__vector_25>:


SIGNAL(SIG_USART0_RECV)
{
    15a6:	1f 92       	push	r1
    15a8:	0f 92       	push	r0
    15aa:	0f b6       	in	r0, 0x3f	; 63
    15ac:	0f 92       	push	r0
    15ae:	00 90 5b 00 	lds	r0, 0x005B
    15b2:	0f 92       	push	r0
    15b4:	11 24       	eor	r1, r1
    15b6:	8f 93       	push	r24
    15b8:	ef 93       	push	r30
    15ba:	ff 93       	push	r31
    15bc:	df 93       	push	r29
    15be:	cf 93       	push	r28
    15c0:	cd b7       	in	r28, 0x3d	; 61
    15c2:	de b7       	in	r29, 0x3e	; 62

	data = UDR0; 			//making copy of data from UDR0 in data variable
    15c4:	e6 ec       	ldi	r30, 0xC6	; 198
    15c6:	f0 e0       	ldi	r31, 0x00	; 0
    15c8:	80 81       	ld	r24, Z
    15ca:	80 93 1e 03 	sts	0x031E, r24
	
}
    15ce:	cf 91       	pop	r28
    15d0:	df 91       	pop	r29
    15d2:	ff 91       	pop	r31
    15d4:	ef 91       	pop	r30
    15d6:	8f 91       	pop	r24
    15d8:	0f 90       	pop	r0
    15da:	00 92 5b 00 	sts	0x005B, r0
    15de:	0f 90       	pop	r0
    15e0:	0f be       	out	0x3f, r0	; 63
    15e2:	0f 90       	pop	r0
    15e4:	1f 90       	pop	r1
    15e6:	18 95       	reti

000015e8 <__vector_27>:
SIGNAL(SIG_USART0_TRANS)
{
    15e8:	1f 92       	push	r1
    15ea:	0f 92       	push	r0
    15ec:	0f b6       	in	r0, 0x3f	; 63
    15ee:	0f 92       	push	r0
    15f0:	11 24       	eor	r1, r1
    15f2:	df 93       	push	r29
    15f4:	cf 93       	push	r28
    15f6:	cd b7       	in	r28, 0x3d	; 61
    15f8:	de b7       	in	r29, 0x3e	; 62
}
    15fa:	cf 91       	pop	r28
    15fc:	df 91       	pop	r29
    15fe:	0f 90       	pop	r0
    1600:	0f be       	out	0x3f, r0	; 63
    1602:	0f 90       	pop	r0
    1604:	1f 90       	pop	r1
    1606:	18 95       	reti

00001608 <timer5_init>:

void timer5_init()
{
    1608:	df 93       	push	r29
    160a:	cf 93       	push	r28
    160c:	cd b7       	in	r28, 0x3d	; 61
    160e:	de b7       	in	r29, 0x3e	; 62
	TCCR5B = 0x00;
    1610:	e1 e2       	ldi	r30, 0x21	; 33
    1612:	f1 e0       	ldi	r31, 0x01	; 1
    1614:	10 82       	st	Z, r1
	TCCR5A = 0xA1;
    1616:	e0 e2       	ldi	r30, 0x20	; 32
    1618:	f1 e0       	ldi	r31, 0x01	; 1
    161a:	81 ea       	ldi	r24, 0xA1	; 161
    161c:	80 83       	st	Z, r24
	TCCR5B = 0x0B;
    161e:	e1 e2       	ldi	r30, 0x21	; 33
    1620:	f1 e0       	ldi	r31, 0x01	; 1
    1622:	8b e0       	ldi	r24, 0x0B	; 11
    1624:	80 83       	st	Z, r24
}
    1626:	cf 91       	pop	r28
    1628:	df 91       	pop	r29
    162a:	08 95       	ret

0000162c <forward>:

void forward()
{
    162c:	df 93       	push	r29
    162e:	cf 93       	push	r28
    1630:	cd b7       	in	r28, 0x3d	; 61
    1632:	de b7       	in	r29, 0x3e	; 62

	PORTA=0x06;
    1634:	e2 e2       	ldi	r30, 0x22	; 34
    1636:	f0 e0       	ldi	r31, 0x00	; 0
    1638:	86 e0       	ldi	r24, 0x06	; 6
    163a:	80 83       	st	Z, r24

}
    163c:	cf 91       	pop	r28
    163e:	df 91       	pop	r29
    1640:	08 95       	ret

00001642 <right>:

void right() 				//function for moving right 
{
    1642:	df 93       	push	r29
    1644:	cf 93       	push	r28
    1646:	cd b7       	in	r28, 0x3d	; 61
    1648:	de b7       	in	r29, 0x3e	; 62
	PORTA=0x02;     				// Soft right
    164a:	e2 e2       	ldi	r30, 0x22	; 34
    164c:	f0 e0       	ldi	r31, 0x00	; 0
    164e:	82 e0       	ldi	r24, 0x02	; 2
    1650:	80 83       	st	Z, r24
}
    1652:	cf 91       	pop	r28
    1654:	df 91       	pop	r29
    1656:	08 95       	ret

00001658 <left>:
void left() 				//function for moving left
{
    1658:	df 93       	push	r29
    165a:	cf 93       	push	r28
    165c:	cd b7       	in	r28, 0x3d	; 61
    165e:	de b7       	in	r29, 0x3e	; 62
	PORTA=0x05;     				// Hard left
    1660:	e2 e2       	ldi	r30, 0x22	; 34
    1662:	f0 e0       	ldi	r31, 0x00	; 0
    1664:	85 e0       	ldi	r24, 0x05	; 5
    1666:	80 83       	st	Z, r24
}
    1668:	cf 91       	pop	r28
    166a:	df 91       	pop	r29
    166c:	08 95       	ret

0000166e <back>:
void back() 				//function for moving backward
{
    166e:	df 93       	push	r29
    1670:	cf 93       	push	r28
    1672:	cd b7       	in	r28, 0x3d	; 61
    1674:	de b7       	in	r29, 0x3e	; 62
	PORTA=0x09;     				// move back
    1676:	e2 e2       	ldi	r30, 0x22	; 34
    1678:	f0 e0       	ldi	r31, 0x00	; 0
    167a:	89 e0       	ldi	r24, 0x09	; 9
    167c:	80 83       	st	Z, r24
}
    167e:	cf 91       	pop	r28
    1680:	df 91       	pop	r29
    1682:	08 95       	ret

00001684 <stop>:
void stop() 				//function for moving stop
{
    1684:	df 93       	push	r29
    1686:	cf 93       	push	r28
    1688:	cd b7       	in	r28, 0x3d	; 61
    168a:	de b7       	in	r29, 0x3e	; 62
	PORTA=0x00;						// Stop
    168c:	e2 e2       	ldi	r30, 0x22	; 34
    168e:	f0 e0       	ldi	r31, 0x00	; 0
    1690:	10 82       	st	Z, r1
}
    1692:	cf 91       	pop	r28
    1694:	df 91       	pop	r29
    1696:	08 95       	ret

00001698 <right_hard>:

void right_hard() 			//function for moving right
{
    1698:	df 93       	push	r29
    169a:	cf 93       	push	r28
    169c:	cd b7       	in	r28, 0x3d	; 61
    169e:	de b7       	in	r29, 0x3e	; 62
	PORTA=0x0A;						// Hard right
    16a0:	e2 e2       	ldi	r30, 0x22	; 34
    16a2:	f0 e0       	ldi	r31, 0x00	; 0
    16a4:	8a e0       	ldi	r24, 0x0A	; 10
    16a6:	80 83       	st	Z, r24
}
    16a8:	cf 91       	pop	r28
    16aa:	df 91       	pop	r29
    16ac:	08 95       	ret

000016ae <velocity>:

//Velocity control function of wheels
void velocity (unsigned char t1,unsigned char t2)
{
    16ae:	df 93       	push	r29
    16b0:	cf 93       	push	r28
    16b2:	0f 92       	push	r0
    16b4:	0f 92       	push	r0
    16b6:	cd b7       	in	r28, 0x3d	; 61
    16b8:	de b7       	in	r29, 0x3e	; 62
    16ba:	89 83       	std	Y+1, r24	; 0x01
    16bc:	6a 83       	std	Y+2, r22	; 0x02
	OCR5AL = t1;                  
    16be:	e8 e2       	ldi	r30, 0x28	; 40
    16c0:	f1 e0       	ldi	r31, 0x01	; 1
    16c2:	89 81       	ldd	r24, Y+1	; 0x01
    16c4:	80 83       	st	Z, r24
	OCR5BL = t2;
    16c6:	ea e2       	ldi	r30, 0x2A	; 42
    16c8:	f1 e0       	ldi	r31, 0x01	; 1
    16ca:	8a 81       	ldd	r24, Y+2	; 0x02
    16cc:	80 83       	st	Z, r24
}
    16ce:	0f 90       	pop	r0
    16d0:	0f 90       	pop	r0
    16d2:	cf 91       	pop	r28
    16d4:	df 91       	pop	r29
    16d6:	08 95       	ret

000016d8 <left_position_encoder_interrupt_init>:


//initialization function of left wheel encoder

void left_position_encoder_interrupt_init(void)
{
    16d8:	df 93       	push	r29
    16da:	cf 93       	push	r28
    16dc:	cd b7       	in	r28, 0x3d	; 61
    16de:	de b7       	in	r29, 0x3e	; 62
	cli();
    16e0:	f8 94       	cli
	EICRB=EICRB|0x02;
    16e2:	aa e6       	ldi	r26, 0x6A	; 106
    16e4:	b0 e0       	ldi	r27, 0x00	; 0
    16e6:	ea e6       	ldi	r30, 0x6A	; 106
    16e8:	f0 e0       	ldi	r31, 0x00	; 0
    16ea:	80 81       	ld	r24, Z
    16ec:	82 60       	ori	r24, 0x02	; 2
    16ee:	8c 93       	st	X, r24
	EIMSK=EIMSK|0x10;
    16f0:	ad e3       	ldi	r26, 0x3D	; 61
    16f2:	b0 e0       	ldi	r27, 0x00	; 0
    16f4:	ed e3       	ldi	r30, 0x3D	; 61
    16f6:	f0 e0       	ldi	r31, 0x00	; 0
    16f8:	80 81       	ld	r24, Z
    16fa:	80 61       	ori	r24, 0x10	; 16
    16fc:	8c 93       	st	X, r24
	sei();
    16fe:	78 94       	sei
}
    1700:	cf 91       	pop	r28
    1702:	df 91       	pop	r29
    1704:	08 95       	ret

00001706 <right_position_encoder_interrupt_init>:

//initialization function of right wheel encoder
void right_position_encoder_interrupt_init(void)
{
    1706:	df 93       	push	r29
    1708:	cf 93       	push	r28
    170a:	cd b7       	in	r28, 0x3d	; 61
    170c:	de b7       	in	r29, 0x3e	; 62
	cli();
    170e:	f8 94       	cli
	EICRB=EICRB|0x08;
    1710:	aa e6       	ldi	r26, 0x6A	; 106
    1712:	b0 e0       	ldi	r27, 0x00	; 0
    1714:	ea e6       	ldi	r30, 0x6A	; 106
    1716:	f0 e0       	ldi	r31, 0x00	; 0
    1718:	80 81       	ld	r24, Z
    171a:	88 60       	ori	r24, 0x08	; 8
    171c:	8c 93       	st	X, r24
	EIMSK=EIMSK|0x20;
    171e:	ad e3       	ldi	r26, 0x3D	; 61
    1720:	b0 e0       	ldi	r27, 0x00	; 0
    1722:	ed e3       	ldi	r30, 0x3D	; 61
    1724:	f0 e0       	ldi	r31, 0x00	; 0
    1726:	80 81       	ld	r24, Z
    1728:	80 62       	ori	r24, 0x20	; 32
    172a:	8c 93       	st	X, r24
	sei();
    172c:	78 94       	sei
}
    172e:	cf 91       	pop	r28
    1730:	df 91       	pop	r29
    1732:	08 95       	ret

00001734 <angle_rotate>:
wheel which rotates) and scr or scl is incremented.This scl or scr value is compared with the
required count.If it is less then again rotation continues or the loop will break
*/

void angle_rotate(unsigned int Degrees)
{
    1734:	df 93       	push	r29
    1736:	cf 93       	push	r28
    1738:	cd b7       	in	r28, 0x3d	; 61
    173a:	de b7       	in	r29, 0x3e	; 62
    173c:	2c 97       	sbiw	r28, 0x0c	; 12
    173e:	0f b6       	in	r0, 0x3f	; 63
    1740:	f8 94       	cli
    1742:	de bf       	out	0x3e, r29	; 62
    1744:	0f be       	out	0x3f, r0	; 63
    1746:	cd bf       	out	0x3d, r28	; 61
    1748:	9a 87       	std	Y+10, r25	; 0x0a
    174a:	89 87       	std	Y+9, r24	; 0x09

    float ReqdShaftCount = 0;
    174c:	80 e0       	ldi	r24, 0x00	; 0
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	a0 e0       	ldi	r26, 0x00	; 0
    1752:	b0 e0       	ldi	r27, 0x00	; 0
    1754:	8d 83       	std	Y+5, r24	; 0x05
    1756:	9e 83       	std	Y+6, r25	; 0x06
    1758:	af 83       	std	Y+7, r26	; 0x07
    175a:	b8 87       	std	Y+8, r27	; 0x08
	unsigned long int ReqdShaftCountInt = 0;
    175c:	19 82       	std	Y+1, r1	; 0x01
    175e:	1a 82       	std	Y+2, r1	; 0x02
    1760:	1b 82       	std	Y+3, r1	; 0x03
    1762:	1c 82       	std	Y+4, r1	; 0x04
	ReqdShaftCount = (float) Degrees/ 2.045; // division by resolution to get shaft count
    1764:	89 85       	ldd	r24, Y+9	; 0x09
    1766:	9a 85       	ldd	r25, Y+10	; 0x0a
    1768:	cc 01       	movw	r24, r24
    176a:	a0 e0       	ldi	r26, 0x00	; 0
    176c:	b0 e0       	ldi	r27, 0x00	; 0
    176e:	bc 01       	movw	r22, r24
    1770:	cd 01       	movw	r24, r26
    1772:	0e 94 d6 1e 	call	0x3dac	; 0x3dac <__floatunsisf>
    1776:	dc 01       	movw	r26, r24
    1778:	cb 01       	movw	r24, r22
    177a:	bc 01       	movw	r22, r24
    177c:	cd 01       	movw	r24, r26
    177e:	28 e4       	ldi	r18, 0x48	; 72
    1780:	31 ee       	ldi	r19, 0xE1	; 225
    1782:	42 e0       	ldi	r20, 0x02	; 2
    1784:	50 e4       	ldi	r21, 0x40	; 64
    1786:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <__divsf3>
    178a:	dc 01       	movw	r26, r24
    178c:	cb 01       	movw	r24, r22
    178e:	8d 83       	std	Y+5, r24	; 0x05
    1790:	9e 83       	std	Y+6, r25	; 0x06
    1792:	af 83       	std	Y+7, r26	; 0x07
    1794:	b8 87       	std	Y+8, r27	; 0x08
	ReqdShaftCountInt = (unsigned int) ReqdShaftCount;    
    1796:	6d 81       	ldd	r22, Y+5	; 0x05
    1798:	7e 81       	ldd	r23, Y+6	; 0x06
    179a:	8f 81       	ldd	r24, Y+7	; 0x07
    179c:	98 85       	ldd	r25, Y+8	; 0x08
    179e:	0e 94 18 1a 	call	0x3430	; 0x3430 <__fixunssfsi>
    17a2:	dc 01       	movw	r26, r24
    17a4:	cb 01       	movw	r24, r22
    17a6:	cc 01       	movw	r24, r24
    17a8:	a0 e0       	ldi	r26, 0x00	; 0
    17aa:	b0 e0       	ldi	r27, 0x00	; 0
    17ac:	89 83       	std	Y+1, r24	; 0x01
    17ae:	9a 83       	std	Y+2, r25	; 0x02
    17b0:	ab 83       	std	Y+3, r26	; 0x03
    17b2:	bc 83       	std	Y+4, r27	; 0x04
	scr = 0; 
    17b4:	10 92 0b 03 	sts	0x030B, r1
    17b8:	10 92 0a 03 	sts	0x030A, r1
	scl = 0; 
    17bc:	10 92 22 03 	sts	0x0322, r1
    17c0:	10 92 21 03 	sts	0x0321, r1
	while (1)
	{
		if((scr>= ReqdShaftCountInt) | (scl >= ReqdShaftCountInt))
    17c4:	80 91 0a 03 	lds	r24, 0x030A
    17c8:	90 91 0b 03 	lds	r25, 0x030B
    17cc:	9c 01       	movw	r18, r24
    17ce:	44 27       	eor	r20, r20
    17d0:	37 fd       	sbrc	r19, 7
    17d2:	40 95       	com	r20
    17d4:	54 2f       	mov	r21, r20
    17d6:	1c 86       	std	Y+12, r1	; 0x0c
    17d8:	89 81       	ldd	r24, Y+1	; 0x01
    17da:	9a 81       	ldd	r25, Y+2	; 0x02
    17dc:	ab 81       	ldd	r26, Y+3	; 0x03
    17de:	bc 81       	ldd	r27, Y+4	; 0x04
    17e0:	28 17       	cp	r18, r24
    17e2:	39 07       	cpc	r19, r25
    17e4:	4a 07       	cpc	r20, r26
    17e6:	5b 07       	cpc	r21, r27
    17e8:	10 f0       	brcs	.+4      	; 0x17ee <angle_rotate+0xba>
    17ea:	81 e0       	ldi	r24, 0x01	; 1
    17ec:	8c 87       	std	Y+12, r24	; 0x0c
    17ee:	80 91 21 03 	lds	r24, 0x0321
    17f2:	90 91 22 03 	lds	r25, 0x0322
    17f6:	9c 01       	movw	r18, r24
    17f8:	44 27       	eor	r20, r20
    17fa:	37 fd       	sbrc	r19, 7
    17fc:	40 95       	com	r20
    17fe:	54 2f       	mov	r21, r20
    1800:	1b 86       	std	Y+11, r1	; 0x0b
    1802:	89 81       	ldd	r24, Y+1	; 0x01
    1804:	9a 81       	ldd	r25, Y+2	; 0x02
    1806:	ab 81       	ldd	r26, Y+3	; 0x03
    1808:	bc 81       	ldd	r27, Y+4	; 0x04
    180a:	28 17       	cp	r18, r24
    180c:	39 07       	cpc	r19, r25
    180e:	4a 07       	cpc	r20, r26
    1810:	5b 07       	cpc	r21, r27
    1812:	10 f0       	brcs	.+4      	; 0x1818 <angle_rotate+0xe4>
    1814:	91 e0       	ldi	r25, 0x01	; 1
    1816:	9b 87       	std	Y+11, r25	; 0x0b
    1818:	8c 85       	ldd	r24, Y+12	; 0x0c
    181a:	9b 85       	ldd	r25, Y+11	; 0x0b
    181c:	89 2b       	or	r24, r25
    181e:	88 23       	and	r24, r24
    1820:	19 f4       	brne	.+6      	; 0x1828 <angle_rotate+0xf4>
			break;
		}
		else
		{
						
			right();
    1822:	0e 94 21 0b 	call	0x1642	; 0x1642 <right>
    1826:	ce cf       	rjmp	.-100    	; 0x17c4 <angle_rotate+0x90>
		}
	}
   	stop(); 
    1828:	0e 94 42 0b 	call	0x1684	; 0x1684 <stop>
}
    182c:	2c 96       	adiw	r28, 0x0c	; 12
    182e:	0f b6       	in	r0, 0x3f	; 63
    1830:	f8 94       	cli
    1832:	de bf       	out	0x3e, r29	; 62
    1834:	0f be       	out	0x3f, r0	; 63
    1836:	cd bf       	out	0x3d, r28	; 61
    1838:	cf 91       	pop	r28
    183a:	df 91       	pop	r29
    183c:	08 95       	ret

0000183e <angle_rotate_right_hard>:
/*Angle rotation function for hard right rotation 
Same as above but rotation function is hard right.
*/

void angle_rotate_right_hard(unsigned int Degrees)
{
    183e:	df 93       	push	r29
    1840:	cf 93       	push	r28
    1842:	cd b7       	in	r28, 0x3d	; 61
    1844:	de b7       	in	r29, 0x3e	; 62
    1846:	2c 97       	sbiw	r28, 0x0c	; 12
    1848:	0f b6       	in	r0, 0x3f	; 63
    184a:	f8 94       	cli
    184c:	de bf       	out	0x3e, r29	; 62
    184e:	0f be       	out	0x3f, r0	; 63
    1850:	cd bf       	out	0x3d, r28	; 61
    1852:	9a 87       	std	Y+10, r25	; 0x0a
    1854:	89 87       	std	Y+9, r24	; 0x09

    float ReqdShaftCount = 0;
    1856:	80 e0       	ldi	r24, 0x00	; 0
    1858:	90 e0       	ldi	r25, 0x00	; 0
    185a:	a0 e0       	ldi	r26, 0x00	; 0
    185c:	b0 e0       	ldi	r27, 0x00	; 0
    185e:	8d 83       	std	Y+5, r24	; 0x05
    1860:	9e 83       	std	Y+6, r25	; 0x06
    1862:	af 83       	std	Y+7, r26	; 0x07
    1864:	b8 87       	std	Y+8, r27	; 0x08
	unsigned long int ReqdShaftCountInt = 0;
    1866:	19 82       	std	Y+1, r1	; 0x01
    1868:	1a 82       	std	Y+2, r1	; 0x02
    186a:	1b 82       	std	Y+3, r1	; 0x03
    186c:	1c 82       	std	Y+4, r1	; 0x04
	ReqdShaftCount = (float) Degrees/ 2.045; // division by resolution to get shaft count
    186e:	89 85       	ldd	r24, Y+9	; 0x09
    1870:	9a 85       	ldd	r25, Y+10	; 0x0a
    1872:	cc 01       	movw	r24, r24
    1874:	a0 e0       	ldi	r26, 0x00	; 0
    1876:	b0 e0       	ldi	r27, 0x00	; 0
    1878:	bc 01       	movw	r22, r24
    187a:	cd 01       	movw	r24, r26
    187c:	0e 94 d6 1e 	call	0x3dac	; 0x3dac <__floatunsisf>
    1880:	dc 01       	movw	r26, r24
    1882:	cb 01       	movw	r24, r22
    1884:	bc 01       	movw	r22, r24
    1886:	cd 01       	movw	r24, r26
    1888:	28 e4       	ldi	r18, 0x48	; 72
    188a:	31 ee       	ldi	r19, 0xE1	; 225
    188c:	42 e0       	ldi	r20, 0x02	; 2
    188e:	50 e4       	ldi	r21, 0x40	; 64
    1890:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <__divsf3>
    1894:	dc 01       	movw	r26, r24
    1896:	cb 01       	movw	r24, r22
    1898:	8d 83       	std	Y+5, r24	; 0x05
    189a:	9e 83       	std	Y+6, r25	; 0x06
    189c:	af 83       	std	Y+7, r26	; 0x07
    189e:	b8 87       	std	Y+8, r27	; 0x08
	ReqdShaftCountInt = (unsigned int) ReqdShaftCount;    
    18a0:	6d 81       	ldd	r22, Y+5	; 0x05
    18a2:	7e 81       	ldd	r23, Y+6	; 0x06
    18a4:	8f 81       	ldd	r24, Y+7	; 0x07
    18a6:	98 85       	ldd	r25, Y+8	; 0x08
    18a8:	0e 94 18 1a 	call	0x3430	; 0x3430 <__fixunssfsi>
    18ac:	dc 01       	movw	r26, r24
    18ae:	cb 01       	movw	r24, r22
    18b0:	cc 01       	movw	r24, r24
    18b2:	a0 e0       	ldi	r26, 0x00	; 0
    18b4:	b0 e0       	ldi	r27, 0x00	; 0
    18b6:	89 83       	std	Y+1, r24	; 0x01
    18b8:	9a 83       	std	Y+2, r25	; 0x02
    18ba:	ab 83       	std	Y+3, r26	; 0x03
    18bc:	bc 83       	std	Y+4, r27	; 0x04
	scr = 0; 
    18be:	10 92 0b 03 	sts	0x030B, r1
    18c2:	10 92 0a 03 	sts	0x030A, r1
	scl = 0; 
    18c6:	10 92 22 03 	sts	0x0322, r1
    18ca:	10 92 21 03 	sts	0x0321, r1
	while (1)
	{
		if((scr>= ReqdShaftCountInt) | (scl >= ReqdShaftCountInt))
    18ce:	80 91 0a 03 	lds	r24, 0x030A
    18d2:	90 91 0b 03 	lds	r25, 0x030B
    18d6:	9c 01       	movw	r18, r24
    18d8:	44 27       	eor	r20, r20
    18da:	37 fd       	sbrc	r19, 7
    18dc:	40 95       	com	r20
    18de:	54 2f       	mov	r21, r20
    18e0:	1c 86       	std	Y+12, r1	; 0x0c
    18e2:	89 81       	ldd	r24, Y+1	; 0x01
    18e4:	9a 81       	ldd	r25, Y+2	; 0x02
    18e6:	ab 81       	ldd	r26, Y+3	; 0x03
    18e8:	bc 81       	ldd	r27, Y+4	; 0x04
    18ea:	28 17       	cp	r18, r24
    18ec:	39 07       	cpc	r19, r25
    18ee:	4a 07       	cpc	r20, r26
    18f0:	5b 07       	cpc	r21, r27
    18f2:	10 f0       	brcs	.+4      	; 0x18f8 <angle_rotate_right_hard+0xba>
    18f4:	81 e0       	ldi	r24, 0x01	; 1
    18f6:	8c 87       	std	Y+12, r24	; 0x0c
    18f8:	80 91 21 03 	lds	r24, 0x0321
    18fc:	90 91 22 03 	lds	r25, 0x0322
    1900:	9c 01       	movw	r18, r24
    1902:	44 27       	eor	r20, r20
    1904:	37 fd       	sbrc	r19, 7
    1906:	40 95       	com	r20
    1908:	54 2f       	mov	r21, r20
    190a:	1b 86       	std	Y+11, r1	; 0x0b
    190c:	89 81       	ldd	r24, Y+1	; 0x01
    190e:	9a 81       	ldd	r25, Y+2	; 0x02
    1910:	ab 81       	ldd	r26, Y+3	; 0x03
    1912:	bc 81       	ldd	r27, Y+4	; 0x04
    1914:	28 17       	cp	r18, r24
    1916:	39 07       	cpc	r19, r25
    1918:	4a 07       	cpc	r20, r26
    191a:	5b 07       	cpc	r21, r27
    191c:	10 f0       	brcs	.+4      	; 0x1922 <angle_rotate_right_hard+0xe4>
    191e:	91 e0       	ldi	r25, 0x01	; 1
    1920:	9b 87       	std	Y+11, r25	; 0x0b
    1922:	8c 85       	ldd	r24, Y+12	; 0x0c
    1924:	9b 85       	ldd	r25, Y+11	; 0x0b
    1926:	89 2b       	or	r24, r25
    1928:	88 23       	and	r24, r24
    192a:	19 f4       	brne	.+6      	; 0x1932 <angle_rotate_right_hard+0xf4>
			break;
		}
		else
		{
						
			right_hard();
    192c:	0e 94 4c 0b 	call	0x1698	; 0x1698 <right_hard>
    1930:	ce cf       	rjmp	.-100    	; 0x18ce <angle_rotate_right_hard+0x90>
		}

	}
   	stop(); 
    1932:	0e 94 42 0b 	call	0x1684	; 0x1684 <stop>

}
    1936:	2c 96       	adiw	r28, 0x0c	; 12
    1938:	0f b6       	in	r0, 0x3f	; 63
    193a:	f8 94       	cli
    193c:	de bf       	out	0x3e, r29	; 62
    193e:	0f be       	out	0x3f, r0	; 63
    1940:	cd bf       	out	0x3d, r28	; 61
    1942:	cf 91       	pop	r28
    1944:	df 91       	pop	r29
    1946:	08 95       	ret

00001948 <angle_rotate_left>:

/*Angle rotation function for hard left rotation 
Same as above but rotation function is hard left.
*/
void angle_rotate_left(unsigned int Degrees)
{
    1948:	df 93       	push	r29
    194a:	cf 93       	push	r28
    194c:	cd b7       	in	r28, 0x3d	; 61
    194e:	de b7       	in	r29, 0x3e	; 62
    1950:	2c 97       	sbiw	r28, 0x0c	; 12
    1952:	0f b6       	in	r0, 0x3f	; 63
    1954:	f8 94       	cli
    1956:	de bf       	out	0x3e, r29	; 62
    1958:	0f be       	out	0x3f, r0	; 63
    195a:	cd bf       	out	0x3d, r28	; 61
    195c:	9a 87       	std	Y+10, r25	; 0x0a
    195e:	89 87       	std	Y+9, r24	; 0x09

    float ReqdShaftCount = 0;
    1960:	80 e0       	ldi	r24, 0x00	; 0
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	a0 e0       	ldi	r26, 0x00	; 0
    1966:	b0 e0       	ldi	r27, 0x00	; 0
    1968:	8d 83       	std	Y+5, r24	; 0x05
    196a:	9e 83       	std	Y+6, r25	; 0x06
    196c:	af 83       	std	Y+7, r26	; 0x07
    196e:	b8 87       	std	Y+8, r27	; 0x08
	unsigned long int ReqdShaftCountInt = 0;
    1970:	19 82       	std	Y+1, r1	; 0x01
    1972:	1a 82       	std	Y+2, r1	; 0x02
    1974:	1b 82       	std	Y+3, r1	; 0x03
    1976:	1c 82       	std	Y+4, r1	; 0x04
	ReqdShaftCount = (float) Degrees/ 2.045; // division by resolution to get shaft count
    1978:	89 85       	ldd	r24, Y+9	; 0x09
    197a:	9a 85       	ldd	r25, Y+10	; 0x0a
    197c:	cc 01       	movw	r24, r24
    197e:	a0 e0       	ldi	r26, 0x00	; 0
    1980:	b0 e0       	ldi	r27, 0x00	; 0
    1982:	bc 01       	movw	r22, r24
    1984:	cd 01       	movw	r24, r26
    1986:	0e 94 d6 1e 	call	0x3dac	; 0x3dac <__floatunsisf>
    198a:	dc 01       	movw	r26, r24
    198c:	cb 01       	movw	r24, r22
    198e:	bc 01       	movw	r22, r24
    1990:	cd 01       	movw	r24, r26
    1992:	28 e4       	ldi	r18, 0x48	; 72
    1994:	31 ee       	ldi	r19, 0xE1	; 225
    1996:	42 e0       	ldi	r20, 0x02	; 2
    1998:	50 e4       	ldi	r21, 0x40	; 64
    199a:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <__divsf3>
    199e:	dc 01       	movw	r26, r24
    19a0:	cb 01       	movw	r24, r22
    19a2:	8d 83       	std	Y+5, r24	; 0x05
    19a4:	9e 83       	std	Y+6, r25	; 0x06
    19a6:	af 83       	std	Y+7, r26	; 0x07
    19a8:	b8 87       	std	Y+8, r27	; 0x08
	ReqdShaftCountInt = (unsigned int) ReqdShaftCount;    
    19aa:	6d 81       	ldd	r22, Y+5	; 0x05
    19ac:	7e 81       	ldd	r23, Y+6	; 0x06
    19ae:	8f 81       	ldd	r24, Y+7	; 0x07
    19b0:	98 85       	ldd	r25, Y+8	; 0x08
    19b2:	0e 94 18 1a 	call	0x3430	; 0x3430 <__fixunssfsi>
    19b6:	dc 01       	movw	r26, r24
    19b8:	cb 01       	movw	r24, r22
    19ba:	cc 01       	movw	r24, r24
    19bc:	a0 e0       	ldi	r26, 0x00	; 0
    19be:	b0 e0       	ldi	r27, 0x00	; 0
    19c0:	89 83       	std	Y+1, r24	; 0x01
    19c2:	9a 83       	std	Y+2, r25	; 0x02
    19c4:	ab 83       	std	Y+3, r26	; 0x03
    19c6:	bc 83       	std	Y+4, r27	; 0x04
	scr = 0; 
    19c8:	10 92 0b 03 	sts	0x030B, r1
    19cc:	10 92 0a 03 	sts	0x030A, r1
	scl = 0; 
    19d0:	10 92 22 03 	sts	0x0322, r1
    19d4:	10 92 21 03 	sts	0x0321, r1
	while (1)
	{
		if((scr>= ReqdShaftCountInt) | (scl >= ReqdShaftCountInt))
    19d8:	80 91 0a 03 	lds	r24, 0x030A
    19dc:	90 91 0b 03 	lds	r25, 0x030B
    19e0:	9c 01       	movw	r18, r24
    19e2:	44 27       	eor	r20, r20
    19e4:	37 fd       	sbrc	r19, 7
    19e6:	40 95       	com	r20
    19e8:	54 2f       	mov	r21, r20
    19ea:	1c 86       	std	Y+12, r1	; 0x0c
    19ec:	89 81       	ldd	r24, Y+1	; 0x01
    19ee:	9a 81       	ldd	r25, Y+2	; 0x02
    19f0:	ab 81       	ldd	r26, Y+3	; 0x03
    19f2:	bc 81       	ldd	r27, Y+4	; 0x04
    19f4:	28 17       	cp	r18, r24
    19f6:	39 07       	cpc	r19, r25
    19f8:	4a 07       	cpc	r20, r26
    19fa:	5b 07       	cpc	r21, r27
    19fc:	10 f0       	brcs	.+4      	; 0x1a02 <angle_rotate_left+0xba>
    19fe:	81 e0       	ldi	r24, 0x01	; 1
    1a00:	8c 87       	std	Y+12, r24	; 0x0c
    1a02:	80 91 21 03 	lds	r24, 0x0321
    1a06:	90 91 22 03 	lds	r25, 0x0322
    1a0a:	9c 01       	movw	r18, r24
    1a0c:	44 27       	eor	r20, r20
    1a0e:	37 fd       	sbrc	r19, 7
    1a10:	40 95       	com	r20
    1a12:	54 2f       	mov	r21, r20
    1a14:	1b 86       	std	Y+11, r1	; 0x0b
    1a16:	89 81       	ldd	r24, Y+1	; 0x01
    1a18:	9a 81       	ldd	r25, Y+2	; 0x02
    1a1a:	ab 81       	ldd	r26, Y+3	; 0x03
    1a1c:	bc 81       	ldd	r27, Y+4	; 0x04
    1a1e:	28 17       	cp	r18, r24
    1a20:	39 07       	cpc	r19, r25
    1a22:	4a 07       	cpc	r20, r26
    1a24:	5b 07       	cpc	r21, r27
    1a26:	10 f0       	brcs	.+4      	; 0x1a2c <angle_rotate_left+0xe4>
    1a28:	91 e0       	ldi	r25, 0x01	; 1
    1a2a:	9b 87       	std	Y+11, r25	; 0x0b
    1a2c:	8c 85       	ldd	r24, Y+12	; 0x0c
    1a2e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a30:	89 2b       	or	r24, r25
    1a32:	88 23       	and	r24, r24
    1a34:	19 f4       	brne	.+6      	; 0x1a3c <angle_rotate_left+0xf4>
			break;
		}
		else
		{
						
			left();
    1a36:	0e 94 2c 0b 	call	0x1658	; 0x1658 <left>
    1a3a:	ce cf       	rjmp	.-100    	; 0x19d8 <angle_rotate_left+0x90>

		}

	}

   	stop(); 
    1a3c:	0e 94 42 0b 	call	0x1684	; 0x1684 <stop>

}
    1a40:	2c 96       	adiw	r28, 0x0c	; 12
    1a42:	0f b6       	in	r0, 0x3f	; 63
    1a44:	f8 94       	cli
    1a46:	de bf       	out	0x3e, r29	; 62
    1a48:	0f be       	out	0x3f, r0	; 63
    1a4a:	cd bf       	out	0x3d, r28	; 61
    1a4c:	cf 91       	pop	r28
    1a4e:	df 91       	pop	r29
    1a50:	08 95       	ret

00001a52 <__vector_5>:

//ISR for left wheel shaft encoder

ISR(INT4_vect)
{
    1a52:	1f 92       	push	r1
    1a54:	0f 92       	push	r0
    1a56:	0f b6       	in	r0, 0x3f	; 63
    1a58:	0f 92       	push	r0
    1a5a:	11 24       	eor	r1, r1
    1a5c:	8f 93       	push	r24
    1a5e:	9f 93       	push	r25
    1a60:	df 93       	push	r29
    1a62:	cf 93       	push	r28
    1a64:	cd b7       	in	r28, 0x3d	; 61
    1a66:	de b7       	in	r29, 0x3e	; 62

	scl++;
    1a68:	80 91 21 03 	lds	r24, 0x0321
    1a6c:	90 91 22 03 	lds	r25, 0x0322
    1a70:	01 96       	adiw	r24, 0x01	; 1
    1a72:	90 93 22 03 	sts	0x0322, r25
    1a76:	80 93 21 03 	sts	0x0321, r24
}
    1a7a:	cf 91       	pop	r28
    1a7c:	df 91       	pop	r29
    1a7e:	9f 91       	pop	r25
    1a80:	8f 91       	pop	r24
    1a82:	0f 90       	pop	r0
    1a84:	0f be       	out	0x3f, r0	; 63
    1a86:	0f 90       	pop	r0
    1a88:	1f 90       	pop	r1
    1a8a:	18 95       	reti

00001a8c <__vector_6>:
//ISR for right wheel shaft encoder
ISR(INT5_vect)
{
    1a8c:	1f 92       	push	r1
    1a8e:	0f 92       	push	r0
    1a90:	0f b6       	in	r0, 0x3f	; 63
    1a92:	0f 92       	push	r0
    1a94:	11 24       	eor	r1, r1
    1a96:	8f 93       	push	r24
    1a98:	9f 93       	push	r25
    1a9a:	df 93       	push	r29
    1a9c:	cf 93       	push	r28
    1a9e:	cd b7       	in	r28, 0x3d	; 61
    1aa0:	de b7       	in	r29, 0x3e	; 62
	scr++;
    1aa2:	80 91 0a 03 	lds	r24, 0x030A
    1aa6:	90 91 0b 03 	lds	r25, 0x030B
    1aaa:	01 96       	adiw	r24, 0x01	; 1
    1aac:	90 93 0b 03 	sts	0x030B, r25
    1ab0:	80 93 0a 03 	sts	0x030A, r24

}
    1ab4:	cf 91       	pop	r28
    1ab6:	df 91       	pop	r29
    1ab8:	9f 91       	pop	r25
    1aba:	8f 91       	pop	r24
    1abc:	0f 90       	pop	r0
    1abe:	0f be       	out	0x3f, r0	; 63
    1ac0:	0f 90       	pop	r0
    1ac2:	1f 90       	pop	r1
    1ac4:	18 95       	reti

00001ac6 <linear_distance_mm>:
and if that value is reached, the loop breaks else the function for forward movement is 
executed 
*/

void linear_distance_mm(unsigned int DistanceInMM)
{ 	
    1ac6:	df 93       	push	r29
    1ac8:	cf 93       	push	r28
    1aca:	cd b7       	in	r28, 0x3d	; 61
    1acc:	de b7       	in	r29, 0x3e	; 62
    1ace:	2a 97       	sbiw	r28, 0x0a	; 10
    1ad0:	0f b6       	in	r0, 0x3f	; 63
    1ad2:	f8 94       	cli
    1ad4:	de bf       	out	0x3e, r29	; 62
    1ad6:	0f be       	out	0x3f, r0	; 63
    1ad8:	cd bf       	out	0x3d, r28	; 61
    1ada:	9a 87       	std	Y+10, r25	; 0x0a
    1adc:	89 87       	std	Y+9, r24	; 0x09
	float ReqdShaftCount = 0;
    1ade:	80 e0       	ldi	r24, 0x00	; 0
    1ae0:	90 e0       	ldi	r25, 0x00	; 0
    1ae2:	a0 e0       	ldi	r26, 0x00	; 0
    1ae4:	b0 e0       	ldi	r27, 0x00	; 0
    1ae6:	8d 83       	std	Y+5, r24	; 0x05
    1ae8:	9e 83       	std	Y+6, r25	; 0x06
    1aea:	af 83       	std	Y+7, r26	; 0x07
    1aec:	b8 87       	std	Y+8, r27	; 0x08
	unsigned long int ReqdShaftCountInt = 0;
    1aee:	19 82       	std	Y+1, r1	; 0x01
    1af0:	1a 82       	std	Y+2, r1	; 0x02
    1af2:	1b 82       	std	Y+3, r1	; 0x03
    1af4:	1c 82       	std	Y+4, r1	; 0x04
	ReqdShaftCount = DistanceInMM / 5.338; 	// division by resolution to get shaft count
    1af6:	89 85       	ldd	r24, Y+9	; 0x09
    1af8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1afa:	cc 01       	movw	r24, r24
    1afc:	a0 e0       	ldi	r26, 0x00	; 0
    1afe:	b0 e0       	ldi	r27, 0x00	; 0
    1b00:	bc 01       	movw	r22, r24
    1b02:	cd 01       	movw	r24, r26
    1b04:	0e 94 d6 1e 	call	0x3dac	; 0x3dac <__floatunsisf>
    1b08:	dc 01       	movw	r26, r24
    1b0a:	cb 01       	movw	r24, r22
    1b0c:	bc 01       	movw	r22, r24
    1b0e:	cd 01       	movw	r24, r26
    1b10:	25 ee       	ldi	r18, 0xE5	; 229
    1b12:	30 ed       	ldi	r19, 0xD0	; 208
    1b14:	4a ea       	ldi	r20, 0xAA	; 170
    1b16:	50 e4       	ldi	r21, 0x40	; 64
    1b18:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <__divsf3>
    1b1c:	dc 01       	movw	r26, r24
    1b1e:	cb 01       	movw	r24, r22
    1b20:	8d 83       	std	Y+5, r24	; 0x05
    1b22:	9e 83       	std	Y+6, r25	; 0x06
    1b24:	af 83       	std	Y+7, r26	; 0x07
    1b26:	b8 87       	std	Y+8, r27	; 0x08
	ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
    1b28:	6d 81       	ldd	r22, Y+5	; 0x05
    1b2a:	7e 81       	ldd	r23, Y+6	; 0x06
    1b2c:	8f 81       	ldd	r24, Y+7	; 0x07
    1b2e:	98 85       	ldd	r25, Y+8	; 0x08
    1b30:	0e 94 18 1a 	call	0x3430	; 0x3430 <__fixunssfsi>
    1b34:	dc 01       	movw	r26, r24
    1b36:	cb 01       	movw	r24, r22
    1b38:	89 83       	std	Y+1, r24	; 0x01
    1b3a:	9a 83       	std	Y+2, r25	; 0x02
    1b3c:	ab 83       	std	Y+3, r26	; 0x03
    1b3e:	bc 83       	std	Y+4, r27	; 0x04
	scr = 0; 	
    1b40:	10 92 0b 03 	sts	0x030B, r1
    1b44:	10 92 0a 03 	sts	0x030A, r1
	while(1) 	
	{
					  		
		if(scr > ReqdShaftCountInt)
    1b48:	80 91 0a 03 	lds	r24, 0x030A
    1b4c:	90 91 0b 03 	lds	r25, 0x030B
    1b50:	9c 01       	movw	r18, r24
    1b52:	44 27       	eor	r20, r20
    1b54:	37 fd       	sbrc	r19, 7
    1b56:	40 95       	com	r20
    1b58:	54 2f       	mov	r21, r20
    1b5a:	89 81       	ldd	r24, Y+1	; 0x01
    1b5c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b5e:	ab 81       	ldd	r26, Y+3	; 0x03
    1b60:	bc 81       	ldd	r27, Y+4	; 0x04
    1b62:	82 17       	cp	r24, r18
    1b64:	93 07       	cpc	r25, r19
    1b66:	a4 07       	cpc	r26, r20
    1b68:	b5 07       	cpc	r27, r21
    1b6a:	18 f0       	brcs	.+6      	; 0x1b72 <linear_distance_mm+0xac>
		{
			break;
		}
		else
		{
			forward();
    1b6c:	0e 94 16 0b 	call	0x162c	; 0x162c <forward>
    1b70:	eb cf       	rjmp	.-42     	; 0x1b48 <linear_distance_mm+0x82>
		}	

	} 

	stop(); //Stop action
    1b72:	0e 94 42 0b 	call	0x1684	; 0x1684 <stop>
}
    1b76:	2a 96       	adiw	r28, 0x0a	; 10
    1b78:	0f b6       	in	r0, 0x3f	; 63
    1b7a:	f8 94       	cli
    1b7c:	de bf       	out	0x3e, r29	; 62
    1b7e:	0f be       	out	0x3f, r0	; 63
    1b80:	cd bf       	out	0x3d, r28	; 61
    1b82:	cf 91       	pop	r28
    1b84:	df 91       	pop	r29
    1b86:	08 95       	ret

00001b88 <lcd_port_config>:


/* code for distance calculation using IR sensor  */

void lcd_port_config (void)
{
    1b88:	df 93       	push	r29
    1b8a:	cf 93       	push	r28
    1b8c:	cd b7       	in	r28, 0x3d	; 61
    1b8e:	de b7       	in	r29, 0x3e	; 62
	DDRC = DDRC | 0xF7; 		//all the LCD pin's direction set as output
    1b90:	a7 e2       	ldi	r26, 0x27	; 39
    1b92:	b0 e0       	ldi	r27, 0x00	; 0
    1b94:	e7 e2       	ldi	r30, 0x27	; 39
    1b96:	f0 e0       	ldi	r31, 0x00	; 0
    1b98:	80 81       	ld	r24, Z
    1b9a:	87 6f       	ori	r24, 0xF7	; 247
    1b9c:	8c 93       	st	X, r24
	PORTC = PORTC & 0x80; 		// all the LCD pins are set to logic 0 except PORTC 7
    1b9e:	a8 e2       	ldi	r26, 0x28	; 40
    1ba0:	b0 e0       	ldi	r27, 0x00	; 0
    1ba2:	e8 e2       	ldi	r30, 0x28	; 40
    1ba4:	f0 e0       	ldi	r31, 0x00	; 0
    1ba6:	80 81       	ld	r24, Z
    1ba8:	80 78       	andi	r24, 0x80	; 128
    1baa:	8c 93       	st	X, r24
}
    1bac:	cf 91       	pop	r28
    1bae:	df 91       	pop	r29
    1bb0:	08 95       	ret

00001bb2 <adc_pin_config>:

//ADC pin configuration
void adc_pin_config (void)
{
    1bb2:	df 93       	push	r29
    1bb4:	cf 93       	push	r28
    1bb6:	cd b7       	in	r28, 0x3d	; 61
    1bb8:	de b7       	in	r29, 0x3e	; 62
	DDRF = 0x00; 
    1bba:	e0 e3       	ldi	r30, 0x30	; 48
    1bbc:	f0 e0       	ldi	r31, 0x00	; 0
    1bbe:	10 82       	st	Z, r1
	PORTF = 0x00;
    1bc0:	e1 e3       	ldi	r30, 0x31	; 49
    1bc2:	f0 e0       	ldi	r31, 0x00	; 0
    1bc4:	10 82       	st	Z, r1
	DDRK = 0x00;
    1bc6:	e7 e0       	ldi	r30, 0x07	; 7
    1bc8:	f1 e0       	ldi	r31, 0x01	; 1
    1bca:	10 82       	st	Z, r1
	PORTK = 0x00;
    1bcc:	e8 e0       	ldi	r30, 0x08	; 8
    1bce:	f1 e0       	ldi	r31, 0x01	; 1
    1bd0:	10 82       	st	Z, r1
}
    1bd2:	cf 91       	pop	r28
    1bd4:	df 91       	pop	r29
    1bd6:	08 95       	ret

00001bd8 <port_init>:

void port_init()
{
    1bd8:	df 93       	push	r29
    1bda:	cf 93       	push	r28
    1bdc:	cd b7       	in	r28, 0x3d	; 61
    1bde:	de b7       	in	r29, 0x3e	; 62
	lcd_port_config();
    1be0:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <lcd_port_config>
	adc_pin_config();	
    1be4:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <adc_pin_config>
}
    1be8:	cf 91       	pop	r28
    1bea:	df 91       	pop	r29
    1bec:	08 95       	ret

00001bee <adc_init>:
	
void adc_init()
{
    1bee:	df 93       	push	r29
    1bf0:	cf 93       	push	r28
    1bf2:	cd b7       	in	r28, 0x3d	; 61
    1bf4:	de b7       	in	r29, 0x3e	; 62
	ADCSRA = 0x00;
    1bf6:	ea e7       	ldi	r30, 0x7A	; 122
    1bf8:	f0 e0       	ldi	r31, 0x00	; 0
    1bfa:	10 82       	st	Z, r1
	ADCSRB = 0x00;				//MUX5 = 0
    1bfc:	eb e7       	ldi	r30, 0x7B	; 123
    1bfe:	f0 e0       	ldi	r31, 0x00	; 0
    1c00:	10 82       	st	Z, r1
	ADMUX = 0x20;				//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
    1c02:	ec e7       	ldi	r30, 0x7C	; 124
    1c04:	f0 e0       	ldi	r31, 0x00	; 0
    1c06:	80 e2       	ldi	r24, 0x20	; 32
    1c08:	80 83       	st	Z, r24
	ACSR = 0x80;
    1c0a:	e0 e5       	ldi	r30, 0x50	; 80
    1c0c:	f0 e0       	ldi	r31, 0x00	; 0
    1c0e:	80 e8       	ldi	r24, 0x80	; 128
    1c10:	80 83       	st	Z, r24
	ADCSRA = 0x86;				//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
    1c12:	ea e7       	ldi	r30, 0x7A	; 122
    1c14:	f0 e0       	ldi	r31, 0x00	; 0
    1c16:	86 e8       	ldi	r24, 0x86	; 134
    1c18:	80 83       	st	Z, r24
}
    1c1a:	cf 91       	pop	r28
    1c1c:	df 91       	pop	r29
    1c1e:	08 95       	ret

00001c20 <init_devices>:

void init_devices (void)
{
    1c20:	df 93       	push	r29
    1c22:	cf 93       	push	r28
    1c24:	cd b7       	in	r28, 0x3d	; 61
    1c26:	de b7       	in	r29, 0x3e	; 62
	cli(); 						//Clears the global interrupts
    1c28:	f8 94       	cli
	port_init();
    1c2a:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <port_init>
	adc_init();
    1c2e:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <adc_init>
	sei(); 						//Enables the global interrupts
    1c32:	78 94       	sei
}
    1c34:	cf 91       	pop	r28
    1c36:	df 91       	pop	r29
    1c38:	08 95       	ret

00001c3a <ADC_Conversion>:
	
unsigned char ADC_Conversion(unsigned char Ch)
{
    1c3a:	df 93       	push	r29
    1c3c:	cf 93       	push	r28
    1c3e:	0f 92       	push	r0
    1c40:	0f 92       	push	r0
    1c42:	cd b7       	in	r28, 0x3d	; 61
    1c44:	de b7       	in	r29, 0x3e	; 62
    1c46:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char a;
	if(Ch>7)
    1c48:	8a 81       	ldd	r24, Y+2	; 0x02
    1c4a:	88 30       	cpi	r24, 0x08	; 8
    1c4c:	20 f0       	brcs	.+8      	; 0x1c56 <ADC_Conversion+0x1c>
	{
		ADCSRB = 0x08;			// select the ch. > 7
    1c4e:	eb e7       	ldi	r30, 0x7B	; 123
    1c50:	f0 e0       	ldi	r31, 0x00	; 0
    1c52:	88 e0       	ldi	r24, 0x08	; 8
    1c54:	80 83       	st	Z, r24
	}
	Ch = Ch & 0x07;  			
    1c56:	8a 81       	ldd	r24, Y+2	; 0x02
    1c58:	87 70       	andi	r24, 0x07	; 7
    1c5a:	8a 83       	std	Y+2, r24	; 0x02
	ADMUX= 0x20| Ch;	   		//do not disturb the left adjustment
    1c5c:	ec e7       	ldi	r30, 0x7C	; 124
    1c5e:	f0 e0       	ldi	r31, 0x00	; 0
    1c60:	8a 81       	ldd	r24, Y+2	; 0x02
    1c62:	80 62       	ori	r24, 0x20	; 32
    1c64:	80 83       	st	Z, r24
	ADCSRA = ADCSRA | 0x40;		//Set start conversion bit
    1c66:	aa e7       	ldi	r26, 0x7A	; 122
    1c68:	b0 e0       	ldi	r27, 0x00	; 0
    1c6a:	ea e7       	ldi	r30, 0x7A	; 122
    1c6c:	f0 e0       	ldi	r31, 0x00	; 0
    1c6e:	80 81       	ld	r24, Z
    1c70:	80 64       	ori	r24, 0x40	; 64
    1c72:	8c 93       	st	X, r24
	while((ADCSRA&0x10)==0);	//Wait for ADC conversion to complete
    1c74:	ea e7       	ldi	r30, 0x7A	; 122
    1c76:	f0 e0       	ldi	r31, 0x00	; 0
    1c78:	80 81       	ld	r24, Z
    1c7a:	88 2f       	mov	r24, r24
    1c7c:	90 e0       	ldi	r25, 0x00	; 0
    1c7e:	80 71       	andi	r24, 0x10	; 16
    1c80:	90 70       	andi	r25, 0x00	; 0
    1c82:	00 97       	sbiw	r24, 0x00	; 0
    1c84:	b9 f3       	breq	.-18     	; 0x1c74 <ADC_Conversion+0x3a>
	a=ADCH;
    1c86:	e9 e7       	ldi	r30, 0x79	; 121
    1c88:	f0 e0       	ldi	r31, 0x00	; 0
    1c8a:	80 81       	ld	r24, Z
    1c8c:	89 83       	std	Y+1, r24	; 0x01
	ADCSRA = ADCSRA|0x10; 		//clear ADIF (ADC Interrupt Flag) by writing 1 to it
    1c8e:	aa e7       	ldi	r26, 0x7A	; 122
    1c90:	b0 e0       	ldi	r27, 0x00	; 0
    1c92:	ea e7       	ldi	r30, 0x7A	; 122
    1c94:	f0 e0       	ldi	r31, 0x00	; 0
    1c96:	80 81       	ld	r24, Z
    1c98:	80 61       	ori	r24, 0x10	; 16
    1c9a:	8c 93       	st	X, r24
	ADCSRB = 0x00;
    1c9c:	eb e7       	ldi	r30, 0x7B	; 123
    1c9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ca0:	10 82       	st	Z, r1
	return a;
    1ca2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ca4:	0f 90       	pop	r0
    1ca6:	0f 90       	pop	r0
    1ca8:	cf 91       	pop	r28
    1caa:	df 91       	pop	r29
    1cac:	08 95       	ret

00001cae <Sharp_GP2D12_estimation>:
	
unsigned int Sharp_GP2D12_estimation(unsigned char adc_reading)
{
    1cae:	df 93       	push	r29
    1cb0:	cf 93       	push	r28
    1cb2:	cd b7       	in	r28, 0x3d	; 61
    1cb4:	de b7       	in	r29, 0x3e	; 62
    1cb6:	27 97       	sbiw	r28, 0x07	; 7
    1cb8:	0f b6       	in	r0, 0x3f	; 63
    1cba:	f8 94       	cli
    1cbc:	de bf       	out	0x3e, r29	; 62
    1cbe:	0f be       	out	0x3f, r0	; 63
    1cc0:	cd bf       	out	0x3d, r28	; 61
    1cc2:	8f 83       	std	Y+7, r24	; 0x07
	float distance;
	unsigned int distanceInt;
	distance = (int)(10.00*(2799.6*(1.00/(pow(adc_reading,1.1546)))));
    1cc4:	8f 81       	ldd	r24, Y+7	; 0x07
    1cc6:	88 2f       	mov	r24, r24
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	a0 e0       	ldi	r26, 0x00	; 0
    1ccc:	b0 e0       	ldi	r27, 0x00	; 0
    1cce:	bc 01       	movw	r22, r24
    1cd0:	cd 01       	movw	r24, r26
    1cd2:	0e 94 d6 1e 	call	0x3dac	; 0x3dac <__floatunsisf>
    1cd6:	dc 01       	movw	r26, r24
    1cd8:	cb 01       	movw	r24, r22
    1cda:	bc 01       	movw	r22, r24
    1cdc:	cd 01       	movw	r24, r26
    1cde:	2f ee       	ldi	r18, 0xEF	; 239
    1ce0:	39 ec       	ldi	r19, 0xC9	; 201
    1ce2:	43 e9       	ldi	r20, 0x93	; 147
    1ce4:	5f e3       	ldi	r21, 0x3F	; 63
    1ce6:	0e 94 8f 21 	call	0x431e	; 0x431e <pow>
    1cea:	dc 01       	movw	r26, r24
    1cec:	cb 01       	movw	r24, r22
    1cee:	9c 01       	movw	r18, r24
    1cf0:	ad 01       	movw	r20, r26
    1cf2:	60 e0       	ldi	r22, 0x00	; 0
    1cf4:	70 e0       	ldi	r23, 0x00	; 0
    1cf6:	80 e8       	ldi	r24, 0x80	; 128
    1cf8:	9f e3       	ldi	r25, 0x3F	; 63
    1cfa:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <__divsf3>
    1cfe:	dc 01       	movw	r26, r24
    1d00:	cb 01       	movw	r24, r22
    1d02:	bc 01       	movw	r22, r24
    1d04:	cd 01       	movw	r24, r26
    1d06:	2a e9       	ldi	r18, 0x9A	; 154
    1d08:	39 ef       	ldi	r19, 0xF9	; 249
    1d0a:	4e e2       	ldi	r20, 0x2E	; 46
    1d0c:	55 e4       	ldi	r21, 0x45	; 69
    1d0e:	0e 94 ee 1b 	call	0x37dc	; 0x37dc <__mulsf3>
    1d12:	dc 01       	movw	r26, r24
    1d14:	cb 01       	movw	r24, r22
    1d16:	bc 01       	movw	r22, r24
    1d18:	cd 01       	movw	r24, r26
    1d1a:	20 e0       	ldi	r18, 0x00	; 0
    1d1c:	30 e0       	ldi	r19, 0x00	; 0
    1d1e:	40 e2       	ldi	r20, 0x20	; 32
    1d20:	51 e4       	ldi	r21, 0x41	; 65
    1d22:	0e 94 ee 1b 	call	0x37dc	; 0x37dc <__mulsf3>
    1d26:	dc 01       	movw	r26, r24
    1d28:	cb 01       	movw	r24, r22
    1d2a:	bc 01       	movw	r22, r24
    1d2c:	cd 01       	movw	r24, r26
    1d2e:	0e 94 82 1e 	call	0x3d04	; 0x3d04 <__fixsfsi>
    1d32:	dc 01       	movw	r26, r24
    1d34:	cb 01       	movw	r24, r22
    1d36:	aa 27       	eor	r26, r26
    1d38:	97 fd       	sbrc	r25, 7
    1d3a:	a0 95       	com	r26
    1d3c:	ba 2f       	mov	r27, r26
    1d3e:	bc 01       	movw	r22, r24
    1d40:	cd 01       	movw	r24, r26
    1d42:	0e 94 24 1e 	call	0x3c48	; 0x3c48 <__floatsisf>
    1d46:	dc 01       	movw	r26, r24
    1d48:	cb 01       	movw	r24, r22
    1d4a:	8b 83       	std	Y+3, r24	; 0x03
    1d4c:	9c 83       	std	Y+4, r25	; 0x04
    1d4e:	ad 83       	std	Y+5, r26	; 0x05
    1d50:	be 83       	std	Y+6, r27	; 0x06
	distanceInt = (int)distance;
    1d52:	6b 81       	ldd	r22, Y+3	; 0x03
    1d54:	7c 81       	ldd	r23, Y+4	; 0x04
    1d56:	8d 81       	ldd	r24, Y+5	; 0x05
    1d58:	9e 81       	ldd	r25, Y+6	; 0x06
    1d5a:	0e 94 82 1e 	call	0x3d04	; 0x3d04 <__fixsfsi>
    1d5e:	dc 01       	movw	r26, r24
    1d60:	cb 01       	movw	r24, r22
    1d62:	9a 83       	std	Y+2, r25	; 0x02
    1d64:	89 83       	std	Y+1, r24	; 0x01
	if(distanceInt>800)
    1d66:	89 81       	ldd	r24, Y+1	; 0x01
    1d68:	9a 81       	ldd	r25, Y+2	; 0x02
    1d6a:	23 e0       	ldi	r18, 0x03	; 3
    1d6c:	81 32       	cpi	r24, 0x21	; 33
    1d6e:	92 07       	cpc	r25, r18
    1d70:	20 f0       	brcs	.+8      	; 0x1d7a <Sharp_GP2D12_estimation+0xcc>
	{
		distanceInt=800;
    1d72:	80 e2       	ldi	r24, 0x20	; 32
    1d74:	93 e0       	ldi	r25, 0x03	; 3
    1d76:	9a 83       	std	Y+2, r25	; 0x02
    1d78:	89 83       	std	Y+1, r24	; 0x01
	}
	return distanceInt;
    1d7a:	89 81       	ldd	r24, Y+1	; 0x01
    1d7c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1d7e:	27 96       	adiw	r28, 0x07	; 7
    1d80:	0f b6       	in	r0, 0x3f	; 63
    1d82:	f8 94       	cli
    1d84:	de bf       	out	0x3e, r29	; 62
    1d86:	0f be       	out	0x3f, r0	; 63
    1d88:	cd bf       	out	0x3d, r28	; 61
    1d8a:	cf 91       	pop	r28
    1d8c:	df 91       	pop	r29
    1d8e:	08 95       	ret

00001d90 <servo1_pin_config>:


// Servo motor control codes

void servo1_pin_config (void)
{
    1d90:	df 93       	push	r29
    1d92:	cf 93       	push	r28
    1d94:	cd b7       	in	r28, 0x3d	; 61
    1d96:	de b7       	in	r29, 0x3e	; 62
 	DDRB  = DDRB | 0x20;  		//making PORTB 5 pin output
    1d98:	a4 e2       	ldi	r26, 0x24	; 36
    1d9a:	b0 e0       	ldi	r27, 0x00	; 0
    1d9c:	e4 e2       	ldi	r30, 0x24	; 36
    1d9e:	f0 e0       	ldi	r31, 0x00	; 0
    1da0:	80 81       	ld	r24, Z
    1da2:	80 62       	ori	r24, 0x20	; 32
    1da4:	8c 93       	st	X, r24
 	PORTB = PORTB | 0x20; 		//setting PORTB 5 pin to logic 1
    1da6:	a5 e2       	ldi	r26, 0x25	; 37
    1da8:	b0 e0       	ldi	r27, 0x00	; 0
    1daa:	e5 e2       	ldi	r30, 0x25	; 37
    1dac:	f0 e0       	ldi	r31, 0x00	; 0
    1dae:	80 81       	ld	r24, Z
    1db0:	80 62       	ori	r24, 0x20	; 32
    1db2:	8c 93       	st	X, r24
}
    1db4:	cf 91       	pop	r28
    1db6:	df 91       	pop	r29
    1db8:	08 95       	ret

00001dba <servo2_pin_config>:

//Configure PORTB 6 pin for servo motor 2 operation
void servo2_pin_config (void)
{
    1dba:	df 93       	push	r29
    1dbc:	cf 93       	push	r28
    1dbe:	cd b7       	in	r28, 0x3d	; 61
    1dc0:	de b7       	in	r29, 0x3e	; 62
 	DDRB  = DDRB | 0x40;  		//making PORTB 6 pin output
    1dc2:	a4 e2       	ldi	r26, 0x24	; 36
    1dc4:	b0 e0       	ldi	r27, 0x00	; 0
    1dc6:	e4 e2       	ldi	r30, 0x24	; 36
    1dc8:	f0 e0       	ldi	r31, 0x00	; 0
    1dca:	80 81       	ld	r24, Z
    1dcc:	80 64       	ori	r24, 0x40	; 64
    1dce:	8c 93       	st	X, r24
 	PORTB = PORTB | 0x40; 		//setting PORTB 6 pin to logic 1
    1dd0:	a5 e2       	ldi	r26, 0x25	; 37
    1dd2:	b0 e0       	ldi	r27, 0x00	; 0
    1dd4:	e5 e2       	ldi	r30, 0x25	; 37
    1dd6:	f0 e0       	ldi	r31, 0x00	; 0
    1dd8:	80 81       	ld	r24, Z
    1dda:	80 64       	ori	r24, 0x40	; 64
    1ddc:	8c 93       	st	X, r24
}
    1dde:	cf 91       	pop	r28
    1de0:	df 91       	pop	r29
    1de2:	08 95       	ret

00001de4 <servo3_pin_config>:



//Configure PORTB 7 pin for servo motor 3 operation
void servo3_pin_config (void)
{
    1de4:	df 93       	push	r29
    1de6:	cf 93       	push	r28
    1de8:	cd b7       	in	r28, 0x3d	; 61
    1dea:	de b7       	in	r29, 0x3e	; 62
 	DDRB  = DDRB | 0x80;  		//making PORTB 7 pin output
    1dec:	a4 e2       	ldi	r26, 0x24	; 36
    1dee:	b0 e0       	ldi	r27, 0x00	; 0
    1df0:	e4 e2       	ldi	r30, 0x24	; 36
    1df2:	f0 e0       	ldi	r31, 0x00	; 0
    1df4:	80 81       	ld	r24, Z
    1df6:	80 68       	ori	r24, 0x80	; 128
    1df8:	8c 93       	st	X, r24
 	PORTB = PORTB | 0x80; 		//setting PORTB 7 pin to logic 1
    1dfa:	a5 e2       	ldi	r26, 0x25	; 37
    1dfc:	b0 e0       	ldi	r27, 0x00	; 0
    1dfe:	e5 e2       	ldi	r30, 0x25	; 37
    1e00:	f0 e0       	ldi	r31, 0x00	; 0
    1e02:	80 81       	ld	r24, Z
    1e04:	80 68       	ori	r24, 0x80	; 128
    1e06:	8c 93       	st	X, r24
}
    1e08:	cf 91       	pop	r28
    1e0a:	df 91       	pop	r29
    1e0c:	08 95       	ret

00001e0e <port_init_servo>:

//Initialize the ports
void port_init_servo(void)
{ 
    1e0e:	df 93       	push	r29
    1e10:	cf 93       	push	r28
    1e12:	cd b7       	in	r28, 0x3d	; 61
    1e14:	de b7       	in	r29, 0x3e	; 62
	servo1_pin_config(); 		//Configure PORTB 5 pin for servo motor 1 operation
    1e16:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <servo1_pin_config>
 	servo2_pin_config(); 		//Configure PORTB 6 pin for servo motor 2 operation 
    1e1a:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <servo2_pin_config>
 	servo3_pin_config(); 		//Configure PORTB 7 pin for servo motor 3 operation  
    1e1e:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <servo3_pin_config>
}
    1e22:	cf 91       	pop	r28
    1e24:	df 91       	pop	r29
    1e26:	08 95       	ret

00001e28 <timer1_init>:
//TIMER1 initialization in 10 bit fast PWM mode  
//prescale:256
// WGM: 7) PWM 10bit fast, TOP=0x03FF
// actual value: 42.187Hz 
void timer1_init(void)
{
    1e28:	df 93       	push	r29
    1e2a:	cf 93       	push	r28
    1e2c:	cd b7       	in	r28, 0x3d	; 61
    1e2e:	de b7       	in	r29, 0x3e	; 62
 	TCCR1B = 0x00; 				//stop
    1e30:	e1 e8       	ldi	r30, 0x81	; 129
    1e32:	f0 e0       	ldi	r31, 0x00	; 0
    1e34:	10 82       	st	Z, r1
 	TCNT1H = 0xFC; 				//Counter high value to which OCR1xH value is to be compared with
    1e36:	e5 e8       	ldi	r30, 0x85	; 133
    1e38:	f0 e0       	ldi	r31, 0x00	; 0
    1e3a:	8c ef       	ldi	r24, 0xFC	; 252
    1e3c:	80 83       	st	Z, r24
 	TCNT1L = 0x01;				//Counter low value to which OCR1xH value is to be compared with
    1e3e:	e4 e8       	ldi	r30, 0x84	; 132
    1e40:	f0 e0       	ldi	r31, 0x00	; 0
    1e42:	81 e0       	ldi	r24, 0x01	; 1
    1e44:	80 83       	st	Z, r24
 	OCR1AH = 0x03;				//Output compare eegister high value for servo 1
    1e46:	e9 e8       	ldi	r30, 0x89	; 137
    1e48:	f0 e0       	ldi	r31, 0x00	; 0
    1e4a:	83 e0       	ldi	r24, 0x03	; 3
    1e4c:	80 83       	st	Z, r24
 	OCR1AL = 0xFF;				//Output Compare Register low Value For servo 1
    1e4e:	e8 e8       	ldi	r30, 0x88	; 136
    1e50:	f0 e0       	ldi	r31, 0x00	; 0
    1e52:	8f ef       	ldi	r24, 0xFF	; 255
    1e54:	80 83       	st	Z, r24
 	OCR1BH = 0x03;				//Output compare eegister high value for servo 2
    1e56:	eb e8       	ldi	r30, 0x8B	; 139
    1e58:	f0 e0       	ldi	r31, 0x00	; 0
    1e5a:	83 e0       	ldi	r24, 0x03	; 3
    1e5c:	80 83       	st	Z, r24
 	OCR1BL = 0xFF;				//Output Compare Register low Value For servo 2
    1e5e:	ea e8       	ldi	r30, 0x8A	; 138
    1e60:	f0 e0       	ldi	r31, 0x00	; 0
    1e62:	8f ef       	ldi	r24, 0xFF	; 255
    1e64:	80 83       	st	Z, r24
 	OCR1CH = 0x03;				///Output compare eegister high value for servo 3
    1e66:	ed e8       	ldi	r30, 0x8D	; 141
    1e68:	f0 e0       	ldi	r31, 0x00	; 0
    1e6a:	83 e0       	ldi	r24, 0x03	; 3
    1e6c:	80 83       	st	Z, r24
 	OCR1CL = 0xFF;				//Output Compare Register low Value For servo 3
    1e6e:	ec e8       	ldi	r30, 0x8C	; 140
    1e70:	f0 e0       	ldi	r31, 0x00	; 0
    1e72:	8f ef       	ldi	r24, 0xFF	; 255
    1e74:	80 83       	st	Z, r24
 	ICR1H  = 0x03;	
    1e76:	e7 e8       	ldi	r30, 0x87	; 135
    1e78:	f0 e0       	ldi	r31, 0x00	; 0
    1e7a:	83 e0       	ldi	r24, 0x03	; 3
    1e7c:	80 83       	st	Z, r24
 	ICR1L  = 0xFF;
    1e7e:	e6 e8       	ldi	r30, 0x86	; 134
    1e80:	f0 e0       	ldi	r31, 0x00	; 0
    1e82:	8f ef       	ldi	r24, 0xFF	; 255
    1e84:	80 83       	st	Z, r24
 	TCCR1A = 0xAB; 				/*{COM1A1=1, COM1A0=0; COM1B1=1, COM1B0=0; COM1C1=1 COM1C0=0}
    1e86:	e0 e8       	ldi	r30, 0x80	; 128
    1e88:	f0 e0       	ldi	r31, 0x00	; 0
    1e8a:	8b ea       	ldi	r24, 0xAB	; 171
    1e8c:	80 83       	st	Z, r24
 									For Overriding normal port functionalit to OCRnA outputs.
				  				{WGM11=1, WGM10=1} Along With WGM12 in TCCR1B for Selecting FAST PWM Mode*/
 	TCCR1C = 0x00;
    1e8e:	e2 e8       	ldi	r30, 0x82	; 130
    1e90:	f0 e0       	ldi	r31, 0x00	; 0
    1e92:	10 82       	st	Z, r1
 	TCCR1B = 0x0C; 				//WGM12=1; CS12=1, CS11=0, CS10=0 (Prescaler=256)
    1e94:	e1 e8       	ldi	r30, 0x81	; 129
    1e96:	f0 e0       	ldi	r31, 0x00	; 0
    1e98:	8c e0       	ldi	r24, 0x0C	; 12
    1e9a:	80 83       	st	Z, r24
}
    1e9c:	cf 91       	pop	r28
    1e9e:	df 91       	pop	r29
    1ea0:	08 95       	ret

00001ea2 <init_devices_servo>:


//Function to initialize all the peripherals
void init_devices_servo(void)
{
    1ea2:	df 93       	push	r29
    1ea4:	cf 93       	push	r28
    1ea6:	cd b7       	in	r28, 0x3d	; 61
    1ea8:	de b7       	in	r29, 0x3e	; 62
 	cli(); 						//disable all interrupts
    1eaa:	f8 94       	cli
 	port_init_servo();
    1eac:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <port_init_servo>
 	timer1_init();
    1eb0:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <timer1_init>
 	sei(); 						//re-enable interrupts 
    1eb4:	78 94       	sei
}
    1eb6:	cf 91       	pop	r28
    1eb8:	df 91       	pop	r29
    1eba:	08 95       	ret

00001ebc <servo_1>:


//Function to rotate Servo 1 by a specified angle in the multiples of 2.25 degrees
void servo_1(unsigned char degrees)  
{
    1ebc:	0f 93       	push	r16
    1ebe:	1f 93       	push	r17
    1ec0:	df 93       	push	r29
    1ec2:	cf 93       	push	r28
    1ec4:	00 d0       	rcall	.+0      	; 0x1ec6 <servo_1+0xa>
    1ec6:	0f 92       	push	r0
    1ec8:	0f 92       	push	r0
    1eca:	cd b7       	in	r28, 0x3d	; 61
    1ecc:	de b7       	in	r29, 0x3e	; 62
    1ece:	8d 83       	std	Y+5, r24	; 0x05
 	float PositionPanServo = 0;
    1ed0:	80 e0       	ldi	r24, 0x00	; 0
    1ed2:	90 e0       	ldi	r25, 0x00	; 0
    1ed4:	a0 e0       	ldi	r26, 0x00	; 0
    1ed6:	b0 e0       	ldi	r27, 0x00	; 0
    1ed8:	89 83       	std	Y+1, r24	; 0x01
    1eda:	9a 83       	std	Y+2, r25	; 0x02
    1edc:	ab 83       	std	Y+3, r26	; 0x03
    1ede:	bc 83       	std	Y+4, r27	; 0x04
 	PositionPanServo = ((float)degrees / 2.25) + 21.0;
    1ee0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ee2:	88 2f       	mov	r24, r24
    1ee4:	90 e0       	ldi	r25, 0x00	; 0
    1ee6:	a0 e0       	ldi	r26, 0x00	; 0
    1ee8:	b0 e0       	ldi	r27, 0x00	; 0
    1eea:	bc 01       	movw	r22, r24
    1eec:	cd 01       	movw	r24, r26
    1eee:	0e 94 d6 1e 	call	0x3dac	; 0x3dac <__floatunsisf>
    1ef2:	dc 01       	movw	r26, r24
    1ef4:	cb 01       	movw	r24, r22
    1ef6:	bc 01       	movw	r22, r24
    1ef8:	cd 01       	movw	r24, r26
    1efa:	20 e0       	ldi	r18, 0x00	; 0
    1efc:	30 e0       	ldi	r19, 0x00	; 0
    1efe:	40 e1       	ldi	r20, 0x10	; 16
    1f00:	50 e4       	ldi	r21, 0x40	; 64
    1f02:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <__divsf3>
    1f06:	dc 01       	movw	r26, r24
    1f08:	cb 01       	movw	r24, r22
    1f0a:	bc 01       	movw	r22, r24
    1f0c:	cd 01       	movw	r24, r26
    1f0e:	20 e0       	ldi	r18, 0x00	; 0
    1f10:	30 e0       	ldi	r19, 0x00	; 0
    1f12:	48 ea       	ldi	r20, 0xA8	; 168
    1f14:	51 e4       	ldi	r21, 0x41	; 65
    1f16:	0e 94 c1 1b 	call	0x3782	; 0x3782 <__addsf3>
    1f1a:	dc 01       	movw	r26, r24
    1f1c:	cb 01       	movw	r24, r22
    1f1e:	89 83       	std	Y+1, r24	; 0x01
    1f20:	9a 83       	std	Y+2, r25	; 0x02
    1f22:	ab 83       	std	Y+3, r26	; 0x03
    1f24:	bc 83       	std	Y+4, r27	; 0x04
 	OCR1AH = 0x00;
    1f26:	e9 e8       	ldi	r30, 0x89	; 137
    1f28:	f0 e0       	ldi	r31, 0x00	; 0
    1f2a:	10 82       	st	Z, r1
 	OCR1AL = (unsigned char) PositionPanServo;
    1f2c:	08 e8       	ldi	r16, 0x88	; 136
    1f2e:	10 e0       	ldi	r17, 0x00	; 0
    1f30:	69 81       	ldd	r22, Y+1	; 0x01
    1f32:	7a 81       	ldd	r23, Y+2	; 0x02
    1f34:	8b 81       	ldd	r24, Y+3	; 0x03
    1f36:	9c 81       	ldd	r25, Y+4	; 0x04
    1f38:	0e 94 18 1a 	call	0x3430	; 0x3430 <__fixunssfsi>
    1f3c:	dc 01       	movw	r26, r24
    1f3e:	cb 01       	movw	r24, r22
    1f40:	f8 01       	movw	r30, r16
    1f42:	80 83       	st	Z, r24
}
    1f44:	0f 90       	pop	r0
    1f46:	0f 90       	pop	r0
    1f48:	0f 90       	pop	r0
    1f4a:	0f 90       	pop	r0
    1f4c:	0f 90       	pop	r0
    1f4e:	cf 91       	pop	r28
    1f50:	df 91       	pop	r29
    1f52:	1f 91       	pop	r17
    1f54:	0f 91       	pop	r16
    1f56:	08 95       	ret

00001f58 <servo_2>:


//Function to rotate Servo 2 by a specified angle in the multiples of 2.25 degrees
void servo_2(unsigned char degrees)
{
    1f58:	0f 93       	push	r16
    1f5a:	1f 93       	push	r17
    1f5c:	df 93       	push	r29
    1f5e:	cf 93       	push	r28
    1f60:	00 d0       	rcall	.+0      	; 0x1f62 <servo_2+0xa>
    1f62:	0f 92       	push	r0
    1f64:	0f 92       	push	r0
    1f66:	cd b7       	in	r28, 0x3d	; 61
    1f68:	de b7       	in	r29, 0x3e	; 62
    1f6a:	8d 83       	std	Y+5, r24	; 0x05
 	float PositionTiltServo = 0;
    1f6c:	80 e0       	ldi	r24, 0x00	; 0
    1f6e:	90 e0       	ldi	r25, 0x00	; 0
    1f70:	a0 e0       	ldi	r26, 0x00	; 0
    1f72:	b0 e0       	ldi	r27, 0x00	; 0
    1f74:	89 83       	std	Y+1, r24	; 0x01
    1f76:	9a 83       	std	Y+2, r25	; 0x02
    1f78:	ab 83       	std	Y+3, r26	; 0x03
    1f7a:	bc 83       	std	Y+4, r27	; 0x04
 	PositionTiltServo = ((float)degrees / 2.25) + 21.0;
    1f7c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f7e:	88 2f       	mov	r24, r24
    1f80:	90 e0       	ldi	r25, 0x00	; 0
    1f82:	a0 e0       	ldi	r26, 0x00	; 0
    1f84:	b0 e0       	ldi	r27, 0x00	; 0
    1f86:	bc 01       	movw	r22, r24
    1f88:	cd 01       	movw	r24, r26
    1f8a:	0e 94 d6 1e 	call	0x3dac	; 0x3dac <__floatunsisf>
    1f8e:	dc 01       	movw	r26, r24
    1f90:	cb 01       	movw	r24, r22
    1f92:	bc 01       	movw	r22, r24
    1f94:	cd 01       	movw	r24, r26
    1f96:	20 e0       	ldi	r18, 0x00	; 0
    1f98:	30 e0       	ldi	r19, 0x00	; 0
    1f9a:	40 e1       	ldi	r20, 0x10	; 16
    1f9c:	50 e4       	ldi	r21, 0x40	; 64
    1f9e:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <__divsf3>
    1fa2:	dc 01       	movw	r26, r24
    1fa4:	cb 01       	movw	r24, r22
    1fa6:	bc 01       	movw	r22, r24
    1fa8:	cd 01       	movw	r24, r26
    1faa:	20 e0       	ldi	r18, 0x00	; 0
    1fac:	30 e0       	ldi	r19, 0x00	; 0
    1fae:	48 ea       	ldi	r20, 0xA8	; 168
    1fb0:	51 e4       	ldi	r21, 0x41	; 65
    1fb2:	0e 94 c1 1b 	call	0x3782	; 0x3782 <__addsf3>
    1fb6:	dc 01       	movw	r26, r24
    1fb8:	cb 01       	movw	r24, r22
    1fba:	89 83       	std	Y+1, r24	; 0x01
    1fbc:	9a 83       	std	Y+2, r25	; 0x02
    1fbe:	ab 83       	std	Y+3, r26	; 0x03
    1fc0:	bc 83       	std	Y+4, r27	; 0x04
 	OCR1BH = 0x00;
    1fc2:	eb e8       	ldi	r30, 0x8B	; 139
    1fc4:	f0 e0       	ldi	r31, 0x00	; 0
    1fc6:	10 82       	st	Z, r1
 	OCR1BL = (unsigned char) PositionTiltServo;
    1fc8:	0a e8       	ldi	r16, 0x8A	; 138
    1fca:	10 e0       	ldi	r17, 0x00	; 0
    1fcc:	69 81       	ldd	r22, Y+1	; 0x01
    1fce:	7a 81       	ldd	r23, Y+2	; 0x02
    1fd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd2:	9c 81       	ldd	r25, Y+4	; 0x04
    1fd4:	0e 94 18 1a 	call	0x3430	; 0x3430 <__fixunssfsi>
    1fd8:	dc 01       	movw	r26, r24
    1fda:	cb 01       	movw	r24, r22
    1fdc:	f8 01       	movw	r30, r16
    1fde:	80 83       	st	Z, r24
}
    1fe0:	0f 90       	pop	r0
    1fe2:	0f 90       	pop	r0
    1fe4:	0f 90       	pop	r0
    1fe6:	0f 90       	pop	r0
    1fe8:	0f 90       	pop	r0
    1fea:	cf 91       	pop	r28
    1fec:	df 91       	pop	r29
    1fee:	1f 91       	pop	r17
    1ff0:	0f 91       	pop	r16
    1ff2:	08 95       	ret

00001ff4 <servo_3>:


//Function to rotate Servo 3 by a specified angle in the multiples of 2.25 degrees
void servo_3(unsigned char degrees)
{
    1ff4:	0f 93       	push	r16
    1ff6:	1f 93       	push	r17
    1ff8:	df 93       	push	r29
    1ffa:	cf 93       	push	r28
    1ffc:	00 d0       	rcall	.+0      	; 0x1ffe <servo_3+0xa>
    1ffe:	0f 92       	push	r0
    2000:	0f 92       	push	r0
    2002:	cd b7       	in	r28, 0x3d	; 61
    2004:	de b7       	in	r29, 0x3e	; 62
    2006:	8d 83       	std	Y+5, r24	; 0x05
 	float PositionTiltServo = 0;
    2008:	80 e0       	ldi	r24, 0x00	; 0
    200a:	90 e0       	ldi	r25, 0x00	; 0
    200c:	a0 e0       	ldi	r26, 0x00	; 0
    200e:	b0 e0       	ldi	r27, 0x00	; 0
    2010:	89 83       	std	Y+1, r24	; 0x01
    2012:	9a 83       	std	Y+2, r25	; 0x02
    2014:	ab 83       	std	Y+3, r26	; 0x03
    2016:	bc 83       	std	Y+4, r27	; 0x04
 	PositionTiltServo = ((float)degrees / 2.25) + 21.0;
    2018:	8d 81       	ldd	r24, Y+5	; 0x05
    201a:	88 2f       	mov	r24, r24
    201c:	90 e0       	ldi	r25, 0x00	; 0
    201e:	a0 e0       	ldi	r26, 0x00	; 0
    2020:	b0 e0       	ldi	r27, 0x00	; 0
    2022:	bc 01       	movw	r22, r24
    2024:	cd 01       	movw	r24, r26
    2026:	0e 94 d6 1e 	call	0x3dac	; 0x3dac <__floatunsisf>
    202a:	dc 01       	movw	r26, r24
    202c:	cb 01       	movw	r24, r22
    202e:	bc 01       	movw	r22, r24
    2030:	cd 01       	movw	r24, r26
    2032:	20 e0       	ldi	r18, 0x00	; 0
    2034:	30 e0       	ldi	r19, 0x00	; 0
    2036:	40 e1       	ldi	r20, 0x10	; 16
    2038:	50 e4       	ldi	r21, 0x40	; 64
    203a:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <__divsf3>
    203e:	dc 01       	movw	r26, r24
    2040:	cb 01       	movw	r24, r22
    2042:	bc 01       	movw	r22, r24
    2044:	cd 01       	movw	r24, r26
    2046:	20 e0       	ldi	r18, 0x00	; 0
    2048:	30 e0       	ldi	r19, 0x00	; 0
    204a:	48 ea       	ldi	r20, 0xA8	; 168
    204c:	51 e4       	ldi	r21, 0x41	; 65
    204e:	0e 94 c1 1b 	call	0x3782	; 0x3782 <__addsf3>
    2052:	dc 01       	movw	r26, r24
    2054:	cb 01       	movw	r24, r22
    2056:	89 83       	std	Y+1, r24	; 0x01
    2058:	9a 83       	std	Y+2, r25	; 0x02
    205a:	ab 83       	std	Y+3, r26	; 0x03
    205c:	bc 83       	std	Y+4, r27	; 0x04
 	OCR1CH = 0x00;
    205e:	ed e8       	ldi	r30, 0x8D	; 141
    2060:	f0 e0       	ldi	r31, 0x00	; 0
    2062:	10 82       	st	Z, r1
 	OCR1CL = (unsigned char) PositionTiltServo;
    2064:	0c e8       	ldi	r16, 0x8C	; 140
    2066:	10 e0       	ldi	r17, 0x00	; 0
    2068:	69 81       	ldd	r22, Y+1	; 0x01
    206a:	7a 81       	ldd	r23, Y+2	; 0x02
    206c:	8b 81       	ldd	r24, Y+3	; 0x03
    206e:	9c 81       	ldd	r25, Y+4	; 0x04
    2070:	0e 94 18 1a 	call	0x3430	; 0x3430 <__fixunssfsi>
    2074:	dc 01       	movw	r26, r24
    2076:	cb 01       	movw	r24, r22
    2078:	f8 01       	movw	r30, r16
    207a:	80 83       	st	Z, r24
}
    207c:	0f 90       	pop	r0
    207e:	0f 90       	pop	r0
    2080:	0f 90       	pop	r0
    2082:	0f 90       	pop	r0
    2084:	0f 90       	pop	r0
    2086:	cf 91       	pop	r28
    2088:	df 91       	pop	r29
    208a:	1f 91       	pop	r17
    208c:	0f 91       	pop	r16
    208e:	08 95       	ret

00002090 <servo_1_free>:
//servo_free functions unlocks the servo motors from the any angle 
//and make them free by giving 100% duty cycle at the PWM. This function can be used to 
//reduce the power consumption of the motor if it is holding load against the gravity.

void servo_1_free (void) 	//makes servo 1 free rotating
{
    2090:	df 93       	push	r29
    2092:	cf 93       	push	r28
    2094:	cd b7       	in	r28, 0x3d	; 61
    2096:	de b7       	in	r29, 0x3e	; 62
 	OCR1AH = 0x03; 
    2098:	e9 e8       	ldi	r30, 0x89	; 137
    209a:	f0 e0       	ldi	r31, 0x00	; 0
    209c:	83 e0       	ldi	r24, 0x03	; 3
    209e:	80 83       	st	Z, r24
 	OCR1AL = 0xFF; 			//Servo 1 off
    20a0:	e8 e8       	ldi	r30, 0x88	; 136
    20a2:	f0 e0       	ldi	r31, 0x00	; 0
    20a4:	8f ef       	ldi	r24, 0xFF	; 255
    20a6:	80 83       	st	Z, r24
}
    20a8:	cf 91       	pop	r28
    20aa:	df 91       	pop	r29
    20ac:	08 95       	ret

000020ae <servo_2_free>:

void servo_2_free (void) 	//makes servo 2 free rotating
{
    20ae:	df 93       	push	r29
    20b0:	cf 93       	push	r28
    20b2:	cd b7       	in	r28, 0x3d	; 61
    20b4:	de b7       	in	r29, 0x3e	; 62
 	OCR1BH = 0x03;
    20b6:	eb e8       	ldi	r30, 0x8B	; 139
    20b8:	f0 e0       	ldi	r31, 0x00	; 0
    20ba:	83 e0       	ldi	r24, 0x03	; 3
    20bc:	80 83       	st	Z, r24
 	OCR1BL = 0xFF; 			//Servo 2 off
    20be:	ea e8       	ldi	r30, 0x8A	; 138
    20c0:	f0 e0       	ldi	r31, 0x00	; 0
    20c2:	8f ef       	ldi	r24, 0xFF	; 255
    20c4:	80 83       	st	Z, r24
}
    20c6:	cf 91       	pop	r28
    20c8:	df 91       	pop	r29
    20ca:	08 95       	ret

000020cc <servo_3_free>:

void servo_3_free (void) 	//makes servo 3 free rotating
{
    20cc:	df 93       	push	r29
    20ce:	cf 93       	push	r28
    20d0:	cd b7       	in	r28, 0x3d	; 61
    20d2:	de b7       	in	r29, 0x3e	; 62
 	OCR1CH = 0x03;
    20d4:	ed e8       	ldi	r30, 0x8D	; 141
    20d6:	f0 e0       	ldi	r31, 0x00	; 0
    20d8:	83 e0       	ldi	r24, 0x03	; 3
    20da:	80 83       	st	Z, r24
 	OCR1CL = 0xFF; 			//Servo 3 off
    20dc:	ec e8       	ldi	r30, 0x8C	; 140
    20de:	f0 e0       	ldi	r31, 0x00	; 0
    20e0:	8f ef       	ldi	r24, 0xFF	; 255
    20e2:	80 83       	st	Z, r24
} 
    20e4:	cf 91       	pop	r28
    20e6:	df 91       	pop	r29
    20e8:	08 95       	ret

000020ea <main>:


//Main function

void main()
{
    20ea:	0f 93       	push	r16
    20ec:	1f 93       	push	r17
    20ee:	df 93       	push	r29
    20f0:	cf 93       	push	r28
    20f2:	cd b7       	in	r28, 0x3d	; 61
    20f4:	de b7       	in	r29, 0x3e	; 62
    20f6:	c9 5b       	subi	r28, 0xB9	; 185
    20f8:	d0 40       	sbci	r29, 0x00	; 0
    20fa:	0f b6       	in	r0, 0x3f	; 63
    20fc:	f8 94       	cli
    20fe:	de bf       	out	0x3e, r29	; 62
    2100:	0f be       	out	0x3f, r0	; 63
    2102:	cd bf       	out	0x3d, r28	; 61
	unsigned int value,value1;
	int a=0,b=0;
    2104:	fe 01       	movw	r30, r28
    2106:	ec 54       	subi	r30, 0x4C	; 76
    2108:	ff 4f       	sbci	r31, 0xFF	; 255
    210a:	11 82       	std	Z+1, r1	; 0x01
    210c:	10 82       	st	Z, r1
    210e:	fe 01       	movw	r30, r28
    2110:	ee 54       	subi	r30, 0x4E	; 78
    2112:	ff 4f       	sbci	r31, 0xFF	; 255
    2114:	11 82       	std	Z+1, r1	; 0x01
    2116:	10 82       	st	Z, r1
	cli();
    2118:	f8 94       	cli
	INIT_PORTS();										//Initialize ports
    211a:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <INIT_PORTS>
	uart0_init();										//Initialize UART0 for xbee communication
    211e:	0e 94 b7 0a 	call	0x156e	; 0x156e <uart0_init>
	timer5_init();
    2122:	0e 94 04 0b 	call	0x1608	; 0x1608 <timer5_init>
	sei();
    2126:	78 94       	sei

	INIT_PORTS_ROTATE();								//Initialize ports 
    2128:	0e 94 99 0a 	call	0x1532	; 0x1532 <INIT_PORTS_ROTATE>
	right_position_encoder_interrupt_init();			//Initialize control registers for wheel
    212c:	0e 94 83 0b 	call	0x1706	; 0x1706 <right_position_encoder_interrupt_init>
	left_position_encoder_interrupt_init();				//           encoders.
    2130:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <left_position_encoder_interrupt_init>
			
	init_devices();
    2134:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <init_devices>
	lcd_set_4bit();										//LCD initialization functions.
    2138:	0e 94 d6 00 	call	0x1ac	; 0x1ac <lcd_set_4bit>
	lcd_init();
    213c:	0e 94 d5 05 	call	0xbaa	; 0xbaa <lcd_init>

	unsigned char angle = 0;
    2140:	fe 01       	movw	r30, r28
    2142:	ef 54       	subi	r30, 0x4F	; 79
    2144:	ff 4f       	sbci	r31, 0xFF	; 255
    2146:	10 82       	st	Z, r1
 	init_devices_servo();								//Initialize servo motors.
    2148:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <init_devices_servo>

	data='0';
    214c:	80 e3       	ldi	r24, 0x30	; 48
    214e:	80 93 1e 03 	sts	0x031E, r24
	sharp = ADC_Conversion(11);							//Stores the Analog value of front sharp connected to ADC channel 11 into variable "sharp"
    2152:	8b e0       	ldi	r24, 0x0B	; 11
    2154:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <ADC_Conversion>
    2158:	80 93 23 03 	sts	0x0323, r24
	value = Sharp_GP2D12_estimation(sharp);				//Stores Distance calsulated in a variable "value".
    215c:	80 91 23 03 	lds	r24, 0x0323
    2160:	0e 94 57 0e 	call	0x1cae	; 0x1cae <Sharp_GP2D12_estimation>
    2164:	fe 01       	movw	r30, r28
    2166:	e8 54       	subi	r30, 0x48	; 72
    2168:	ff 4f       	sbci	r31, 0xFF	; 255
    216a:	91 83       	std	Z+1, r25	; 0x01
    216c:	80 83       	st	Z, r24
	lcd_print(1,1,value,3);
    216e:	fe 01       	movw	r30, r28
    2170:	e8 54       	subi	r30, 0x48	; 72
    2172:	ff 4f       	sbci	r31, 0xFF	; 255
    2174:	20 81       	ld	r18, Z
    2176:	31 81       	ldd	r19, Z+1	; 0x01
    2178:	81 e0       	ldi	r24, 0x01	; 1
    217a:	61 e0       	ldi	r22, 0x01	; 1
    217c:	a9 01       	movw	r20, r18
    217e:	23 e0       	ldi	r18, 0x03	; 3
    2180:	30 e0       	ldi	r19, 0x00	; 0
    2182:	0e 94 86 09 	call	0x130c	; 0x130c <lcd_print>

	sharp1 = ADC_Conversion(10);						//Stores the Analog value of front sharp connected to ADC channel 11 into variable "sharp"
    2186:	8a e0       	ldi	r24, 0x0A	; 10
    2188:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <ADC_Conversion>
    218c:	80 93 1b 03 	sts	0x031B, r24
	value1 = Sharp_GP2D12_estimation(sharp1);			//Stores Distance calsulated in a variable "value".
    2190:	80 91 1b 03 	lds	r24, 0x031B
    2194:	0e 94 57 0e 	call	0x1cae	; 0x1cae <Sharp_GP2D12_estimation>
    2198:	fe 01       	movw	r30, r28
    219a:	ea 54       	subi	r30, 0x4A	; 74
    219c:	ff 4f       	sbci	r31, 0xFF	; 255
    219e:	91 83       	std	Z+1, r25	; 0x01
    21a0:	80 83       	st	Z, r24
	lcd_print(1,5,value1,3);
    21a2:	fe 01       	movw	r30, r28
    21a4:	ea 54       	subi	r30, 0x4A	; 74
    21a6:	ff 4f       	sbci	r31, 0xFF	; 255
    21a8:	20 81       	ld	r18, Z
    21aa:	31 81       	ldd	r19, Z+1	; 0x01
    21ac:	81 e0       	ldi	r24, 0x01	; 1
    21ae:	65 e0       	ldi	r22, 0x05	; 5
    21b0:	a9 01       	movw	r20, r18
    21b2:	23 e0       	ldi	r18, 0x03	; 3
    21b4:	30 e0       	ldi	r19, 0x00	; 0
    21b6:	0e 94 86 09 	call	0x130c	; 0x130c <lcd_print>
    21ba:	f1 c0       	rjmp	.+482    	; 0x239e <__stack+0x19f>
	{

			while(data=='0')
			{

				velocity(150,150); 							//If no ball is detected the rotate and scan
    21bc:	86 e9       	ldi	r24, 0x96	; 150
    21be:	66 e9       	ldi	r22, 0x96	; 150
    21c0:	0e 94 57 0b 	call	0x16ae	; 0x16ae <velocity>
				angle_rotate(3);							// for ball in the arena.
    21c4:	83 e0       	ldi	r24, 0x03	; 3
    21c6:	90 e0       	ldi	r25, 0x00	; 0
    21c8:	0e 94 9a 0b 	call	0x1734	; 0x1734 <angle_rotate>
				stop();
    21cc:	0e 94 42 0b 	call	0x1684	; 0x1684 <stop>
    21d0:	fe 01       	movw	r30, r28
    21d2:	eb 55       	subi	r30, 0x5B	; 91
    21d4:	ff 4f       	sbci	r31, 0xFF	; 255
    21d6:	80 e0       	ldi	r24, 0x00	; 0
    21d8:	90 e0       	ldi	r25, 0x00	; 0
    21da:	aa ef       	ldi	r26, 0xFA	; 250
    21dc:	b3 e4       	ldi	r27, 0x43	; 67
    21de:	80 83       	st	Z, r24
    21e0:	91 83       	std	Z+1, r25	; 0x01
    21e2:	a2 83       	std	Z+2, r26	; 0x02
    21e4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21e6:	8e 01       	movw	r16, r28
    21e8:	0f 55       	subi	r16, 0x5F	; 95
    21ea:	1f 4f       	sbci	r17, 0xFF	; 255
    21ec:	fe 01       	movw	r30, r28
    21ee:	eb 55       	subi	r30, 0x5B	; 91
    21f0:	ff 4f       	sbci	r31, 0xFF	; 255
    21f2:	60 81       	ld	r22, Z
    21f4:	71 81       	ldd	r23, Z+1	; 0x01
    21f6:	82 81       	ldd	r24, Z+2	; 0x02
    21f8:	93 81       	ldd	r25, Z+3	; 0x03
    21fa:	2d ec       	ldi	r18, 0xCD	; 205
    21fc:	3c ec       	ldi	r19, 0xCC	; 204
    21fe:	4c e2       	ldi	r20, 0x2C	; 44
    2200:	55 e4       	ldi	r21, 0x45	; 69
    2202:	0e 94 ee 1b 	call	0x37dc	; 0x37dc <__mulsf3>
    2206:	dc 01       	movw	r26, r24
    2208:	cb 01       	movw	r24, r22
    220a:	f8 01       	movw	r30, r16
    220c:	80 83       	st	Z, r24
    220e:	91 83       	std	Z+1, r25	; 0x01
    2210:	a2 83       	std	Z+2, r26	; 0x02
    2212:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2214:	fe 01       	movw	r30, r28
    2216:	ef 55       	subi	r30, 0x5F	; 95
    2218:	ff 4f       	sbci	r31, 0xFF	; 255
    221a:	60 81       	ld	r22, Z
    221c:	71 81       	ldd	r23, Z+1	; 0x01
    221e:	82 81       	ldd	r24, Z+2	; 0x02
    2220:	93 81       	ldd	r25, Z+3	; 0x03
    2222:	20 e0       	ldi	r18, 0x00	; 0
    2224:	30 e0       	ldi	r19, 0x00	; 0
    2226:	40 e8       	ldi	r20, 0x80	; 128
    2228:	5f e3       	ldi	r21, 0x3F	; 63
    222a:	0e 94 f4 1d 	call	0x3be8	; 0x3be8 <__ltsf2>
    222e:	88 23       	and	r24, r24
    2230:	44 f4       	brge	.+16     	; 0x2242 <__stack+0x43>
		__ticks = 1;
    2232:	fe 01       	movw	r30, r28
    2234:	e1 56       	subi	r30, 0x61	; 97
    2236:	ff 4f       	sbci	r31, 0xFF	; 255
    2238:	81 e0       	ldi	r24, 0x01	; 1
    223a:	90 e0       	ldi	r25, 0x00	; 0
    223c:	91 83       	std	Z+1, r25	; 0x01
    223e:	80 83       	st	Z, r24
    2240:	64 c0       	rjmp	.+200    	; 0x230a <__stack+0x10b>
	else if (__tmp > 65535)
    2242:	fe 01       	movw	r30, r28
    2244:	ef 55       	subi	r30, 0x5F	; 95
    2246:	ff 4f       	sbci	r31, 0xFF	; 255
    2248:	60 81       	ld	r22, Z
    224a:	71 81       	ldd	r23, Z+1	; 0x01
    224c:	82 81       	ldd	r24, Z+2	; 0x02
    224e:	93 81       	ldd	r25, Z+3	; 0x03
    2250:	20 e0       	ldi	r18, 0x00	; 0
    2252:	3f ef       	ldi	r19, 0xFF	; 255
    2254:	4f e7       	ldi	r20, 0x7F	; 127
    2256:	57 e4       	ldi	r21, 0x47	; 71
    2258:	0e 94 94 1d 	call	0x3b28	; 0x3b28 <__gtsf2>
    225c:	18 16       	cp	r1, r24
    225e:	0c f0       	brlt	.+2      	; 0x2262 <__stack+0x63>
    2260:	43 c0       	rjmp	.+134    	; 0x22e8 <__stack+0xe9>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2262:	fe 01       	movw	r30, r28
    2264:	eb 55       	subi	r30, 0x5B	; 91
    2266:	ff 4f       	sbci	r31, 0xFF	; 255
    2268:	60 81       	ld	r22, Z
    226a:	71 81       	ldd	r23, Z+1	; 0x01
    226c:	82 81       	ldd	r24, Z+2	; 0x02
    226e:	93 81       	ldd	r25, Z+3	; 0x03
    2270:	20 e0       	ldi	r18, 0x00	; 0
    2272:	30 e0       	ldi	r19, 0x00	; 0
    2274:	40 e2       	ldi	r20, 0x20	; 32
    2276:	51 e4       	ldi	r21, 0x41	; 65
    2278:	0e 94 ee 1b 	call	0x37dc	; 0x37dc <__mulsf3>
    227c:	dc 01       	movw	r26, r24
    227e:	cb 01       	movw	r24, r22
    2280:	8e 01       	movw	r16, r28
    2282:	01 56       	subi	r16, 0x61	; 97
    2284:	1f 4f       	sbci	r17, 0xFF	; 255
    2286:	bc 01       	movw	r22, r24
    2288:	cd 01       	movw	r24, r26
    228a:	0e 94 18 1a 	call	0x3430	; 0x3430 <__fixunssfsi>
    228e:	dc 01       	movw	r26, r24
    2290:	cb 01       	movw	r24, r22
    2292:	f8 01       	movw	r30, r16
    2294:	91 83       	std	Z+1, r25	; 0x01
    2296:	80 83       	st	Z, r24
    2298:	1f c0       	rjmp	.+62     	; 0x22d8 <__stack+0xd9>
    229a:	fe 01       	movw	r30, r28
    229c:	e3 56       	subi	r30, 0x63	; 99
    229e:	ff 4f       	sbci	r31, 0xFF	; 255
    22a0:	84 e1       	ldi	r24, 0x14	; 20
    22a2:	91 e0       	ldi	r25, 0x01	; 1
    22a4:	91 83       	std	Z+1, r25	; 0x01
    22a6:	80 83       	st	Z, r24
    22a8:	fe 01       	movw	r30, r28
    22aa:	e3 56       	subi	r30, 0x63	; 99
    22ac:	ff 4f       	sbci	r31, 0xFF	; 255
    22ae:	80 81       	ld	r24, Z
    22b0:	91 81       	ldd	r25, Z+1	; 0x01
    22b2:	01 97       	sbiw	r24, 0x01	; 1
    22b4:	f1 f7       	brne	.-4      	; 0x22b2 <__stack+0xb3>
    22b6:	fe 01       	movw	r30, r28
    22b8:	e3 56       	subi	r30, 0x63	; 99
    22ba:	ff 4f       	sbci	r31, 0xFF	; 255
    22bc:	91 83       	std	Z+1, r25	; 0x01
    22be:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22c0:	de 01       	movw	r26, r28
    22c2:	a1 56       	subi	r26, 0x61	; 97
    22c4:	bf 4f       	sbci	r27, 0xFF	; 255
    22c6:	fe 01       	movw	r30, r28
    22c8:	e1 56       	subi	r30, 0x61	; 97
    22ca:	ff 4f       	sbci	r31, 0xFF	; 255
    22cc:	80 81       	ld	r24, Z
    22ce:	91 81       	ldd	r25, Z+1	; 0x01
    22d0:	01 97       	sbiw	r24, 0x01	; 1
    22d2:	11 96       	adiw	r26, 0x01	; 1
    22d4:	9c 93       	st	X, r25
    22d6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22d8:	fe 01       	movw	r30, r28
    22da:	e1 56       	subi	r30, 0x61	; 97
    22dc:	ff 4f       	sbci	r31, 0xFF	; 255
    22de:	80 81       	ld	r24, Z
    22e0:	91 81       	ldd	r25, Z+1	; 0x01
    22e2:	00 97       	sbiw	r24, 0x00	; 0
    22e4:	d1 f6       	brne	.-76     	; 0x229a <__stack+0x9b>
    22e6:	27 c0       	rjmp	.+78     	; 0x2336 <__stack+0x137>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22e8:	8e 01       	movw	r16, r28
    22ea:	01 56       	subi	r16, 0x61	; 97
    22ec:	1f 4f       	sbci	r17, 0xFF	; 255
    22ee:	fe 01       	movw	r30, r28
    22f0:	ef 55       	subi	r30, 0x5F	; 95
    22f2:	ff 4f       	sbci	r31, 0xFF	; 255
    22f4:	60 81       	ld	r22, Z
    22f6:	71 81       	ldd	r23, Z+1	; 0x01
    22f8:	82 81       	ldd	r24, Z+2	; 0x02
    22fa:	93 81       	ldd	r25, Z+3	; 0x03
    22fc:	0e 94 18 1a 	call	0x3430	; 0x3430 <__fixunssfsi>
    2300:	dc 01       	movw	r26, r24
    2302:	cb 01       	movw	r24, r22
    2304:	f8 01       	movw	r30, r16
    2306:	91 83       	std	Z+1, r25	; 0x01
    2308:	80 83       	st	Z, r24
    230a:	de 01       	movw	r26, r28
    230c:	a5 56       	subi	r26, 0x65	; 101
    230e:	bf 4f       	sbci	r27, 0xFF	; 255
    2310:	fe 01       	movw	r30, r28
    2312:	e1 56       	subi	r30, 0x61	; 97
    2314:	ff 4f       	sbci	r31, 0xFF	; 255
    2316:	80 81       	ld	r24, Z
    2318:	91 81       	ldd	r25, Z+1	; 0x01
    231a:	8d 93       	st	X+, r24
    231c:	9c 93       	st	X, r25
    231e:	fe 01       	movw	r30, r28
    2320:	e5 56       	subi	r30, 0x65	; 101
    2322:	ff 4f       	sbci	r31, 0xFF	; 255
    2324:	80 81       	ld	r24, Z
    2326:	91 81       	ldd	r25, Z+1	; 0x01
    2328:	01 97       	sbiw	r24, 0x01	; 1
    232a:	f1 f7       	brne	.-4      	; 0x2328 <__stack+0x129>
    232c:	fe 01       	movw	r30, r28
    232e:	e5 56       	subi	r30, 0x65	; 101
    2330:	ff 4f       	sbci	r31, 0xFF	; 255
    2332:	91 83       	std	Z+1, r25	; 0x01
    2334:	80 83       	st	Z, r24
				_delay_ms(500);
				sharp = ADC_Conversion(11);					//Stores the Analog value of front sharp connected to ADC channel 11 into variable "sharp"
    2336:	8b e0       	ldi	r24, 0x0B	; 11
    2338:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <ADC_Conversion>
    233c:	80 93 23 03 	sts	0x0323, r24
				value = Sharp_GP2D12_estimation(sharp);		//Stores Distance calsulated in a variable "value".
    2340:	80 91 23 03 	lds	r24, 0x0323
    2344:	0e 94 57 0e 	call	0x1cae	; 0x1cae <Sharp_GP2D12_estimation>
    2348:	fe 01       	movw	r30, r28
    234a:	e8 54       	subi	r30, 0x48	; 72
    234c:	ff 4f       	sbci	r31, 0xFF	; 255
    234e:	91 83       	std	Z+1, r25	; 0x01
    2350:	80 83       	st	Z, r24
				lcd_print(1,1,value,3);
    2352:	fe 01       	movw	r30, r28
    2354:	e8 54       	subi	r30, 0x48	; 72
    2356:	ff 4f       	sbci	r31, 0xFF	; 255
    2358:	20 81       	ld	r18, Z
    235a:	31 81       	ldd	r19, Z+1	; 0x01
    235c:	81 e0       	ldi	r24, 0x01	; 1
    235e:	61 e0       	ldi	r22, 0x01	; 1
    2360:	a9 01       	movw	r20, r18
    2362:	23 e0       	ldi	r18, 0x03	; 3
    2364:	30 e0       	ldi	r19, 0x00	; 0
    2366:	0e 94 86 09 	call	0x130c	; 0x130c <lcd_print>
				sharp1 = ADC_Conversion(10);				//Stores the Analog value of front sharp connected to ADC channel 11 into variable "sharp"
    236a:	8a e0       	ldi	r24, 0x0A	; 10
    236c:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <ADC_Conversion>
    2370:	80 93 1b 03 	sts	0x031B, r24
				value1 = Sharp_GP2D12_estimation(sharp1);	//Stores Distance calsulated in a variable "value".
    2374:	80 91 1b 03 	lds	r24, 0x031B
    2378:	0e 94 57 0e 	call	0x1cae	; 0x1cae <Sharp_GP2D12_estimation>
    237c:	fe 01       	movw	r30, r28
    237e:	ea 54       	subi	r30, 0x4A	; 74
    2380:	ff 4f       	sbci	r31, 0xFF	; 255
    2382:	91 83       	std	Z+1, r25	; 0x01
    2384:	80 83       	st	Z, r24
				lcd_print(1,5,value1,3);
    2386:	fe 01       	movw	r30, r28
    2388:	ea 54       	subi	r30, 0x4A	; 74
    238a:	ff 4f       	sbci	r31, 0xFF	; 255
    238c:	20 81       	ld	r18, Z
    238e:	31 81       	ldd	r19, Z+1	; 0x01
    2390:	81 e0       	ldi	r24, 0x01	; 1
    2392:	65 e0       	ldi	r22, 0x05	; 5
    2394:	a9 01       	movw	r20, r18
    2396:	23 e0       	ldi	r18, 0x03	; 3
    2398:	30 e0       	ldi	r19, 0x00	; 0
    239a:	0e 94 86 09 	call	0x130c	; 0x130c <lcd_print>

	
	while(1)
	{

			while(data=='0')
    239e:	80 91 1e 03 	lds	r24, 0x031E
    23a2:	80 33       	cpi	r24, 0x30	; 48
    23a4:	09 f4       	brne	.+2      	; 0x23a8 <__stack+0x1a9>
    23a6:	0a cf       	rjmp	.-492    	; 0x21bc <main+0xd2>
			/*If a ball(orange colour) is detected then matlab code sends a '5' signal through
			 zigbee.If a '5' is received then the robot stops rotating and moves towards the 
			 ball
			 */

			velocity(200,200);
    23a8:	88 ec       	ldi	r24, 0xC8	; 200
    23aa:	68 ec       	ldi	r22, 0xC8	; 200
    23ac:	0e 94 57 0b 	call	0x16ae	; 0x16ae <velocity>
    23b0:	36 c0       	rjmp	.+108    	; 0x241e <__stack+0x21f>
			while(value>110 && value1>110)
			{
				sharp = ADC_Conversion(11);					//Stores the Analog value of front sharp connected to ADC channel 11 into variable "sharp"
    23b2:	8b e0       	ldi	r24, 0x0B	; 11
    23b4:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <ADC_Conversion>
    23b8:	80 93 23 03 	sts	0x0323, r24
				value = Sharp_GP2D12_estimation(sharp);		//Stores Distance calsulated in a variable "value".
    23bc:	80 91 23 03 	lds	r24, 0x0323
    23c0:	0e 94 57 0e 	call	0x1cae	; 0x1cae <Sharp_GP2D12_estimation>
    23c4:	fe 01       	movw	r30, r28
    23c6:	e8 54       	subi	r30, 0x48	; 72
    23c8:	ff 4f       	sbci	r31, 0xFF	; 255
    23ca:	91 83       	std	Z+1, r25	; 0x01
    23cc:	80 83       	st	Z, r24
				lcd_print(1,1,value,3);
    23ce:	fe 01       	movw	r30, r28
    23d0:	e8 54       	subi	r30, 0x48	; 72
    23d2:	ff 4f       	sbci	r31, 0xFF	; 255
    23d4:	20 81       	ld	r18, Z
    23d6:	31 81       	ldd	r19, Z+1	; 0x01
    23d8:	81 e0       	ldi	r24, 0x01	; 1
    23da:	61 e0       	ldi	r22, 0x01	; 1
    23dc:	a9 01       	movw	r20, r18
    23de:	23 e0       	ldi	r18, 0x03	; 3
    23e0:	30 e0       	ldi	r19, 0x00	; 0
    23e2:	0e 94 86 09 	call	0x130c	; 0x130c <lcd_print>
				sharp1 = ADC_Conversion(10);				//Stores the Analog value of front sharp connected to ADC channel 11 into variable "sharp"
    23e6:	8a e0       	ldi	r24, 0x0A	; 10
    23e8:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <ADC_Conversion>
    23ec:	80 93 1b 03 	sts	0x031B, r24
				value1 = Sharp_GP2D12_estimation(sharp1);	//Stores Distance calsulated in a variable "value".
    23f0:	80 91 1b 03 	lds	r24, 0x031B
    23f4:	0e 94 57 0e 	call	0x1cae	; 0x1cae <Sharp_GP2D12_estimation>
    23f8:	fe 01       	movw	r30, r28
    23fa:	ea 54       	subi	r30, 0x4A	; 74
    23fc:	ff 4f       	sbci	r31, 0xFF	; 255
    23fe:	91 83       	std	Z+1, r25	; 0x01
    2400:	80 83       	st	Z, r24
				lcd_print(1,5,value1,3);
    2402:	fe 01       	movw	r30, r28
    2404:	ea 54       	subi	r30, 0x4A	; 74
    2406:	ff 4f       	sbci	r31, 0xFF	; 255
    2408:	20 81       	ld	r18, Z
    240a:	31 81       	ldd	r19, Z+1	; 0x01
    240c:	81 e0       	ldi	r24, 0x01	; 1
    240e:	65 e0       	ldi	r22, 0x05	; 5
    2410:	a9 01       	movw	r20, r18
    2412:	23 e0       	ldi	r18, 0x03	; 3
    2414:	30 e0       	ldi	r19, 0x00	; 0
    2416:	0e 94 86 09 	call	0x130c	; 0x130c <lcd_print>

				forward();
    241a:	0e 94 16 0b 	call	0x162c	; 0x162c <forward>
			 zigbee.If a '5' is received then the robot stops rotating and moves towards the 
			 ball
			 */

			velocity(200,200);
			while(value>110 && value1>110)
    241e:	fe 01       	movw	r30, r28
    2420:	e8 54       	subi	r30, 0x48	; 72
    2422:	ff 4f       	sbci	r31, 0xFF	; 255
    2424:	80 81       	ld	r24, Z
    2426:	91 81       	ldd	r25, Z+1	; 0x01
    2428:	8f 36       	cpi	r24, 0x6F	; 111
    242a:	91 05       	cpc	r25, r1
    242c:	48 f0       	brcs	.+18     	; 0x2440 <__stack+0x241>
    242e:	fe 01       	movw	r30, r28
    2430:	ea 54       	subi	r30, 0x4A	; 74
    2432:	ff 4f       	sbci	r31, 0xFF	; 255
    2434:	80 81       	ld	r24, Z
    2436:	91 81       	ldd	r25, Z+1	; 0x01
    2438:	8f 36       	cpi	r24, 0x6F	; 111
    243a:	91 05       	cpc	r25, r1
    243c:	08 f0       	brcs	.+2      	; 0x2440 <__stack+0x241>
    243e:	b9 cf       	rjmp	.-142    	; 0x23b2 <__stack+0x1b3>
				lcd_print(1,5,value1,3);

				forward();
			}

			stop();
    2440:	0e 94 42 0b 	call	0x1684	; 0x1684 <stop>
    2444:	fe 01       	movw	r30, r28
    2446:	e9 56       	subi	r30, 0x69	; 105
    2448:	ff 4f       	sbci	r31, 0xFF	; 255
    244a:	80 e0       	ldi	r24, 0x00	; 0
    244c:	90 e0       	ldi	r25, 0x00	; 0
    244e:	aa ef       	ldi	r26, 0xFA	; 250
    2450:	b4 e4       	ldi	r27, 0x44	; 68
    2452:	80 83       	st	Z, r24
    2454:	91 83       	std	Z+1, r25	; 0x01
    2456:	a2 83       	std	Z+2, r26	; 0x02
    2458:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    245a:	8e 01       	movw	r16, r28
    245c:	0d 56       	subi	r16, 0x6D	; 109
    245e:	1f 4f       	sbci	r17, 0xFF	; 255
    2460:	fe 01       	movw	r30, r28
    2462:	e9 56       	subi	r30, 0x69	; 105
    2464:	ff 4f       	sbci	r31, 0xFF	; 255
    2466:	60 81       	ld	r22, Z
    2468:	71 81       	ldd	r23, Z+1	; 0x01
    246a:	82 81       	ldd	r24, Z+2	; 0x02
    246c:	93 81       	ldd	r25, Z+3	; 0x03
    246e:	2d ec       	ldi	r18, 0xCD	; 205
    2470:	3c ec       	ldi	r19, 0xCC	; 204
    2472:	4c e2       	ldi	r20, 0x2C	; 44
    2474:	55 e4       	ldi	r21, 0x45	; 69
    2476:	0e 94 ee 1b 	call	0x37dc	; 0x37dc <__mulsf3>
    247a:	dc 01       	movw	r26, r24
    247c:	cb 01       	movw	r24, r22
    247e:	f8 01       	movw	r30, r16
    2480:	80 83       	st	Z, r24
    2482:	91 83       	std	Z+1, r25	; 0x01
    2484:	a2 83       	std	Z+2, r26	; 0x02
    2486:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2488:	fe 01       	movw	r30, r28
    248a:	ed 56       	subi	r30, 0x6D	; 109
    248c:	ff 4f       	sbci	r31, 0xFF	; 255
    248e:	60 81       	ld	r22, Z
    2490:	71 81       	ldd	r23, Z+1	; 0x01
    2492:	82 81       	ldd	r24, Z+2	; 0x02
    2494:	93 81       	ldd	r25, Z+3	; 0x03
    2496:	20 e0       	ldi	r18, 0x00	; 0
    2498:	30 e0       	ldi	r19, 0x00	; 0
    249a:	40 e8       	ldi	r20, 0x80	; 128
    249c:	5f e3       	ldi	r21, 0x3F	; 63
    249e:	0e 94 f4 1d 	call	0x3be8	; 0x3be8 <__ltsf2>
    24a2:	88 23       	and	r24, r24
    24a4:	44 f4       	brge	.+16     	; 0x24b6 <__stack+0x2b7>
		__ticks = 1;
    24a6:	fe 01       	movw	r30, r28
    24a8:	ef 56       	subi	r30, 0x6F	; 111
    24aa:	ff 4f       	sbci	r31, 0xFF	; 255
    24ac:	81 e0       	ldi	r24, 0x01	; 1
    24ae:	90 e0       	ldi	r25, 0x00	; 0
    24b0:	91 83       	std	Z+1, r25	; 0x01
    24b2:	80 83       	st	Z, r24
    24b4:	64 c0       	rjmp	.+200    	; 0x257e <__stack+0x37f>
	else if (__tmp > 65535)
    24b6:	fe 01       	movw	r30, r28
    24b8:	ed 56       	subi	r30, 0x6D	; 109
    24ba:	ff 4f       	sbci	r31, 0xFF	; 255
    24bc:	60 81       	ld	r22, Z
    24be:	71 81       	ldd	r23, Z+1	; 0x01
    24c0:	82 81       	ldd	r24, Z+2	; 0x02
    24c2:	93 81       	ldd	r25, Z+3	; 0x03
    24c4:	20 e0       	ldi	r18, 0x00	; 0
    24c6:	3f ef       	ldi	r19, 0xFF	; 255
    24c8:	4f e7       	ldi	r20, 0x7F	; 127
    24ca:	57 e4       	ldi	r21, 0x47	; 71
    24cc:	0e 94 94 1d 	call	0x3b28	; 0x3b28 <__gtsf2>
    24d0:	18 16       	cp	r1, r24
    24d2:	0c f0       	brlt	.+2      	; 0x24d6 <__stack+0x2d7>
    24d4:	43 c0       	rjmp	.+134    	; 0x255c <__stack+0x35d>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24d6:	fe 01       	movw	r30, r28
    24d8:	e9 56       	subi	r30, 0x69	; 105
    24da:	ff 4f       	sbci	r31, 0xFF	; 255
    24dc:	60 81       	ld	r22, Z
    24de:	71 81       	ldd	r23, Z+1	; 0x01
    24e0:	82 81       	ldd	r24, Z+2	; 0x02
    24e2:	93 81       	ldd	r25, Z+3	; 0x03
    24e4:	20 e0       	ldi	r18, 0x00	; 0
    24e6:	30 e0       	ldi	r19, 0x00	; 0
    24e8:	40 e2       	ldi	r20, 0x20	; 32
    24ea:	51 e4       	ldi	r21, 0x41	; 65
    24ec:	0e 94 ee 1b 	call	0x37dc	; 0x37dc <__mulsf3>
    24f0:	dc 01       	movw	r26, r24
    24f2:	cb 01       	movw	r24, r22
    24f4:	8e 01       	movw	r16, r28
    24f6:	0f 56       	subi	r16, 0x6F	; 111
    24f8:	1f 4f       	sbci	r17, 0xFF	; 255
    24fa:	bc 01       	movw	r22, r24
    24fc:	cd 01       	movw	r24, r26
    24fe:	0e 94 18 1a 	call	0x3430	; 0x3430 <__fixunssfsi>
    2502:	dc 01       	movw	r26, r24
    2504:	cb 01       	movw	r24, r22
    2506:	f8 01       	movw	r30, r16
    2508:	91 83       	std	Z+1, r25	; 0x01
    250a:	80 83       	st	Z, r24
    250c:	1f c0       	rjmp	.+62     	; 0x254c <__stack+0x34d>
    250e:	fe 01       	movw	r30, r28
    2510:	e1 57       	subi	r30, 0x71	; 113
    2512:	ff 4f       	sbci	r31, 0xFF	; 255
    2514:	84 e1       	ldi	r24, 0x14	; 20
    2516:	91 e0       	ldi	r25, 0x01	; 1
    2518:	91 83       	std	Z+1, r25	; 0x01
    251a:	80 83       	st	Z, r24
    251c:	fe 01       	movw	r30, r28
    251e:	e1 57       	subi	r30, 0x71	; 113
    2520:	ff 4f       	sbci	r31, 0xFF	; 255
    2522:	80 81       	ld	r24, Z
    2524:	91 81       	ldd	r25, Z+1	; 0x01
    2526:	01 97       	sbiw	r24, 0x01	; 1
    2528:	f1 f7       	brne	.-4      	; 0x2526 <__stack+0x327>
    252a:	fe 01       	movw	r30, r28
    252c:	e1 57       	subi	r30, 0x71	; 113
    252e:	ff 4f       	sbci	r31, 0xFF	; 255
    2530:	91 83       	std	Z+1, r25	; 0x01
    2532:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2534:	de 01       	movw	r26, r28
    2536:	af 56       	subi	r26, 0x6F	; 111
    2538:	bf 4f       	sbci	r27, 0xFF	; 255
    253a:	fe 01       	movw	r30, r28
    253c:	ef 56       	subi	r30, 0x6F	; 111
    253e:	ff 4f       	sbci	r31, 0xFF	; 255
    2540:	80 81       	ld	r24, Z
    2542:	91 81       	ldd	r25, Z+1	; 0x01
    2544:	01 97       	sbiw	r24, 0x01	; 1
    2546:	11 96       	adiw	r26, 0x01	; 1
    2548:	9c 93       	st	X, r25
    254a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    254c:	fe 01       	movw	r30, r28
    254e:	ef 56       	subi	r30, 0x6F	; 111
    2550:	ff 4f       	sbci	r31, 0xFF	; 255
    2552:	80 81       	ld	r24, Z
    2554:	91 81       	ldd	r25, Z+1	; 0x01
    2556:	00 97       	sbiw	r24, 0x00	; 0
    2558:	d1 f6       	brne	.-76     	; 0x250e <__stack+0x30f>
    255a:	27 c0       	rjmp	.+78     	; 0x25aa <__stack+0x3ab>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    255c:	8e 01       	movw	r16, r28
    255e:	0f 56       	subi	r16, 0x6F	; 111
    2560:	1f 4f       	sbci	r17, 0xFF	; 255
    2562:	fe 01       	movw	r30, r28
    2564:	ed 56       	subi	r30, 0x6D	; 109
    2566:	ff 4f       	sbci	r31, 0xFF	; 255
    2568:	60 81       	ld	r22, Z
    256a:	71 81       	ldd	r23, Z+1	; 0x01
    256c:	82 81       	ldd	r24, Z+2	; 0x02
    256e:	93 81       	ldd	r25, Z+3	; 0x03
    2570:	0e 94 18 1a 	call	0x3430	; 0x3430 <__fixunssfsi>
    2574:	dc 01       	movw	r26, r24
    2576:	cb 01       	movw	r24, r22
    2578:	f8 01       	movw	r30, r16
    257a:	91 83       	std	Z+1, r25	; 0x01
    257c:	80 83       	st	Z, r24
    257e:	de 01       	movw	r26, r28
    2580:	a3 57       	subi	r26, 0x73	; 115
    2582:	bf 4f       	sbci	r27, 0xFF	; 255
    2584:	fe 01       	movw	r30, r28
    2586:	ef 56       	subi	r30, 0x6F	; 111
    2588:	ff 4f       	sbci	r31, 0xFF	; 255
    258a:	80 81       	ld	r24, Z
    258c:	91 81       	ldd	r25, Z+1	; 0x01
    258e:	8d 93       	st	X+, r24
    2590:	9c 93       	st	X, r25
    2592:	fe 01       	movw	r30, r28
    2594:	e3 57       	subi	r30, 0x73	; 115
    2596:	ff 4f       	sbci	r31, 0xFF	; 255
    2598:	80 81       	ld	r24, Z
    259a:	91 81       	ldd	r25, Z+1	; 0x01
    259c:	01 97       	sbiw	r24, 0x01	; 1
    259e:	f1 f7       	brne	.-4      	; 0x259c <__stack+0x39d>
    25a0:	fe 01       	movw	r30, r28
    25a2:	e3 57       	subi	r30, 0x73	; 115
    25a4:	ff 4f       	sbci	r31, 0xFF	; 255
    25a6:	91 83       	std	Z+1, r25	; 0x01
    25a8:	80 83       	st	Z, r24
			_delay_ms(2000);

			servo_3(0);								//code the open the gripper arm
    25aa:	80 e0       	ldi	r24, 0x00	; 0
    25ac:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <servo_3>
    25b0:	fe 01       	movw	r30, r28
    25b2:	e7 57       	subi	r30, 0x77	; 119
    25b4:	ff 4f       	sbci	r31, 0xFF	; 255
    25b6:	80 e0       	ldi	r24, 0x00	; 0
    25b8:	90 e0       	ldi	r25, 0x00	; 0
    25ba:	aa e7       	ldi	r26, 0x7A	; 122
    25bc:	b4 e4       	ldi	r27, 0x44	; 68
    25be:	80 83       	st	Z, r24
    25c0:	91 83       	std	Z+1, r25	; 0x01
    25c2:	a2 83       	std	Z+2, r26	; 0x02
    25c4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25c6:	8e 01       	movw	r16, r28
    25c8:	0b 57       	subi	r16, 0x7B	; 123
    25ca:	1f 4f       	sbci	r17, 0xFF	; 255
    25cc:	fe 01       	movw	r30, r28
    25ce:	e7 57       	subi	r30, 0x77	; 119
    25d0:	ff 4f       	sbci	r31, 0xFF	; 255
    25d2:	60 81       	ld	r22, Z
    25d4:	71 81       	ldd	r23, Z+1	; 0x01
    25d6:	82 81       	ldd	r24, Z+2	; 0x02
    25d8:	93 81       	ldd	r25, Z+3	; 0x03
    25da:	2d ec       	ldi	r18, 0xCD	; 205
    25dc:	3c ec       	ldi	r19, 0xCC	; 204
    25de:	4c e2       	ldi	r20, 0x2C	; 44
    25e0:	55 e4       	ldi	r21, 0x45	; 69
    25e2:	0e 94 ee 1b 	call	0x37dc	; 0x37dc <__mulsf3>
    25e6:	dc 01       	movw	r26, r24
    25e8:	cb 01       	movw	r24, r22
    25ea:	f8 01       	movw	r30, r16
    25ec:	80 83       	st	Z, r24
    25ee:	91 83       	std	Z+1, r25	; 0x01
    25f0:	a2 83       	std	Z+2, r26	; 0x02
    25f2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    25f4:	fe 01       	movw	r30, r28
    25f6:	eb 57       	subi	r30, 0x7B	; 123
    25f8:	ff 4f       	sbci	r31, 0xFF	; 255
    25fa:	60 81       	ld	r22, Z
    25fc:	71 81       	ldd	r23, Z+1	; 0x01
    25fe:	82 81       	ldd	r24, Z+2	; 0x02
    2600:	93 81       	ldd	r25, Z+3	; 0x03
    2602:	20 e0       	ldi	r18, 0x00	; 0
    2604:	30 e0       	ldi	r19, 0x00	; 0
    2606:	40 e8       	ldi	r20, 0x80	; 128
    2608:	5f e3       	ldi	r21, 0x3F	; 63
    260a:	0e 94 f4 1d 	call	0x3be8	; 0x3be8 <__ltsf2>
    260e:	88 23       	and	r24, r24
    2610:	44 f4       	brge	.+16     	; 0x2622 <__stack+0x423>
		__ticks = 1;
    2612:	fe 01       	movw	r30, r28
    2614:	ed 57       	subi	r30, 0x7D	; 125
    2616:	ff 4f       	sbci	r31, 0xFF	; 255
    2618:	81 e0       	ldi	r24, 0x01	; 1
    261a:	90 e0       	ldi	r25, 0x00	; 0
    261c:	91 83       	std	Z+1, r25	; 0x01
    261e:	80 83       	st	Z, r24
    2620:	64 c0       	rjmp	.+200    	; 0x26ea <__stack+0x4eb>
	else if (__tmp > 65535)
    2622:	fe 01       	movw	r30, r28
    2624:	eb 57       	subi	r30, 0x7B	; 123
    2626:	ff 4f       	sbci	r31, 0xFF	; 255
    2628:	60 81       	ld	r22, Z
    262a:	71 81       	ldd	r23, Z+1	; 0x01
    262c:	82 81       	ldd	r24, Z+2	; 0x02
    262e:	93 81       	ldd	r25, Z+3	; 0x03
    2630:	20 e0       	ldi	r18, 0x00	; 0
    2632:	3f ef       	ldi	r19, 0xFF	; 255
    2634:	4f e7       	ldi	r20, 0x7F	; 127
    2636:	57 e4       	ldi	r21, 0x47	; 71
    2638:	0e 94 94 1d 	call	0x3b28	; 0x3b28 <__gtsf2>
    263c:	18 16       	cp	r1, r24
    263e:	0c f0       	brlt	.+2      	; 0x2642 <__stack+0x443>
    2640:	43 c0       	rjmp	.+134    	; 0x26c8 <__stack+0x4c9>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2642:	fe 01       	movw	r30, r28
    2644:	e7 57       	subi	r30, 0x77	; 119
    2646:	ff 4f       	sbci	r31, 0xFF	; 255
    2648:	60 81       	ld	r22, Z
    264a:	71 81       	ldd	r23, Z+1	; 0x01
    264c:	82 81       	ldd	r24, Z+2	; 0x02
    264e:	93 81       	ldd	r25, Z+3	; 0x03
    2650:	20 e0       	ldi	r18, 0x00	; 0
    2652:	30 e0       	ldi	r19, 0x00	; 0
    2654:	40 e2       	ldi	r20, 0x20	; 32
    2656:	51 e4       	ldi	r21, 0x41	; 65
    2658:	0e 94 ee 1b 	call	0x37dc	; 0x37dc <__mulsf3>
    265c:	dc 01       	movw	r26, r24
    265e:	cb 01       	movw	r24, r22
    2660:	8e 01       	movw	r16, r28
    2662:	0d 57       	subi	r16, 0x7D	; 125
    2664:	1f 4f       	sbci	r17, 0xFF	; 255
    2666:	bc 01       	movw	r22, r24
    2668:	cd 01       	movw	r24, r26
    266a:	0e 94 18 1a 	call	0x3430	; 0x3430 <__fixunssfsi>
    266e:	dc 01       	movw	r26, r24
    2670:	cb 01       	movw	r24, r22
    2672:	f8 01       	movw	r30, r16
    2674:	91 83       	std	Z+1, r25	; 0x01
    2676:	80 83       	st	Z, r24
    2678:	1f c0       	rjmp	.+62     	; 0x26b8 <__stack+0x4b9>
    267a:	fe 01       	movw	r30, r28
    267c:	ef 57       	subi	r30, 0x7F	; 127
    267e:	ff 4f       	sbci	r31, 0xFF	; 255
    2680:	84 e1       	ldi	r24, 0x14	; 20
    2682:	91 e0       	ldi	r25, 0x01	; 1
    2684:	91 83       	std	Z+1, r25	; 0x01
    2686:	80 83       	st	Z, r24
    2688:	fe 01       	movw	r30, r28
    268a:	ef 57       	subi	r30, 0x7F	; 127
    268c:	ff 4f       	sbci	r31, 0xFF	; 255
    268e:	80 81       	ld	r24, Z
    2690:	91 81       	ldd	r25, Z+1	; 0x01
    2692:	01 97       	sbiw	r24, 0x01	; 1
    2694:	f1 f7       	brne	.-4      	; 0x2692 <__stack+0x493>
    2696:	fe 01       	movw	r30, r28
    2698:	ef 57       	subi	r30, 0x7F	; 127
    269a:	ff 4f       	sbci	r31, 0xFF	; 255
    269c:	91 83       	std	Z+1, r25	; 0x01
    269e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26a0:	de 01       	movw	r26, r28
    26a2:	ad 57       	subi	r26, 0x7D	; 125
    26a4:	bf 4f       	sbci	r27, 0xFF	; 255
    26a6:	fe 01       	movw	r30, r28
    26a8:	ed 57       	subi	r30, 0x7D	; 125
    26aa:	ff 4f       	sbci	r31, 0xFF	; 255
    26ac:	80 81       	ld	r24, Z
    26ae:	91 81       	ldd	r25, Z+1	; 0x01
    26b0:	01 97       	sbiw	r24, 0x01	; 1
    26b2:	11 96       	adiw	r26, 0x01	; 1
    26b4:	9c 93       	st	X, r25
    26b6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26b8:	fe 01       	movw	r30, r28
    26ba:	ed 57       	subi	r30, 0x7D	; 125
    26bc:	ff 4f       	sbci	r31, 0xFF	; 255
    26be:	80 81       	ld	r24, Z
    26c0:	91 81       	ldd	r25, Z+1	; 0x01
    26c2:	00 97       	sbiw	r24, 0x00	; 0
    26c4:	d1 f6       	brne	.-76     	; 0x267a <__stack+0x47b>
    26c6:	28 c0       	rjmp	.+80     	; 0x2718 <__stack+0x519>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26c8:	8e 01       	movw	r16, r28
    26ca:	0d 57       	subi	r16, 0x7D	; 125
    26cc:	1f 4f       	sbci	r17, 0xFF	; 255
    26ce:	fe 01       	movw	r30, r28
    26d0:	eb 57       	subi	r30, 0x7B	; 123
    26d2:	ff 4f       	sbci	r31, 0xFF	; 255
    26d4:	60 81       	ld	r22, Z
    26d6:	71 81       	ldd	r23, Z+1	; 0x01
    26d8:	82 81       	ldd	r24, Z+2	; 0x02
    26da:	93 81       	ldd	r25, Z+3	; 0x03
    26dc:	0e 94 18 1a 	call	0x3430	; 0x3430 <__fixunssfsi>
    26e0:	dc 01       	movw	r26, r24
    26e2:	cb 01       	movw	r24, r22
    26e4:	f8 01       	movw	r30, r16
    26e6:	91 83       	std	Z+1, r25	; 0x01
    26e8:	80 83       	st	Z, r24
    26ea:	de 01       	movw	r26, r28
    26ec:	a1 58       	subi	r26, 0x81	; 129
    26ee:	bf 4f       	sbci	r27, 0xFF	; 255
    26f0:	fe 01       	movw	r30, r28
    26f2:	ed 57       	subi	r30, 0x7D	; 125
    26f4:	ff 4f       	sbci	r31, 0xFF	; 255
    26f6:	80 81       	ld	r24, Z
    26f8:	91 81       	ldd	r25, Z+1	; 0x01
    26fa:	11 96       	adiw	r26, 0x01	; 1
    26fc:	9c 93       	st	X, r25
    26fe:	8e 93       	st	-X, r24
    2700:	fe 01       	movw	r30, r28
    2702:	e1 58       	subi	r30, 0x81	; 129
    2704:	ff 4f       	sbci	r31, 0xFF	; 255
    2706:	80 81       	ld	r24, Z
    2708:	91 81       	ldd	r25, Z+1	; 0x01
    270a:	01 97       	sbiw	r24, 0x01	; 1
    270c:	f1 f7       	brne	.-4      	; 0x270a <__stack+0x50b>
    270e:	fe 01       	movw	r30, r28
    2710:	e1 58       	subi	r30, 0x81	; 129
    2712:	ff 4f       	sbci	r31, 0xFF	; 255
    2714:	91 83       	std	Z+1, r25	; 0x01
    2716:	80 83       	st	Z, r24
			_delay_ms(1000);
			//servo1=90,servo2=95
			
			for (int angle1 = 0, angle2=80; angle1 <=77;angle1++,angle2--)
    2718:	fe 01       	movw	r30, r28
    271a:	e1 55       	subi	r30, 0x51	; 81
    271c:	ff 4f       	sbci	r31, 0xFF	; 255
    271e:	11 82       	std	Z+1, r1	; 0x01
    2720:	10 82       	st	Z, r1
    2722:	fe 01       	movw	r30, r28
    2724:	e3 55       	subi	r30, 0x53	; 83
    2726:	ff 4f       	sbci	r31, 0xFF	; 255
    2728:	80 e5       	ldi	r24, 0x50	; 80
    272a:	90 e0       	ldi	r25, 0x00	; 0
    272c:	91 83       	std	Z+1, r25	; 0x01
    272e:	80 83       	st	Z, r24
    2730:	89 c1       	rjmp	.+786    	; 0x2a44 <__stack+0x845>
 			{
  				servo_1(angle1);					//code for downward movement of two servo motors 
    2732:	fe 01       	movw	r30, r28
    2734:	e1 55       	subi	r30, 0x51	; 81
    2736:	ff 4f       	sbci	r31, 0xFF	; 255
    2738:	80 81       	ld	r24, Z
    273a:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <servo_1>
    273e:	fe 01       	movw	r30, r28
    2740:	e5 58       	subi	r30, 0x85	; 133
    2742:	ff 4f       	sbci	r31, 0xFF	; 255
    2744:	80 e0       	ldi	r24, 0x00	; 0
    2746:	90 e0       	ldi	r25, 0x00	; 0
    2748:	a0 e2       	ldi	r26, 0x20	; 32
    274a:	b1 e4       	ldi	r27, 0x41	; 65
    274c:	80 83       	st	Z, r24
    274e:	91 83       	std	Z+1, r25	; 0x01
    2750:	a2 83       	std	Z+2, r26	; 0x02
    2752:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2754:	8e 01       	movw	r16, r28
    2756:	09 58       	subi	r16, 0x89	; 137
    2758:	1f 4f       	sbci	r17, 0xFF	; 255
    275a:	fe 01       	movw	r30, r28
    275c:	e5 58       	subi	r30, 0x85	; 133
    275e:	ff 4f       	sbci	r31, 0xFF	; 255
    2760:	60 81       	ld	r22, Z
    2762:	71 81       	ldd	r23, Z+1	; 0x01
    2764:	82 81       	ldd	r24, Z+2	; 0x02
    2766:	93 81       	ldd	r25, Z+3	; 0x03
    2768:	2d ec       	ldi	r18, 0xCD	; 205
    276a:	3c ec       	ldi	r19, 0xCC	; 204
    276c:	4c e2       	ldi	r20, 0x2C	; 44
    276e:	55 e4       	ldi	r21, 0x45	; 69
    2770:	0e 94 ee 1b 	call	0x37dc	; 0x37dc <__mulsf3>
    2774:	dc 01       	movw	r26, r24
    2776:	cb 01       	movw	r24, r22
    2778:	f8 01       	movw	r30, r16
    277a:	80 83       	st	Z, r24
    277c:	91 83       	std	Z+1, r25	; 0x01
    277e:	a2 83       	std	Z+2, r26	; 0x02
    2780:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2782:	fe 01       	movw	r30, r28
    2784:	e9 58       	subi	r30, 0x89	; 137
    2786:	ff 4f       	sbci	r31, 0xFF	; 255
    2788:	60 81       	ld	r22, Z
    278a:	71 81       	ldd	r23, Z+1	; 0x01
    278c:	82 81       	ldd	r24, Z+2	; 0x02
    278e:	93 81       	ldd	r25, Z+3	; 0x03
    2790:	20 e0       	ldi	r18, 0x00	; 0
    2792:	30 e0       	ldi	r19, 0x00	; 0
    2794:	40 e8       	ldi	r20, 0x80	; 128
    2796:	5f e3       	ldi	r21, 0x3F	; 63
    2798:	0e 94 f4 1d 	call	0x3be8	; 0x3be8 <__ltsf2>
    279c:	88 23       	and	r24, r24
    279e:	44 f4       	brge	.+16     	; 0x27b0 <__stack+0x5b1>
		__ticks = 1;
    27a0:	fe 01       	movw	r30, r28
    27a2:	eb 58       	subi	r30, 0x8B	; 139
    27a4:	ff 4f       	sbci	r31, 0xFF	; 255
    27a6:	81 e0       	ldi	r24, 0x01	; 1
    27a8:	90 e0       	ldi	r25, 0x00	; 0
    27aa:	91 83       	std	Z+1, r25	; 0x01
    27ac:	80 83       	st	Z, r24
    27ae:	64 c0       	rjmp	.+200    	; 0x2878 <__stack+0x679>
	else if (__tmp > 65535)
    27b0:	fe 01       	movw	r30, r28
    27b2:	e9 58       	subi	r30, 0x89	; 137
    27b4:	ff 4f       	sbci	r31, 0xFF	; 255
    27b6:	60 81       	ld	r22, Z
    27b8:	71 81       	ldd	r23, Z+1	; 0x01
    27ba:	82 81       	ldd	r24, Z+2	; 0x02
    27bc:	93 81       	ldd	r25, Z+3	; 0x03
    27be:	20 e0       	ldi	r18, 0x00	; 0
    27c0:	3f ef       	ldi	r19, 0xFF	; 255
    27c2:	4f e7       	ldi	r20, 0x7F	; 127
    27c4:	57 e4       	ldi	r21, 0x47	; 71
    27c6:	0e 94 94 1d 	call	0x3b28	; 0x3b28 <__gtsf2>
    27ca:	18 16       	cp	r1, r24
    27cc:	0c f0       	brlt	.+2      	; 0x27d0 <__stack+0x5d1>
    27ce:	43 c0       	rjmp	.+134    	; 0x2856 <__stack+0x657>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27d0:	fe 01       	movw	r30, r28
    27d2:	e5 58       	subi	r30, 0x85	; 133
    27d4:	ff 4f       	sbci	r31, 0xFF	; 255
    27d6:	60 81       	ld	r22, Z
    27d8:	71 81       	ldd	r23, Z+1	; 0x01
    27da:	82 81       	ldd	r24, Z+2	; 0x02
    27dc:	93 81       	ldd	r25, Z+3	; 0x03
    27de:	20 e0       	ldi	r18, 0x00	; 0
    27e0:	30 e0       	ldi	r19, 0x00	; 0
    27e2:	40 e2       	ldi	r20, 0x20	; 32
    27e4:	51 e4       	ldi	r21, 0x41	; 65
    27e6:	0e 94 ee 1b 	call	0x37dc	; 0x37dc <__mulsf3>
    27ea:	dc 01       	movw	r26, r24
    27ec:	cb 01       	movw	r24, r22
    27ee:	8e 01       	movw	r16, r28
    27f0:	0b 58       	subi	r16, 0x8B	; 139
    27f2:	1f 4f       	sbci	r17, 0xFF	; 255
    27f4:	bc 01       	movw	r22, r24
    27f6:	cd 01       	movw	r24, r26
    27f8:	0e 94 18 1a 	call	0x3430	; 0x3430 <__fixunssfsi>
    27fc:	dc 01       	movw	r26, r24
    27fe:	cb 01       	movw	r24, r22
    2800:	f8 01       	movw	r30, r16
    2802:	91 83       	std	Z+1, r25	; 0x01
    2804:	80 83       	st	Z, r24
    2806:	1f c0       	rjmp	.+62     	; 0x2846 <__stack+0x647>
    2808:	fe 01       	movw	r30, r28
    280a:	ed 58       	subi	r30, 0x8D	; 141
    280c:	ff 4f       	sbci	r31, 0xFF	; 255
    280e:	84 e1       	ldi	r24, 0x14	; 20
    2810:	91 e0       	ldi	r25, 0x01	; 1
    2812:	91 83       	std	Z+1, r25	; 0x01
    2814:	80 83       	st	Z, r24
    2816:	fe 01       	movw	r30, r28
    2818:	ed 58       	subi	r30, 0x8D	; 141
    281a:	ff 4f       	sbci	r31, 0xFF	; 255
    281c:	80 81       	ld	r24, Z
    281e:	91 81       	ldd	r25, Z+1	; 0x01
    2820:	01 97       	sbiw	r24, 0x01	; 1
    2822:	f1 f7       	brne	.-4      	; 0x2820 <__stack+0x621>
    2824:	fe 01       	movw	r30, r28
    2826:	ed 58       	subi	r30, 0x8D	; 141
    2828:	ff 4f       	sbci	r31, 0xFF	; 255
    282a:	91 83       	std	Z+1, r25	; 0x01
    282c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    282e:	de 01       	movw	r26, r28
    2830:	ab 58       	subi	r26, 0x8B	; 139
    2832:	bf 4f       	sbci	r27, 0xFF	; 255
    2834:	fe 01       	movw	r30, r28
    2836:	eb 58       	subi	r30, 0x8B	; 139
    2838:	ff 4f       	sbci	r31, 0xFF	; 255
    283a:	80 81       	ld	r24, Z
    283c:	91 81       	ldd	r25, Z+1	; 0x01
    283e:	01 97       	sbiw	r24, 0x01	; 1
    2840:	11 96       	adiw	r26, 0x01	; 1
    2842:	9c 93       	st	X, r25
    2844:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2846:	fe 01       	movw	r30, r28
    2848:	eb 58       	subi	r30, 0x8B	; 139
    284a:	ff 4f       	sbci	r31, 0xFF	; 255
    284c:	80 81       	ld	r24, Z
    284e:	91 81       	ldd	r25, Z+1	; 0x01
    2850:	00 97       	sbiw	r24, 0x00	; 0
    2852:	d1 f6       	brne	.-76     	; 0x2808 <__stack+0x609>
    2854:	27 c0       	rjmp	.+78     	; 0x28a4 <__stack+0x6a5>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2856:	8e 01       	movw	r16, r28
    2858:	0b 58       	subi	r16, 0x8B	; 139
    285a:	1f 4f       	sbci	r17, 0xFF	; 255
    285c:	fe 01       	movw	r30, r28
    285e:	e9 58       	subi	r30, 0x89	; 137
    2860:	ff 4f       	sbci	r31, 0xFF	; 255
    2862:	60 81       	ld	r22, Z
    2864:	71 81       	ldd	r23, Z+1	; 0x01
    2866:	82 81       	ldd	r24, Z+2	; 0x02
    2868:	93 81       	ldd	r25, Z+3	; 0x03
    286a:	0e 94 18 1a 	call	0x3430	; 0x3430 <__fixunssfsi>
    286e:	dc 01       	movw	r26, r24
    2870:	cb 01       	movw	r24, r22
    2872:	f8 01       	movw	r30, r16
    2874:	91 83       	std	Z+1, r25	; 0x01
    2876:	80 83       	st	Z, r24
    2878:	de 01       	movw	r26, r28
    287a:	af 58       	subi	r26, 0x8F	; 143
    287c:	bf 4f       	sbci	r27, 0xFF	; 255
    287e:	fe 01       	movw	r30, r28
    2880:	eb 58       	subi	r30, 0x8B	; 139
    2882:	ff 4f       	sbci	r31, 0xFF	; 255
    2884:	80 81       	ld	r24, Z
    2886:	91 81       	ldd	r25, Z+1	; 0x01
    2888:	8d 93       	st	X+, r24
    288a:	9c 93       	st	X, r25
    288c:	fe 01       	movw	r30, r28
    288e:	ef 58       	subi	r30, 0x8F	; 143
    2890:	ff 4f       	sbci	r31, 0xFF	; 255
    2892:	80 81       	ld	r24, Z
    2894:	91 81       	ldd	r25, Z+1	; 0x01
    2896:	01 97       	sbiw	r24, 0x01	; 1
    2898:	f1 f7       	brne	.-4      	; 0x2896 <__stack+0x697>
    289a:	fe 01       	movw	r30, r28
    289c:	ef 58       	subi	r30, 0x8F	; 143
    289e:	ff 4f       	sbci	r31, 0xFF	; 255
    28a0:	91 83       	std	Z+1, r25	; 0x01
    28a2:	80 83       	st	Z, r24
  				_delay_ms(10);						// that holds the gripper
				servo_2(angle2);
    28a4:	fe 01       	movw	r30, r28
    28a6:	e3 55       	subi	r30, 0x53	; 83
    28a8:	ff 4f       	sbci	r31, 0xFF	; 255
    28aa:	80 81       	ld	r24, Z
    28ac:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <servo_2>
    28b0:	fe 01       	movw	r30, r28
    28b2:	e3 59       	subi	r30, 0x93	; 147
    28b4:	ff 4f       	sbci	r31, 0xFF	; 255
    28b6:	80 e0       	ldi	r24, 0x00	; 0
    28b8:	90 e0       	ldi	r25, 0x00	; 0
    28ba:	a0 e2       	ldi	r26, 0x20	; 32
    28bc:	b1 e4       	ldi	r27, 0x41	; 65
    28be:	80 83       	st	Z, r24
    28c0:	91 83       	std	Z+1, r25	; 0x01
    28c2:	a2 83       	std	Z+2, r26	; 0x02
    28c4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28c6:	8e 01       	movw	r16, r28
    28c8:	07 59       	subi	r16, 0x97	; 151
    28ca:	1f 4f       	sbci	r17, 0xFF	; 255
    28cc:	fe 01       	movw	r30, r28
    28ce:	e3 59       	subi	r30, 0x93	; 147
    28d0:	ff 4f       	sbci	r31, 0xFF	; 255
    28d2:	60 81       	ld	r22, Z
    28d4:	71 81       	ldd	r23, Z+1	; 0x01
    28d6:	82 81       	ldd	r24, Z+2	; 0x02
    28d8:	93 81       	ldd	r25, Z+3	; 0x03
    28da:	2d ec       	ldi	r18, 0xCD	; 205
    28dc:	3c ec       	ldi	r19, 0xCC	; 204
    28de:	4c e2       	ldi	r20, 0x2C	; 44
    28e0:	55 e4       	ldi	r21, 0x45	; 69
    28e2:	0e 94 ee 1b 	call	0x37dc	; 0x37dc <__mulsf3>
    28e6:	dc 01       	movw	r26, r24
    28e8:	cb 01       	movw	r24, r22
    28ea:	f8 01       	movw	r30, r16
    28ec:	80 83       	st	Z, r24
    28ee:	91 83       	std	Z+1, r25	; 0x01
    28f0:	a2 83       	std	Z+2, r26	; 0x02
    28f2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    28f4:	fe 01       	movw	r30, r28
    28f6:	e7 59       	subi	r30, 0x97	; 151
    28f8:	ff 4f       	sbci	r31, 0xFF	; 255
    28fa:	60 81       	ld	r22, Z
    28fc:	71 81       	ldd	r23, Z+1	; 0x01
    28fe:	82 81       	ldd	r24, Z+2	; 0x02
    2900:	93 81       	ldd	r25, Z+3	; 0x03
    2902:	20 e0       	ldi	r18, 0x00	; 0
    2904:	30 e0       	ldi	r19, 0x00	; 0
    2906:	40 e8       	ldi	r20, 0x80	; 128
    2908:	5f e3       	ldi	r21, 0x3F	; 63
    290a:	0e 94 f4 1d 	call	0x3be8	; 0x3be8 <__ltsf2>
    290e:	88 23       	and	r24, r24
    2910:	44 f4       	brge	.+16     	; 0x2922 <__stack+0x723>
		__ticks = 1;
    2912:	fe 01       	movw	r30, r28
    2914:	e9 59       	subi	r30, 0x99	; 153
    2916:	ff 4f       	sbci	r31, 0xFF	; 255
    2918:	81 e0       	ldi	r24, 0x01	; 1
    291a:	90 e0       	ldi	r25, 0x00	; 0
    291c:	91 83       	std	Z+1, r25	; 0x01
    291e:	80 83       	st	Z, r24
    2920:	64 c0       	rjmp	.+200    	; 0x29ea <__stack+0x7eb>
	else if (__tmp > 65535)
    2922:	fe 01       	movw	r30, r28
    2924:	e7 59       	subi	r30, 0x97	; 151
    2926:	ff 4f       	sbci	r31, 0xFF	; 255
    2928:	60 81       	ld	r22, Z
    292a:	71 81       	ldd	r23, Z+1	; 0x01
    292c:	82 81       	ldd	r24, Z+2	; 0x02
    292e:	93 81       	ldd	r25, Z+3	; 0x03
    2930:	20 e0       	ldi	r18, 0x00	; 0
    2932:	3f ef       	ldi	r19, 0xFF	; 255
    2934:	4f e7       	ldi	r20, 0x7F	; 127
    2936:	57 e4       	ldi	r21, 0x47	; 71
    2938:	0e 94 94 1d 	call	0x3b28	; 0x3b28 <__gtsf2>
    293c:	18 16       	cp	r1, r24
    293e:	0c f0       	brlt	.+2      	; 0x2942 <__stack+0x743>
    2940:	43 c0       	rjmp	.+134    	; 0x29c8 <__stack+0x7c9>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2942:	fe 01       	movw	r30, r28
    2944:	e3 59       	subi	r30, 0x93	; 147
    2946:	ff 4f       	sbci	r31, 0xFF	; 255
    2948:	60 81       	ld	r22, Z
    294a:	71 81       	ldd	r23, Z+1	; 0x01
    294c:	82 81       	ldd	r24, Z+2	; 0x02
    294e:	93 81       	ldd	r25, Z+3	; 0x03
    2950:	20 e0       	ldi	r18, 0x00	; 0
    2952:	30 e0       	ldi	r19, 0x00	; 0
    2954:	40 e2       	ldi	r20, 0x20	; 32
    2956:	51 e4       	ldi	r21, 0x41	; 65
    2958:	0e 94 ee 1b 	call	0x37dc	; 0x37dc <__mulsf3>
    295c:	dc 01       	movw	r26, r24
    295e:	cb 01       	movw	r24, r22
    2960:	8e 01       	movw	r16, r28
    2962:	09 59       	subi	r16, 0x99	; 153
    2964:	1f 4f       	sbci	r17, 0xFF	; 255
    2966:	bc 01       	movw	r22, r24
    2968:	cd 01       	movw	r24, r26
    296a:	0e 94 18 1a 	call	0x3430	; 0x3430 <__fixunssfsi>
    296e:	dc 01       	movw	r26, r24
    2970:	cb 01       	movw	r24, r22
    2972:	f8 01       	movw	r30, r16
    2974:	91 83       	std	Z+1, r25	; 0x01
    2976:	80 83       	st	Z, r24
    2978:	1f c0       	rjmp	.+62     	; 0x29b8 <__stack+0x7b9>
    297a:	fe 01       	movw	r30, r28
    297c:	eb 59       	subi	r30, 0x9B	; 155
    297e:	ff 4f       	sbci	r31, 0xFF	; 255
    2980:	84 e1       	ldi	r24, 0x14	; 20
    2982:	91 e0       	ldi	r25, 0x01	; 1
    2984:	91 83       	std	Z+1, r25	; 0x01
    2986:	80 83       	st	Z, r24
    2988:	fe 01       	movw	r30, r28
    298a:	eb 59       	subi	r30, 0x9B	; 155
    298c:	ff 4f       	sbci	r31, 0xFF	; 255
    298e:	80 81       	ld	r24, Z
    2990:	91 81       	ldd	r25, Z+1	; 0x01
    2992:	01 97       	sbiw	r24, 0x01	; 1
    2994:	f1 f7       	brne	.-4      	; 0x2992 <__stack+0x793>
    2996:	fe 01       	movw	r30, r28
    2998:	eb 59       	subi	r30, 0x9B	; 155
    299a:	ff 4f       	sbci	r31, 0xFF	; 255
    299c:	91 83       	std	Z+1, r25	; 0x01
    299e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29a0:	de 01       	movw	r26, r28
    29a2:	a9 59       	subi	r26, 0x99	; 153
    29a4:	bf 4f       	sbci	r27, 0xFF	; 255
    29a6:	fe 01       	movw	r30, r28
    29a8:	e9 59       	subi	r30, 0x99	; 153
    29aa:	ff 4f       	sbci	r31, 0xFF	; 255
    29ac:	80 81       	ld	r24, Z
    29ae:	91 81       	ldd	r25, Z+1	; 0x01
    29b0:	01 97       	sbiw	r24, 0x01	; 1
    29b2:	11 96       	adiw	r26, 0x01	; 1
    29b4:	9c 93       	st	X, r25
    29b6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29b8:	fe 01       	movw	r30, r28
    29ba:	e9 59       	subi	r30, 0x99	; 153
    29bc:	ff 4f       	sbci	r31, 0xFF	; 255
    29be:	80 81       	ld	r24, Z
    29c0:	91 81       	ldd	r25, Z+1	; 0x01
    29c2:	00 97       	sbiw	r24, 0x00	; 0
    29c4:	d1 f6       	brne	.-76     	; 0x297a <__stack+0x77b>
    29c6:	27 c0       	rjmp	.+78     	; 0x2a16 <__stack+0x817>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29c8:	8e 01       	movw	r16, r28
    29ca:	09 59       	subi	r16, 0x99	; 153
    29cc:	1f 4f       	sbci	r17, 0xFF	; 255
    29ce:	fe 01       	movw	r30, r28
    29d0:	e7 59       	subi	r30, 0x97	; 151
    29d2:	ff 4f       	sbci	r31, 0xFF	; 255
    29d4:	60 81       	ld	r22, Z
    29d6:	71 81       	ldd	r23, Z+1	; 0x01
    29d8:	82 81       	ldd	r24, Z+2	; 0x02
    29da:	93 81       	ldd	r25, Z+3	; 0x03
    29dc:	0e 94 18 1a 	call	0x3430	; 0x3430 <__fixunssfsi>
    29e0:	dc 01       	movw	r26, r24
    29e2:	cb 01       	movw	r24, r22
    29e4:	f8 01       	movw	r30, r16
    29e6:	91 83       	std	Z+1, r25	; 0x01
    29e8:	80 83       	st	Z, r24
    29ea:	de 01       	movw	r26, r28
    29ec:	ad 59       	subi	r26, 0x9D	; 157
    29ee:	bf 4f       	sbci	r27, 0xFF	; 255
    29f0:	fe 01       	movw	r30, r28
    29f2:	e9 59       	subi	r30, 0x99	; 153
    29f4:	ff 4f       	sbci	r31, 0xFF	; 255
    29f6:	80 81       	ld	r24, Z
    29f8:	91 81       	ldd	r25, Z+1	; 0x01
    29fa:	8d 93       	st	X+, r24
    29fc:	9c 93       	st	X, r25
    29fe:	fe 01       	movw	r30, r28
    2a00:	ed 59       	subi	r30, 0x9D	; 157
    2a02:	ff 4f       	sbci	r31, 0xFF	; 255
    2a04:	80 81       	ld	r24, Z
    2a06:	91 81       	ldd	r25, Z+1	; 0x01
    2a08:	01 97       	sbiw	r24, 0x01	; 1
    2a0a:	f1 f7       	brne	.-4      	; 0x2a08 <__stack+0x809>
    2a0c:	fe 01       	movw	r30, r28
    2a0e:	ed 59       	subi	r30, 0x9D	; 157
    2a10:	ff 4f       	sbci	r31, 0xFF	; 255
    2a12:	91 83       	std	Z+1, r25	; 0x01
    2a14:	80 83       	st	Z, r24

			servo_3(0);								//code the open the gripper arm
			_delay_ms(1000);
			//servo1=90,servo2=95
			
			for (int angle1 = 0, angle2=80; angle1 <=77;angle1++,angle2--)
    2a16:	de 01       	movw	r26, r28
    2a18:	a1 55       	subi	r26, 0x51	; 81
    2a1a:	bf 4f       	sbci	r27, 0xFF	; 255
    2a1c:	fe 01       	movw	r30, r28
    2a1e:	e1 55       	subi	r30, 0x51	; 81
    2a20:	ff 4f       	sbci	r31, 0xFF	; 255
    2a22:	80 81       	ld	r24, Z
    2a24:	91 81       	ldd	r25, Z+1	; 0x01
    2a26:	01 96       	adiw	r24, 0x01	; 1
    2a28:	8d 93       	st	X+, r24
    2a2a:	9c 93       	st	X, r25
    2a2c:	de 01       	movw	r26, r28
    2a2e:	a3 55       	subi	r26, 0x53	; 83
    2a30:	bf 4f       	sbci	r27, 0xFF	; 255
    2a32:	fe 01       	movw	r30, r28
    2a34:	e3 55       	subi	r30, 0x53	; 83
    2a36:	ff 4f       	sbci	r31, 0xFF	; 255
    2a38:	80 81       	ld	r24, Z
    2a3a:	91 81       	ldd	r25, Z+1	; 0x01
    2a3c:	01 97       	sbiw	r24, 0x01	; 1
    2a3e:	11 96       	adiw	r26, 0x01	; 1
    2a40:	9c 93       	st	X, r25
    2a42:	8e 93       	st	-X, r24
    2a44:	fe 01       	movw	r30, r28
    2a46:	e1 55       	subi	r30, 0x51	; 81
    2a48:	ff 4f       	sbci	r31, 0xFF	; 255
    2a4a:	80 81       	ld	r24, Z
    2a4c:	91 81       	ldd	r25, Z+1	; 0x01
    2a4e:	8e 34       	cpi	r24, 0x4E	; 78
    2a50:	91 05       	cpc	r25, r1
    2a52:	0c f4       	brge	.+2      	; 0x2a56 <__stack+0x857>
    2a54:	6e ce       	rjmp	.-804    	; 0x2732 <__stack+0x533>
				servo_2(angle2);
  				_delay_ms(10);
 			}	
			

  			servo_3(120);							//Grab the ball and close the arm
    2a56:	88 e7       	ldi	r24, 0x78	; 120
    2a58:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <servo_3>
    2a5c:	fe 01       	movw	r30, r28
    2a5e:	e1 5a       	subi	r30, 0xA1	; 161
    2a60:	ff 4f       	sbci	r31, 0xFF	; 255
    2a62:	80 e0       	ldi	r24, 0x00	; 0
    2a64:	90 e0       	ldi	r25, 0x00	; 0
    2a66:	a0 e2       	ldi	r26, 0x20	; 32
    2a68:	b1 e4       	ldi	r27, 0x41	; 65
    2a6a:	80 83       	st	Z, r24
    2a6c:	91 83       	std	Z+1, r25	; 0x01
    2a6e:	a2 83       	std	Z+2, r26	; 0x02
    2a70:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a72:	8e 01       	movw	r16, r28
    2a74:	05 5a       	subi	r16, 0xA5	; 165
    2a76:	1f 4f       	sbci	r17, 0xFF	; 255
    2a78:	fe 01       	movw	r30, r28
    2a7a:	e1 5a       	subi	r30, 0xA1	; 161
    2a7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a7e:	60 81       	ld	r22, Z
    2a80:	71 81       	ldd	r23, Z+1	; 0x01
    2a82:	82 81       	ldd	r24, Z+2	; 0x02
    2a84:	93 81       	ldd	r25, Z+3	; 0x03
    2a86:	2d ec       	ldi	r18, 0xCD	; 205
    2a88:	3c ec       	ldi	r19, 0xCC	; 204
    2a8a:	4c e2       	ldi	r20, 0x2C	; 44
    2a8c:	55 e4       	ldi	r21, 0x45	; 69
    2a8e:	0e 94 ee 1b 	call	0x37dc	; 0x37dc <__mulsf3>
    2a92:	dc 01       	movw	r26, r24
    2a94:	cb 01       	movw	r24, r22
    2a96:	f8 01       	movw	r30, r16
    2a98:	80 83       	st	Z, r24
    2a9a:	91 83       	std	Z+1, r25	; 0x01
    2a9c:	a2 83       	std	Z+2, r26	; 0x02
    2a9e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2aa0:	fe 01       	movw	r30, r28
    2aa2:	e5 5a       	subi	r30, 0xA5	; 165
    2aa4:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa6:	60 81       	ld	r22, Z
    2aa8:	71 81       	ldd	r23, Z+1	; 0x01
    2aaa:	82 81       	ldd	r24, Z+2	; 0x02
    2aac:	93 81       	ldd	r25, Z+3	; 0x03
    2aae:	20 e0       	ldi	r18, 0x00	; 0
    2ab0:	30 e0       	ldi	r19, 0x00	; 0
    2ab2:	40 e8       	ldi	r20, 0x80	; 128
    2ab4:	5f e3       	ldi	r21, 0x3F	; 63
    2ab6:	0e 94 f4 1d 	call	0x3be8	; 0x3be8 <__ltsf2>
    2aba:	88 23       	and	r24, r24
    2abc:	44 f4       	brge	.+16     	; 0x2ace <__stack+0x8cf>
		__ticks = 1;
    2abe:	fe 01       	movw	r30, r28
    2ac0:	e7 5a       	subi	r30, 0xA7	; 167
    2ac2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac4:	81 e0       	ldi	r24, 0x01	; 1
    2ac6:	90 e0       	ldi	r25, 0x00	; 0
    2ac8:	91 83       	std	Z+1, r25	; 0x01
    2aca:	80 83       	st	Z, r24
    2acc:	64 c0       	rjmp	.+200    	; 0x2b96 <__stack+0x997>
	else if (__tmp > 65535)
    2ace:	fe 01       	movw	r30, r28
    2ad0:	e5 5a       	subi	r30, 0xA5	; 165
    2ad2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad4:	60 81       	ld	r22, Z
    2ad6:	71 81       	ldd	r23, Z+1	; 0x01
    2ad8:	82 81       	ldd	r24, Z+2	; 0x02
    2ada:	93 81       	ldd	r25, Z+3	; 0x03
    2adc:	20 e0       	ldi	r18, 0x00	; 0
    2ade:	3f ef       	ldi	r19, 0xFF	; 255
    2ae0:	4f e7       	ldi	r20, 0x7F	; 127
    2ae2:	57 e4       	ldi	r21, 0x47	; 71
    2ae4:	0e 94 94 1d 	call	0x3b28	; 0x3b28 <__gtsf2>
    2ae8:	18 16       	cp	r1, r24
    2aea:	0c f0       	brlt	.+2      	; 0x2aee <__stack+0x8ef>
    2aec:	43 c0       	rjmp	.+134    	; 0x2b74 <__stack+0x975>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2aee:	fe 01       	movw	r30, r28
    2af0:	e1 5a       	subi	r30, 0xA1	; 161
    2af2:	ff 4f       	sbci	r31, 0xFF	; 255
    2af4:	60 81       	ld	r22, Z
    2af6:	71 81       	ldd	r23, Z+1	; 0x01
    2af8:	82 81       	ldd	r24, Z+2	; 0x02
    2afa:	93 81       	ldd	r25, Z+3	; 0x03
    2afc:	20 e0       	ldi	r18, 0x00	; 0
    2afe:	30 e0       	ldi	r19, 0x00	; 0
    2b00:	40 e2       	ldi	r20, 0x20	; 32
    2b02:	51 e4       	ldi	r21, 0x41	; 65
    2b04:	0e 94 ee 1b 	call	0x37dc	; 0x37dc <__mulsf3>
    2b08:	dc 01       	movw	r26, r24
    2b0a:	cb 01       	movw	r24, r22
    2b0c:	8e 01       	movw	r16, r28
    2b0e:	07 5a       	subi	r16, 0xA7	; 167
    2b10:	1f 4f       	sbci	r17, 0xFF	; 255
    2b12:	bc 01       	movw	r22, r24
    2b14:	cd 01       	movw	r24, r26
    2b16:	0e 94 18 1a 	call	0x3430	; 0x3430 <__fixunssfsi>
    2b1a:	dc 01       	movw	r26, r24
    2b1c:	cb 01       	movw	r24, r22
    2b1e:	f8 01       	movw	r30, r16
    2b20:	91 83       	std	Z+1, r25	; 0x01
    2b22:	80 83       	st	Z, r24
    2b24:	1f c0       	rjmp	.+62     	; 0x2b64 <__stack+0x965>
    2b26:	fe 01       	movw	r30, r28
    2b28:	e9 5a       	subi	r30, 0xA9	; 169
    2b2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b2c:	84 e1       	ldi	r24, 0x14	; 20
    2b2e:	91 e0       	ldi	r25, 0x01	; 1
    2b30:	91 83       	std	Z+1, r25	; 0x01
    2b32:	80 83       	st	Z, r24
    2b34:	fe 01       	movw	r30, r28
    2b36:	e9 5a       	subi	r30, 0xA9	; 169
    2b38:	ff 4f       	sbci	r31, 0xFF	; 255
    2b3a:	80 81       	ld	r24, Z
    2b3c:	91 81       	ldd	r25, Z+1	; 0x01
    2b3e:	01 97       	sbiw	r24, 0x01	; 1
    2b40:	f1 f7       	brne	.-4      	; 0x2b3e <__stack+0x93f>
    2b42:	fe 01       	movw	r30, r28
    2b44:	e9 5a       	subi	r30, 0xA9	; 169
    2b46:	ff 4f       	sbci	r31, 0xFF	; 255
    2b48:	91 83       	std	Z+1, r25	; 0x01
    2b4a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b4c:	de 01       	movw	r26, r28
    2b4e:	a7 5a       	subi	r26, 0xA7	; 167
    2b50:	bf 4f       	sbci	r27, 0xFF	; 255
    2b52:	fe 01       	movw	r30, r28
    2b54:	e7 5a       	subi	r30, 0xA7	; 167
    2b56:	ff 4f       	sbci	r31, 0xFF	; 255
    2b58:	80 81       	ld	r24, Z
    2b5a:	91 81       	ldd	r25, Z+1	; 0x01
    2b5c:	01 97       	sbiw	r24, 0x01	; 1
    2b5e:	11 96       	adiw	r26, 0x01	; 1
    2b60:	9c 93       	st	X, r25
    2b62:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b64:	fe 01       	movw	r30, r28
    2b66:	e7 5a       	subi	r30, 0xA7	; 167
    2b68:	ff 4f       	sbci	r31, 0xFF	; 255
    2b6a:	80 81       	ld	r24, Z
    2b6c:	91 81       	ldd	r25, Z+1	; 0x01
    2b6e:	00 97       	sbiw	r24, 0x00	; 0
    2b70:	d1 f6       	brne	.-76     	; 0x2b26 <__stack+0x927>
    2b72:	27 c0       	rjmp	.+78     	; 0x2bc2 <__stack+0x9c3>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b74:	8e 01       	movw	r16, r28
    2b76:	07 5a       	subi	r16, 0xA7	; 167
    2b78:	1f 4f       	sbci	r17, 0xFF	; 255
    2b7a:	fe 01       	movw	r30, r28
    2b7c:	e5 5a       	subi	r30, 0xA5	; 165
    2b7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b80:	60 81       	ld	r22, Z
    2b82:	71 81       	ldd	r23, Z+1	; 0x01
    2b84:	82 81       	ldd	r24, Z+2	; 0x02
    2b86:	93 81       	ldd	r25, Z+3	; 0x03
    2b88:	0e 94 18 1a 	call	0x3430	; 0x3430 <__fixunssfsi>
    2b8c:	dc 01       	movw	r26, r24
    2b8e:	cb 01       	movw	r24, r22
    2b90:	f8 01       	movw	r30, r16
    2b92:	91 83       	std	Z+1, r25	; 0x01
    2b94:	80 83       	st	Z, r24
    2b96:	de 01       	movw	r26, r28
    2b98:	ab 5a       	subi	r26, 0xAB	; 171
    2b9a:	bf 4f       	sbci	r27, 0xFF	; 255
    2b9c:	fe 01       	movw	r30, r28
    2b9e:	e7 5a       	subi	r30, 0xA7	; 167
    2ba0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba2:	80 81       	ld	r24, Z
    2ba4:	91 81       	ldd	r25, Z+1	; 0x01
    2ba6:	8d 93       	st	X+, r24
    2ba8:	9c 93       	st	X, r25
    2baa:	fe 01       	movw	r30, r28
    2bac:	eb 5a       	subi	r30, 0xAB	; 171
    2bae:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb0:	80 81       	ld	r24, Z
    2bb2:	91 81       	ldd	r25, Z+1	; 0x01
    2bb4:	01 97       	sbiw	r24, 0x01	; 1
    2bb6:	f1 f7       	brne	.-4      	; 0x2bb4 <__stack+0x9b5>
    2bb8:	fe 01       	movw	r30, r28
    2bba:	eb 5a       	subi	r30, 0xAB	; 171
    2bbc:	ff 4f       	sbci	r31, 0xFF	; 255
    2bbe:	91 83       	std	Z+1, r25	; 0x01
    2bc0:	80 83       	st	Z, r24
    2bc2:	fe 01       	movw	r30, r28
    2bc4:	ef 5a       	subi	r30, 0xAF	; 175
    2bc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc8:	80 e0       	ldi	r24, 0x00	; 0
    2bca:	90 e0       	ldi	r25, 0x00	; 0
    2bcc:	aa e7       	ldi	r26, 0x7A	; 122
    2bce:	b4 e4       	ldi	r27, 0x44	; 68
    2bd0:	80 83       	st	Z, r24
    2bd2:	91 83       	std	Z+1, r25	; 0x01
    2bd4:	a2 83       	std	Z+2, r26	; 0x02
    2bd6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bd8:	8e 01       	movw	r16, r28
    2bda:	03 5b       	subi	r16, 0xB3	; 179
    2bdc:	1f 4f       	sbci	r17, 0xFF	; 255
    2bde:	fe 01       	movw	r30, r28
    2be0:	ef 5a       	subi	r30, 0xAF	; 175
    2be2:	ff 4f       	sbci	r31, 0xFF	; 255
    2be4:	60 81       	ld	r22, Z
    2be6:	71 81       	ldd	r23, Z+1	; 0x01
    2be8:	82 81       	ldd	r24, Z+2	; 0x02
    2bea:	93 81       	ldd	r25, Z+3	; 0x03
    2bec:	2d ec       	ldi	r18, 0xCD	; 205
    2bee:	3c ec       	ldi	r19, 0xCC	; 204
    2bf0:	4c e2       	ldi	r20, 0x2C	; 44
    2bf2:	55 e4       	ldi	r21, 0x45	; 69
    2bf4:	0e 94 ee 1b 	call	0x37dc	; 0x37dc <__mulsf3>
    2bf8:	dc 01       	movw	r26, r24
    2bfa:	cb 01       	movw	r24, r22
    2bfc:	f8 01       	movw	r30, r16
    2bfe:	80 83       	st	Z, r24
    2c00:	91 83       	std	Z+1, r25	; 0x01
    2c02:	a2 83       	std	Z+2, r26	; 0x02
    2c04:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c06:	fe 01       	movw	r30, r28
    2c08:	e3 5b       	subi	r30, 0xB3	; 179
    2c0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c0c:	60 81       	ld	r22, Z
    2c0e:	71 81       	ldd	r23, Z+1	; 0x01
    2c10:	82 81       	ldd	r24, Z+2	; 0x02
    2c12:	93 81       	ldd	r25, Z+3	; 0x03
    2c14:	20 e0       	ldi	r18, 0x00	; 0
    2c16:	30 e0       	ldi	r19, 0x00	; 0
    2c18:	40 e8       	ldi	r20, 0x80	; 128
    2c1a:	5f e3       	ldi	r21, 0x3F	; 63
    2c1c:	0e 94 f4 1d 	call	0x3be8	; 0x3be8 <__ltsf2>
    2c20:	88 23       	and	r24, r24
    2c22:	44 f4       	brge	.+16     	; 0x2c34 <__stack+0xa35>
		__ticks = 1;
    2c24:	fe 01       	movw	r30, r28
    2c26:	e5 5b       	subi	r30, 0xB5	; 181
    2c28:	ff 4f       	sbci	r31, 0xFF	; 255
    2c2a:	81 e0       	ldi	r24, 0x01	; 1
    2c2c:	90 e0       	ldi	r25, 0x00	; 0
    2c2e:	91 83       	std	Z+1, r25	; 0x01
    2c30:	80 83       	st	Z, r24
    2c32:	64 c0       	rjmp	.+200    	; 0x2cfc <__stack+0xafd>
	else if (__tmp > 65535)
    2c34:	fe 01       	movw	r30, r28
    2c36:	e3 5b       	subi	r30, 0xB3	; 179
    2c38:	ff 4f       	sbci	r31, 0xFF	; 255
    2c3a:	60 81       	ld	r22, Z
    2c3c:	71 81       	ldd	r23, Z+1	; 0x01
    2c3e:	82 81       	ldd	r24, Z+2	; 0x02
    2c40:	93 81       	ldd	r25, Z+3	; 0x03
    2c42:	20 e0       	ldi	r18, 0x00	; 0
    2c44:	3f ef       	ldi	r19, 0xFF	; 255
    2c46:	4f e7       	ldi	r20, 0x7F	; 127
    2c48:	57 e4       	ldi	r21, 0x47	; 71
    2c4a:	0e 94 94 1d 	call	0x3b28	; 0x3b28 <__gtsf2>
    2c4e:	18 16       	cp	r1, r24
    2c50:	0c f0       	brlt	.+2      	; 0x2c54 <__stack+0xa55>
    2c52:	43 c0       	rjmp	.+134    	; 0x2cda <__stack+0xadb>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c54:	fe 01       	movw	r30, r28
    2c56:	ef 5a       	subi	r30, 0xAF	; 175
    2c58:	ff 4f       	sbci	r31, 0xFF	; 255
    2c5a:	60 81       	ld	r22, Z
    2c5c:	71 81       	ldd	r23, Z+1	; 0x01
    2c5e:	82 81       	ldd	r24, Z+2	; 0x02
    2c60:	93 81       	ldd	r25, Z+3	; 0x03
    2c62:	20 e0       	ldi	r18, 0x00	; 0
    2c64:	30 e0       	ldi	r19, 0x00	; 0
    2c66:	40 e2       	ldi	r20, 0x20	; 32
    2c68:	51 e4       	ldi	r21, 0x41	; 65
    2c6a:	0e 94 ee 1b 	call	0x37dc	; 0x37dc <__mulsf3>
    2c6e:	dc 01       	movw	r26, r24
    2c70:	cb 01       	movw	r24, r22
    2c72:	8e 01       	movw	r16, r28
    2c74:	05 5b       	subi	r16, 0xB5	; 181
    2c76:	1f 4f       	sbci	r17, 0xFF	; 255
    2c78:	bc 01       	movw	r22, r24
    2c7a:	cd 01       	movw	r24, r26
    2c7c:	0e 94 18 1a 	call	0x3430	; 0x3430 <__fixunssfsi>
    2c80:	dc 01       	movw	r26, r24
    2c82:	cb 01       	movw	r24, r22
    2c84:	f8 01       	movw	r30, r16
    2c86:	91 83       	std	Z+1, r25	; 0x01
    2c88:	80 83       	st	Z, r24
    2c8a:	1f c0       	rjmp	.+62     	; 0x2cca <__stack+0xacb>
    2c8c:	fe 01       	movw	r30, r28
    2c8e:	e7 5b       	subi	r30, 0xB7	; 183
    2c90:	ff 4f       	sbci	r31, 0xFF	; 255
    2c92:	84 e1       	ldi	r24, 0x14	; 20
    2c94:	91 e0       	ldi	r25, 0x01	; 1
    2c96:	91 83       	std	Z+1, r25	; 0x01
    2c98:	80 83       	st	Z, r24
    2c9a:	fe 01       	movw	r30, r28
    2c9c:	e7 5b       	subi	r30, 0xB7	; 183
    2c9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca0:	80 81       	ld	r24, Z
    2ca2:	91 81       	ldd	r25, Z+1	; 0x01
    2ca4:	01 97       	sbiw	r24, 0x01	; 1
    2ca6:	f1 f7       	brne	.-4      	; 0x2ca4 <__stack+0xaa5>
    2ca8:	fe 01       	movw	r30, r28
    2caa:	e7 5b       	subi	r30, 0xB7	; 183
    2cac:	ff 4f       	sbci	r31, 0xFF	; 255
    2cae:	91 83       	std	Z+1, r25	; 0x01
    2cb0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cb2:	de 01       	movw	r26, r28
    2cb4:	a5 5b       	subi	r26, 0xB5	; 181
    2cb6:	bf 4f       	sbci	r27, 0xFF	; 255
    2cb8:	fe 01       	movw	r30, r28
    2cba:	e5 5b       	subi	r30, 0xB5	; 181
    2cbc:	ff 4f       	sbci	r31, 0xFF	; 255
    2cbe:	80 81       	ld	r24, Z
    2cc0:	91 81       	ldd	r25, Z+1	; 0x01
    2cc2:	01 97       	sbiw	r24, 0x01	; 1
    2cc4:	11 96       	adiw	r26, 0x01	; 1
    2cc6:	9c 93       	st	X, r25
    2cc8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cca:	fe 01       	movw	r30, r28
    2ccc:	e5 5b       	subi	r30, 0xB5	; 181
    2cce:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd0:	80 81       	ld	r24, Z
    2cd2:	91 81       	ldd	r25, Z+1	; 0x01
    2cd4:	00 97       	sbiw	r24, 0x00	; 0
    2cd6:	d1 f6       	brne	.-76     	; 0x2c8c <__stack+0xa8d>
    2cd8:	27 c0       	rjmp	.+78     	; 0x2d28 <__stack+0xb29>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cda:	8e 01       	movw	r16, r28
    2cdc:	05 5b       	subi	r16, 0xB5	; 181
    2cde:	1f 4f       	sbci	r17, 0xFF	; 255
    2ce0:	fe 01       	movw	r30, r28
    2ce2:	e3 5b       	subi	r30, 0xB3	; 179
    2ce4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce6:	60 81       	ld	r22, Z
    2ce8:	71 81       	ldd	r23, Z+1	; 0x01
    2cea:	82 81       	ldd	r24, Z+2	; 0x02
    2cec:	93 81       	ldd	r25, Z+3	; 0x03
    2cee:	0e 94 18 1a 	call	0x3430	; 0x3430 <__fixunssfsi>
    2cf2:	dc 01       	movw	r26, r24
    2cf4:	cb 01       	movw	r24, r22
    2cf6:	f8 01       	movw	r30, r16
    2cf8:	91 83       	std	Z+1, r25	; 0x01
    2cfa:	80 83       	st	Z, r24
    2cfc:	de 01       	movw	r26, r28
    2cfe:	a9 5b       	subi	r26, 0xB9	; 185
    2d00:	bf 4f       	sbci	r27, 0xFF	; 255
    2d02:	fe 01       	movw	r30, r28
    2d04:	e5 5b       	subi	r30, 0xB5	; 181
    2d06:	ff 4f       	sbci	r31, 0xFF	; 255
    2d08:	80 81       	ld	r24, Z
    2d0a:	91 81       	ldd	r25, Z+1	; 0x01
    2d0c:	8d 93       	st	X+, r24
    2d0e:	9c 93       	st	X, r25
    2d10:	fe 01       	movw	r30, r28
    2d12:	e9 5b       	subi	r30, 0xB9	; 185
    2d14:	ff 4f       	sbci	r31, 0xFF	; 255
    2d16:	80 81       	ld	r24, Z
    2d18:	91 81       	ldd	r25, Z+1	; 0x01
    2d1a:	01 97       	sbiw	r24, 0x01	; 1
    2d1c:	f1 f7       	brne	.-4      	; 0x2d1a <__stack+0xb1b>
    2d1e:	fe 01       	movw	r30, r28
    2d20:	e9 5b       	subi	r30, 0xB9	; 185
    2d22:	ff 4f       	sbci	r31, 0xFF	; 255
    2d24:	91 83       	std	Z+1, r25	; 0x01
    2d26:	80 83       	st	Z, r24
  			_delay_ms(10);
			_delay_ms(1000);
		
			servo_1(0);								//code for upward movement of two servo motors 
    2d28:	80 e0       	ldi	r24, 0x00	; 0
    2d2a:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <servo_1>
			servo_2(185);							// that holds the gripper
    2d2e:	89 eb       	ldi	r24, 0xB9	; 185
    2d30:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <servo_2>
			
			data='2';
    2d34:	82 e3       	ldi	r24, 0x32	; 50
    2d36:	80 93 1e 03 	sts	0x031E, r24
    2d3a:	8f c0       	rjmp	.+286    	; 0x2e5a <__stack+0xc5b>

			while(data=='2')				
			{
				velocity(150,150);
    2d3c:	86 e9       	ldi	r24, 0x96	; 150
    2d3e:	66 e9       	ldi	r22, 0x96	; 150
    2d40:	0e 94 57 0b 	call	0x16ae	; 0x16ae <velocity>
				angle_rotate_left(3);
    2d44:	83 e0       	ldi	r24, 0x03	; 3
    2d46:	90 e0       	ldi	r25, 0x00	; 0
    2d48:	0e 94 a4 0c 	call	0x1948	; 0x1948 <angle_rotate_left>
				stop();
    2d4c:	0e 94 42 0b 	call	0x1684	; 0x1684 <stop>
    2d50:	fe 01       	movw	r30, r28
    2d52:	ed 5b       	subi	r30, 0xBD	; 189
    2d54:	ff 4f       	sbci	r31, 0xFF	; 255
    2d56:	80 e0       	ldi	r24, 0x00	; 0
    2d58:	90 e0       	ldi	r25, 0x00	; 0
    2d5a:	aa ef       	ldi	r26, 0xFA	; 250
    2d5c:	b3 e4       	ldi	r27, 0x43	; 67
    2d5e:	80 83       	st	Z, r24
    2d60:	91 83       	std	Z+1, r25	; 0x01
    2d62:	a2 83       	std	Z+2, r26	; 0x02
    2d64:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d66:	8e 01       	movw	r16, r28
    2d68:	01 5c       	subi	r16, 0xC1	; 193
    2d6a:	1f 4f       	sbci	r17, 0xFF	; 255
    2d6c:	fe 01       	movw	r30, r28
    2d6e:	ed 5b       	subi	r30, 0xBD	; 189
    2d70:	ff 4f       	sbci	r31, 0xFF	; 255
    2d72:	60 81       	ld	r22, Z
    2d74:	71 81       	ldd	r23, Z+1	; 0x01
    2d76:	82 81       	ldd	r24, Z+2	; 0x02
    2d78:	93 81       	ldd	r25, Z+3	; 0x03
    2d7a:	2d ec       	ldi	r18, 0xCD	; 205
    2d7c:	3c ec       	ldi	r19, 0xCC	; 204
    2d7e:	4c e2       	ldi	r20, 0x2C	; 44
    2d80:	55 e4       	ldi	r21, 0x45	; 69
    2d82:	0e 94 ee 1b 	call	0x37dc	; 0x37dc <__mulsf3>
    2d86:	dc 01       	movw	r26, r24
    2d88:	cb 01       	movw	r24, r22
    2d8a:	f8 01       	movw	r30, r16
    2d8c:	80 83       	st	Z, r24
    2d8e:	91 83       	std	Z+1, r25	; 0x01
    2d90:	a2 83       	std	Z+2, r26	; 0x02
    2d92:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2d94:	fe 01       	movw	r30, r28
    2d96:	ff 96       	adiw	r30, 0x3f	; 63
    2d98:	60 81       	ld	r22, Z
    2d9a:	71 81       	ldd	r23, Z+1	; 0x01
    2d9c:	82 81       	ldd	r24, Z+2	; 0x02
    2d9e:	93 81       	ldd	r25, Z+3	; 0x03
    2da0:	20 e0       	ldi	r18, 0x00	; 0
    2da2:	30 e0       	ldi	r19, 0x00	; 0
    2da4:	40 e8       	ldi	r20, 0x80	; 128
    2da6:	5f e3       	ldi	r21, 0x3F	; 63
    2da8:	0e 94 f4 1d 	call	0x3be8	; 0x3be8 <__ltsf2>
    2dac:	88 23       	and	r24, r24
    2dae:	2c f4       	brge	.+10     	; 0x2dba <__stack+0xbbb>
		__ticks = 1;
    2db0:	81 e0       	ldi	r24, 0x01	; 1
    2db2:	90 e0       	ldi	r25, 0x00	; 0
    2db4:	9e af       	std	Y+62, r25	; 0x3e
    2db6:	8d af       	std	Y+61, r24	; 0x3d
    2db8:	46 c0       	rjmp	.+140    	; 0x2e46 <__stack+0xc47>
	else if (__tmp > 65535)
    2dba:	fe 01       	movw	r30, r28
    2dbc:	ff 96       	adiw	r30, 0x3f	; 63
    2dbe:	60 81       	ld	r22, Z
    2dc0:	71 81       	ldd	r23, Z+1	; 0x01
    2dc2:	82 81       	ldd	r24, Z+2	; 0x02
    2dc4:	93 81       	ldd	r25, Z+3	; 0x03
    2dc6:	20 e0       	ldi	r18, 0x00	; 0
    2dc8:	3f ef       	ldi	r19, 0xFF	; 255
    2dca:	4f e7       	ldi	r20, 0x7F	; 127
    2dcc:	57 e4       	ldi	r21, 0x47	; 71
    2dce:	0e 94 94 1d 	call	0x3b28	; 0x3b28 <__gtsf2>
    2dd2:	18 16       	cp	r1, r24
    2dd4:	64 f5       	brge	.+88     	; 0x2e2e <__stack+0xc2f>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dd6:	fe 01       	movw	r30, r28
    2dd8:	ed 5b       	subi	r30, 0xBD	; 189
    2dda:	ff 4f       	sbci	r31, 0xFF	; 255
    2ddc:	60 81       	ld	r22, Z
    2dde:	71 81       	ldd	r23, Z+1	; 0x01
    2de0:	82 81       	ldd	r24, Z+2	; 0x02
    2de2:	93 81       	ldd	r25, Z+3	; 0x03
    2de4:	20 e0       	ldi	r18, 0x00	; 0
    2de6:	30 e0       	ldi	r19, 0x00	; 0
    2de8:	40 e2       	ldi	r20, 0x20	; 32
    2dea:	51 e4       	ldi	r21, 0x41	; 65
    2dec:	0e 94 ee 1b 	call	0x37dc	; 0x37dc <__mulsf3>
    2df0:	dc 01       	movw	r26, r24
    2df2:	cb 01       	movw	r24, r22
    2df4:	bc 01       	movw	r22, r24
    2df6:	cd 01       	movw	r24, r26
    2df8:	0e 94 18 1a 	call	0x3430	; 0x3430 <__fixunssfsi>
    2dfc:	dc 01       	movw	r26, r24
    2dfe:	cb 01       	movw	r24, r22
    2e00:	9e af       	std	Y+62, r25	; 0x3e
    2e02:	8d af       	std	Y+61, r24	; 0x3d
    2e04:	0f c0       	rjmp	.+30     	; 0x2e24 <__stack+0xc25>
    2e06:	84 e1       	ldi	r24, 0x14	; 20
    2e08:	91 e0       	ldi	r25, 0x01	; 1
    2e0a:	9c af       	std	Y+60, r25	; 0x3c
    2e0c:	8b af       	std	Y+59, r24	; 0x3b
    2e0e:	8b ad       	ldd	r24, Y+59	; 0x3b
    2e10:	9c ad       	ldd	r25, Y+60	; 0x3c
    2e12:	01 97       	sbiw	r24, 0x01	; 1
    2e14:	f1 f7       	brne	.-4      	; 0x2e12 <__stack+0xc13>
    2e16:	9c af       	std	Y+60, r25	; 0x3c
    2e18:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e1a:	8d ad       	ldd	r24, Y+61	; 0x3d
    2e1c:	9e ad       	ldd	r25, Y+62	; 0x3e
    2e1e:	01 97       	sbiw	r24, 0x01	; 1
    2e20:	9e af       	std	Y+62, r25	; 0x3e
    2e22:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e24:	8d ad       	ldd	r24, Y+61	; 0x3d
    2e26:	9e ad       	ldd	r25, Y+62	; 0x3e
    2e28:	00 97       	sbiw	r24, 0x00	; 0
    2e2a:	69 f7       	brne	.-38     	; 0x2e06 <__stack+0xc07>
    2e2c:	16 c0       	rjmp	.+44     	; 0x2e5a <__stack+0xc5b>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e2e:	fe 01       	movw	r30, r28
    2e30:	ff 96       	adiw	r30, 0x3f	; 63
    2e32:	60 81       	ld	r22, Z
    2e34:	71 81       	ldd	r23, Z+1	; 0x01
    2e36:	82 81       	ldd	r24, Z+2	; 0x02
    2e38:	93 81       	ldd	r25, Z+3	; 0x03
    2e3a:	0e 94 18 1a 	call	0x3430	; 0x3430 <__fixunssfsi>
    2e3e:	dc 01       	movw	r26, r24
    2e40:	cb 01       	movw	r24, r22
    2e42:	9e af       	std	Y+62, r25	; 0x3e
    2e44:	8d af       	std	Y+61, r24	; 0x3d
    2e46:	8d ad       	ldd	r24, Y+61	; 0x3d
    2e48:	9e ad       	ldd	r25, Y+62	; 0x3e
    2e4a:	9a af       	std	Y+58, r25	; 0x3a
    2e4c:	89 af       	std	Y+57, r24	; 0x39
    2e4e:	89 ad       	ldd	r24, Y+57	; 0x39
    2e50:	9a ad       	ldd	r25, Y+58	; 0x3a
    2e52:	01 97       	sbiw	r24, 0x01	; 1
    2e54:	f1 f7       	brne	.-4      	; 0x2e52 <__stack+0xc53>
    2e56:	9a af       	std	Y+58, r25	; 0x3a
    2e58:	89 af       	std	Y+57, r24	; 0x39
			servo_1(0);								//code for upward movement of two servo motors 
			servo_2(185);							// that holds the gripper
			
			data='2';

			while(data=='2')				
    2e5a:	80 91 1e 03 	lds	r24, 0x031E
    2e5e:	82 33       	cpi	r24, 0x32	; 50
    2e60:	09 f4       	brne	.+2      	; 0x2e64 <__stack+0xc65>
    2e62:	6c cf       	rjmp	.-296    	; 0x2d3c <__stack+0xb3d>
				stop();
				_delay_ms(500);
			}


			sharp = ADC_Conversion(11);						//Stores the Analog value of front sharp connected to ADC channel 11 into variable "sharp"
    2e64:	8b e0       	ldi	r24, 0x0B	; 11
    2e66:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <ADC_Conversion>
    2e6a:	80 93 23 03 	sts	0x0323, r24
			value = Sharp_GP2D12_estimation(sharp);			//Stores Distance calsulated in a variable "value".
    2e6e:	80 91 23 03 	lds	r24, 0x0323
    2e72:	0e 94 57 0e 	call	0x1cae	; 0x1cae <Sharp_GP2D12_estimation>
    2e76:	fe 01       	movw	r30, r28
    2e78:	e8 54       	subi	r30, 0x48	; 72
    2e7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e7c:	91 83       	std	Z+1, r25	; 0x01
    2e7e:	80 83       	st	Z, r24
			lcd_print(1,1,value,3);
    2e80:	fe 01       	movw	r30, r28
    2e82:	e8 54       	subi	r30, 0x48	; 72
    2e84:	ff 4f       	sbci	r31, 0xFF	; 255
    2e86:	20 81       	ld	r18, Z
    2e88:	31 81       	ldd	r19, Z+1	; 0x01
    2e8a:	81 e0       	ldi	r24, 0x01	; 1
    2e8c:	61 e0       	ldi	r22, 0x01	; 1
    2e8e:	a9 01       	movw	r20, r18
    2e90:	23 e0       	ldi	r18, 0x03	; 3
    2e92:	30 e0       	ldi	r19, 0x00	; 0
    2e94:	0e 94 86 09 	call	0x130c	; 0x130c <lcd_print>
			sharp1 = ADC_Conversion(10);					//Stores the Analog value of front sharp connected to ADC channel 11 into variable "sharp"
    2e98:	8a e0       	ldi	r24, 0x0A	; 10
    2e9a:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <ADC_Conversion>
    2e9e:	80 93 1b 03 	sts	0x031B, r24
			value1 = Sharp_GP2D12_estimation(sharp1);		//Stores Distance calsulated in a variable "value".
    2ea2:	80 91 1b 03 	lds	r24, 0x031B
    2ea6:	0e 94 57 0e 	call	0x1cae	; 0x1cae <Sharp_GP2D12_estimation>
    2eaa:	fe 01       	movw	r30, r28
    2eac:	ea 54       	subi	r30, 0x4A	; 74
    2eae:	ff 4f       	sbci	r31, 0xFF	; 255
    2eb0:	91 83       	std	Z+1, r25	; 0x01
    2eb2:	80 83       	st	Z, r24
			lcd_print(1,5,value1,3);
    2eb4:	fe 01       	movw	r30, r28
    2eb6:	ea 54       	subi	r30, 0x4A	; 74
    2eb8:	ff 4f       	sbci	r31, 0xFF	; 255
    2eba:	20 81       	ld	r18, Z
    2ebc:	31 81       	ldd	r19, Z+1	; 0x01
    2ebe:	81 e0       	ldi	r24, 0x01	; 1
    2ec0:	65 e0       	ldi	r22, 0x05	; 5
    2ec2:	a9 01       	movw	r20, r18
    2ec4:	23 e0       	ldi	r18, 0x03	; 3
    2ec6:	30 e0       	ldi	r19, 0x00	; 0
    2ec8:	0e 94 86 09 	call	0x130c	; 0x130c <lcd_print>
    2ecc:	36 c0       	rjmp	.+108    	; 0x2f3a <__stack+0xd3b>

			while(value>110 && value1>110)
			{
				sharp = ADC_Conversion(11);					//Stores the Analog value of front sharp connected to ADC channel 11 into variable "sharp"
    2ece:	8b e0       	ldi	r24, 0x0B	; 11
    2ed0:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <ADC_Conversion>
    2ed4:	80 93 23 03 	sts	0x0323, r24
				value = Sharp_GP2D12_estimation(sharp);		//Stores Distance calsulated in a variable "value".
    2ed8:	80 91 23 03 	lds	r24, 0x0323
    2edc:	0e 94 57 0e 	call	0x1cae	; 0x1cae <Sharp_GP2D12_estimation>
    2ee0:	fe 01       	movw	r30, r28
    2ee2:	e8 54       	subi	r30, 0x48	; 72
    2ee4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ee6:	91 83       	std	Z+1, r25	; 0x01
    2ee8:	80 83       	st	Z, r24
				lcd_print(1,1,value,3);
    2eea:	fe 01       	movw	r30, r28
    2eec:	e8 54       	subi	r30, 0x48	; 72
    2eee:	ff 4f       	sbci	r31, 0xFF	; 255
    2ef0:	20 81       	ld	r18, Z
    2ef2:	31 81       	ldd	r19, Z+1	; 0x01
    2ef4:	81 e0       	ldi	r24, 0x01	; 1
    2ef6:	61 e0       	ldi	r22, 0x01	; 1
    2ef8:	a9 01       	movw	r20, r18
    2efa:	23 e0       	ldi	r18, 0x03	; 3
    2efc:	30 e0       	ldi	r19, 0x00	; 0
    2efe:	0e 94 86 09 	call	0x130c	; 0x130c <lcd_print>
				sharp1 = ADC_Conversion(10);				//Stores the Analog value of front sharp connected to ADC channel 11 into variable "sharp"
    2f02:	8a e0       	ldi	r24, 0x0A	; 10
    2f04:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <ADC_Conversion>
    2f08:	80 93 1b 03 	sts	0x031B, r24
				value1 = Sharp_GP2D12_estimation(sharp1);	//Stores Distance calsulated in a variable "value".
    2f0c:	80 91 1b 03 	lds	r24, 0x031B
    2f10:	0e 94 57 0e 	call	0x1cae	; 0x1cae <Sharp_GP2D12_estimation>
    2f14:	fe 01       	movw	r30, r28
    2f16:	ea 54       	subi	r30, 0x4A	; 74
    2f18:	ff 4f       	sbci	r31, 0xFF	; 255
    2f1a:	91 83       	std	Z+1, r25	; 0x01
    2f1c:	80 83       	st	Z, r24
				lcd_print(1,5,value1,3);
    2f1e:	fe 01       	movw	r30, r28
    2f20:	ea 54       	subi	r30, 0x4A	; 74
    2f22:	ff 4f       	sbci	r31, 0xFF	; 255
    2f24:	20 81       	ld	r18, Z
    2f26:	31 81       	ldd	r19, Z+1	; 0x01
    2f28:	81 e0       	ldi	r24, 0x01	; 1
    2f2a:	65 e0       	ldi	r22, 0x05	; 5
    2f2c:	a9 01       	movw	r20, r18
    2f2e:	23 e0       	ldi	r18, 0x03	; 3
    2f30:	30 e0       	ldi	r19, 0x00	; 0
    2f32:	0e 94 86 09 	call	0x130c	; 0x130c <lcd_print>

				forward();
    2f36:	0e 94 16 0b 	call	0x162c	; 0x162c <forward>
			lcd_print(1,1,value,3);
			sharp1 = ADC_Conversion(10);					//Stores the Analog value of front sharp connected to ADC channel 11 into variable "sharp"
			value1 = Sharp_GP2D12_estimation(sharp1);		//Stores Distance calsulated in a variable "value".
			lcd_print(1,5,value1,3);

			while(value>110 && value1>110)
    2f3a:	fe 01       	movw	r30, r28
    2f3c:	e8 54       	subi	r30, 0x48	; 72
    2f3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f40:	80 81       	ld	r24, Z
    2f42:	91 81       	ldd	r25, Z+1	; 0x01
    2f44:	8f 36       	cpi	r24, 0x6F	; 111
    2f46:	91 05       	cpc	r25, r1
    2f48:	48 f0       	brcs	.+18     	; 0x2f5c <__stack+0xd5d>
    2f4a:	fe 01       	movw	r30, r28
    2f4c:	ea 54       	subi	r30, 0x4A	; 74
    2f4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f50:	80 81       	ld	r24, Z
    2f52:	91 81       	ldd	r25, Z+1	; 0x01
    2f54:	8f 36       	cpi	r24, 0x6F	; 111
    2f56:	91 05       	cpc	r25, r1
    2f58:	08 f0       	brcs	.+2      	; 0x2f5c <__stack+0xd5d>
    2f5a:	b9 cf       	rjmp	.-142    	; 0x2ece <__stack+0xccf>
				value1 = Sharp_GP2D12_estimation(sharp1);	//Stores Distance calsulated in a variable "value".
				lcd_print(1,5,value1,3);

				forward();
			}
			stop();
    2f5c:	0e 94 42 0b 	call	0x1684	; 0x1684 <stop>

			for (int angle1 = 0, angle2=52; angle1 <=50;angle1++,angle2--)
    2f60:	fe 01       	movw	r30, r28
    2f62:	e5 55       	subi	r30, 0x55	; 85
    2f64:	ff 4f       	sbci	r31, 0xFF	; 255
    2f66:	11 82       	std	Z+1, r1	; 0x01
    2f68:	10 82       	st	Z, r1
    2f6a:	fe 01       	movw	r30, r28
    2f6c:	e7 55       	subi	r30, 0x57	; 87
    2f6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f70:	84 e3       	ldi	r24, 0x34	; 52
    2f72:	90 e0       	ldi	r25, 0x00	; 0
    2f74:	91 83       	std	Z+1, r25	; 0x01
    2f76:	80 83       	st	Z, r24
    2f78:	07 c1       	rjmp	.+526    	; 0x3188 <__stack+0xf89>
 			{
  				servo_1(angle1);			//code for downward movement of two servo motors
    2f7a:	fe 01       	movw	r30, r28
    2f7c:	e5 55       	subi	r30, 0x55	; 85
    2f7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f80:	80 81       	ld	r24, Z
    2f82:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <servo_1>
    2f86:	80 e0       	ldi	r24, 0x00	; 0
    2f88:	90 e0       	ldi	r25, 0x00	; 0
    2f8a:	a0 e2       	ldi	r26, 0x20	; 32
    2f8c:	b1 e4       	ldi	r27, 0x41	; 65
    2f8e:	8d ab       	std	Y+53, r24	; 0x35
    2f90:	9e ab       	std	Y+54, r25	; 0x36
    2f92:	af ab       	std	Y+55, r26	; 0x37
    2f94:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f96:	6d a9       	ldd	r22, Y+53	; 0x35
    2f98:	7e a9       	ldd	r23, Y+54	; 0x36
    2f9a:	8f a9       	ldd	r24, Y+55	; 0x37
    2f9c:	98 ad       	ldd	r25, Y+56	; 0x38
    2f9e:	2d ec       	ldi	r18, 0xCD	; 205
    2fa0:	3c ec       	ldi	r19, 0xCC	; 204
    2fa2:	4c e2       	ldi	r20, 0x2C	; 44
    2fa4:	55 e4       	ldi	r21, 0x45	; 69
    2fa6:	0e 94 ee 1b 	call	0x37dc	; 0x37dc <__mulsf3>
    2faa:	dc 01       	movw	r26, r24
    2fac:	cb 01       	movw	r24, r22
    2fae:	89 ab       	std	Y+49, r24	; 0x31
    2fb0:	9a ab       	std	Y+50, r25	; 0x32
    2fb2:	ab ab       	std	Y+51, r26	; 0x33
    2fb4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2fb6:	69 a9       	ldd	r22, Y+49	; 0x31
    2fb8:	7a a9       	ldd	r23, Y+50	; 0x32
    2fba:	8b a9       	ldd	r24, Y+51	; 0x33
    2fbc:	9c a9       	ldd	r25, Y+52	; 0x34
    2fbe:	20 e0       	ldi	r18, 0x00	; 0
    2fc0:	30 e0       	ldi	r19, 0x00	; 0
    2fc2:	40 e8       	ldi	r20, 0x80	; 128
    2fc4:	5f e3       	ldi	r21, 0x3F	; 63
    2fc6:	0e 94 f4 1d 	call	0x3be8	; 0x3be8 <__ltsf2>
    2fca:	88 23       	and	r24, r24
    2fcc:	2c f4       	brge	.+10     	; 0x2fd8 <__stack+0xdd9>
		__ticks = 1;
    2fce:	81 e0       	ldi	r24, 0x01	; 1
    2fd0:	90 e0       	ldi	r25, 0x00	; 0
    2fd2:	98 ab       	std	Y+48, r25	; 0x30
    2fd4:	8f a7       	std	Y+47, r24	; 0x2f
    2fd6:	3f c0       	rjmp	.+126    	; 0x3056 <__stack+0xe57>
	else if (__tmp > 65535)
    2fd8:	69 a9       	ldd	r22, Y+49	; 0x31
    2fda:	7a a9       	ldd	r23, Y+50	; 0x32
    2fdc:	8b a9       	ldd	r24, Y+51	; 0x33
    2fde:	9c a9       	ldd	r25, Y+52	; 0x34
    2fe0:	20 e0       	ldi	r18, 0x00	; 0
    2fe2:	3f ef       	ldi	r19, 0xFF	; 255
    2fe4:	4f e7       	ldi	r20, 0x7F	; 127
    2fe6:	57 e4       	ldi	r21, 0x47	; 71
    2fe8:	0e 94 94 1d 	call	0x3b28	; 0x3b28 <__gtsf2>
    2fec:	18 16       	cp	r1, r24
    2fee:	4c f5       	brge	.+82     	; 0x3042 <__stack+0xe43>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ff0:	6d a9       	ldd	r22, Y+53	; 0x35
    2ff2:	7e a9       	ldd	r23, Y+54	; 0x36
    2ff4:	8f a9       	ldd	r24, Y+55	; 0x37
    2ff6:	98 ad       	ldd	r25, Y+56	; 0x38
    2ff8:	20 e0       	ldi	r18, 0x00	; 0
    2ffa:	30 e0       	ldi	r19, 0x00	; 0
    2ffc:	40 e2       	ldi	r20, 0x20	; 32
    2ffe:	51 e4       	ldi	r21, 0x41	; 65
    3000:	0e 94 ee 1b 	call	0x37dc	; 0x37dc <__mulsf3>
    3004:	dc 01       	movw	r26, r24
    3006:	cb 01       	movw	r24, r22
    3008:	bc 01       	movw	r22, r24
    300a:	cd 01       	movw	r24, r26
    300c:	0e 94 18 1a 	call	0x3430	; 0x3430 <__fixunssfsi>
    3010:	dc 01       	movw	r26, r24
    3012:	cb 01       	movw	r24, r22
    3014:	98 ab       	std	Y+48, r25	; 0x30
    3016:	8f a7       	std	Y+47, r24	; 0x2f
    3018:	0f c0       	rjmp	.+30     	; 0x3038 <__stack+0xe39>
    301a:	84 e1       	ldi	r24, 0x14	; 20
    301c:	91 e0       	ldi	r25, 0x01	; 1
    301e:	9e a7       	std	Y+46, r25	; 0x2e
    3020:	8d a7       	std	Y+45, r24	; 0x2d
    3022:	8d a5       	ldd	r24, Y+45	; 0x2d
    3024:	9e a5       	ldd	r25, Y+46	; 0x2e
    3026:	01 97       	sbiw	r24, 0x01	; 1
    3028:	f1 f7       	brne	.-4      	; 0x3026 <__stack+0xe27>
    302a:	9e a7       	std	Y+46, r25	; 0x2e
    302c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    302e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3030:	98 a9       	ldd	r25, Y+48	; 0x30
    3032:	01 97       	sbiw	r24, 0x01	; 1
    3034:	98 ab       	std	Y+48, r25	; 0x30
    3036:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3038:	8f a5       	ldd	r24, Y+47	; 0x2f
    303a:	98 a9       	ldd	r25, Y+48	; 0x30
    303c:	00 97       	sbiw	r24, 0x00	; 0
    303e:	69 f7       	brne	.-38     	; 0x301a <__stack+0xe1b>
    3040:	14 c0       	rjmp	.+40     	; 0x306a <__stack+0xe6b>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3042:	69 a9       	ldd	r22, Y+49	; 0x31
    3044:	7a a9       	ldd	r23, Y+50	; 0x32
    3046:	8b a9       	ldd	r24, Y+51	; 0x33
    3048:	9c a9       	ldd	r25, Y+52	; 0x34
    304a:	0e 94 18 1a 	call	0x3430	; 0x3430 <__fixunssfsi>
    304e:	dc 01       	movw	r26, r24
    3050:	cb 01       	movw	r24, r22
    3052:	98 ab       	std	Y+48, r25	; 0x30
    3054:	8f a7       	std	Y+47, r24	; 0x2f
    3056:	8f a5       	ldd	r24, Y+47	; 0x2f
    3058:	98 a9       	ldd	r25, Y+48	; 0x30
    305a:	9c a7       	std	Y+44, r25	; 0x2c
    305c:	8b a7       	std	Y+43, r24	; 0x2b
    305e:	8b a5       	ldd	r24, Y+43	; 0x2b
    3060:	9c a5       	ldd	r25, Y+44	; 0x2c
    3062:	01 97       	sbiw	r24, 0x01	; 1
    3064:	f1 f7       	brne	.-4      	; 0x3062 <__stack+0xe63>
    3066:	9c a7       	std	Y+44, r25	; 0x2c
    3068:	8b a7       	std	Y+43, r24	; 0x2b
  				_delay_ms(10);				// that holds the gripper
				servo_2(angle2);
    306a:	fe 01       	movw	r30, r28
    306c:	e7 55       	subi	r30, 0x57	; 87
    306e:	ff 4f       	sbci	r31, 0xFF	; 255
    3070:	80 81       	ld	r24, Z
    3072:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <servo_2>
    3076:	80 e0       	ldi	r24, 0x00	; 0
    3078:	90 e0       	ldi	r25, 0x00	; 0
    307a:	a0 e2       	ldi	r26, 0x20	; 32
    307c:	b1 e4       	ldi	r27, 0x41	; 65
    307e:	8f a3       	std	Y+39, r24	; 0x27
    3080:	98 a7       	std	Y+40, r25	; 0x28
    3082:	a9 a7       	std	Y+41, r26	; 0x29
    3084:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3086:	6f a1       	ldd	r22, Y+39	; 0x27
    3088:	78 a5       	ldd	r23, Y+40	; 0x28
    308a:	89 a5       	ldd	r24, Y+41	; 0x29
    308c:	9a a5       	ldd	r25, Y+42	; 0x2a
    308e:	2d ec       	ldi	r18, 0xCD	; 205
    3090:	3c ec       	ldi	r19, 0xCC	; 204
    3092:	4c e2       	ldi	r20, 0x2C	; 44
    3094:	55 e4       	ldi	r21, 0x45	; 69
    3096:	0e 94 ee 1b 	call	0x37dc	; 0x37dc <__mulsf3>
    309a:	dc 01       	movw	r26, r24
    309c:	cb 01       	movw	r24, r22
    309e:	8b a3       	std	Y+35, r24	; 0x23
    30a0:	9c a3       	std	Y+36, r25	; 0x24
    30a2:	ad a3       	std	Y+37, r26	; 0x25
    30a4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    30a6:	6b a1       	ldd	r22, Y+35	; 0x23
    30a8:	7c a1       	ldd	r23, Y+36	; 0x24
    30aa:	8d a1       	ldd	r24, Y+37	; 0x25
    30ac:	9e a1       	ldd	r25, Y+38	; 0x26
    30ae:	20 e0       	ldi	r18, 0x00	; 0
    30b0:	30 e0       	ldi	r19, 0x00	; 0
    30b2:	40 e8       	ldi	r20, 0x80	; 128
    30b4:	5f e3       	ldi	r21, 0x3F	; 63
    30b6:	0e 94 f4 1d 	call	0x3be8	; 0x3be8 <__ltsf2>
    30ba:	88 23       	and	r24, r24
    30bc:	2c f4       	brge	.+10     	; 0x30c8 <__stack+0xec9>
		__ticks = 1;
    30be:	81 e0       	ldi	r24, 0x01	; 1
    30c0:	90 e0       	ldi	r25, 0x00	; 0
    30c2:	9a a3       	std	Y+34, r25	; 0x22
    30c4:	89 a3       	std	Y+33, r24	; 0x21
    30c6:	3f c0       	rjmp	.+126    	; 0x3146 <__stack+0xf47>
	else if (__tmp > 65535)
    30c8:	6b a1       	ldd	r22, Y+35	; 0x23
    30ca:	7c a1       	ldd	r23, Y+36	; 0x24
    30cc:	8d a1       	ldd	r24, Y+37	; 0x25
    30ce:	9e a1       	ldd	r25, Y+38	; 0x26
    30d0:	20 e0       	ldi	r18, 0x00	; 0
    30d2:	3f ef       	ldi	r19, 0xFF	; 255
    30d4:	4f e7       	ldi	r20, 0x7F	; 127
    30d6:	57 e4       	ldi	r21, 0x47	; 71
    30d8:	0e 94 94 1d 	call	0x3b28	; 0x3b28 <__gtsf2>
    30dc:	18 16       	cp	r1, r24
    30de:	4c f5       	brge	.+82     	; 0x3132 <__stack+0xf33>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30e0:	6f a1       	ldd	r22, Y+39	; 0x27
    30e2:	78 a5       	ldd	r23, Y+40	; 0x28
    30e4:	89 a5       	ldd	r24, Y+41	; 0x29
    30e6:	9a a5       	ldd	r25, Y+42	; 0x2a
    30e8:	20 e0       	ldi	r18, 0x00	; 0
    30ea:	30 e0       	ldi	r19, 0x00	; 0
    30ec:	40 e2       	ldi	r20, 0x20	; 32
    30ee:	51 e4       	ldi	r21, 0x41	; 65
    30f0:	0e 94 ee 1b 	call	0x37dc	; 0x37dc <__mulsf3>
    30f4:	dc 01       	movw	r26, r24
    30f6:	cb 01       	movw	r24, r22
    30f8:	bc 01       	movw	r22, r24
    30fa:	cd 01       	movw	r24, r26
    30fc:	0e 94 18 1a 	call	0x3430	; 0x3430 <__fixunssfsi>
    3100:	dc 01       	movw	r26, r24
    3102:	cb 01       	movw	r24, r22
    3104:	9a a3       	std	Y+34, r25	; 0x22
    3106:	89 a3       	std	Y+33, r24	; 0x21
    3108:	0f c0       	rjmp	.+30     	; 0x3128 <__stack+0xf29>
    310a:	84 e1       	ldi	r24, 0x14	; 20
    310c:	91 e0       	ldi	r25, 0x01	; 1
    310e:	98 a3       	std	Y+32, r25	; 0x20
    3110:	8f 8f       	std	Y+31, r24	; 0x1f
    3112:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3114:	98 a1       	ldd	r25, Y+32	; 0x20
    3116:	01 97       	sbiw	r24, 0x01	; 1
    3118:	f1 f7       	brne	.-4      	; 0x3116 <__stack+0xf17>
    311a:	98 a3       	std	Y+32, r25	; 0x20
    311c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    311e:	89 a1       	ldd	r24, Y+33	; 0x21
    3120:	9a a1       	ldd	r25, Y+34	; 0x22
    3122:	01 97       	sbiw	r24, 0x01	; 1
    3124:	9a a3       	std	Y+34, r25	; 0x22
    3126:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3128:	89 a1       	ldd	r24, Y+33	; 0x21
    312a:	9a a1       	ldd	r25, Y+34	; 0x22
    312c:	00 97       	sbiw	r24, 0x00	; 0
    312e:	69 f7       	brne	.-38     	; 0x310a <__stack+0xf0b>
    3130:	14 c0       	rjmp	.+40     	; 0x315a <__stack+0xf5b>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3132:	6b a1       	ldd	r22, Y+35	; 0x23
    3134:	7c a1       	ldd	r23, Y+36	; 0x24
    3136:	8d a1       	ldd	r24, Y+37	; 0x25
    3138:	9e a1       	ldd	r25, Y+38	; 0x26
    313a:	0e 94 18 1a 	call	0x3430	; 0x3430 <__fixunssfsi>
    313e:	dc 01       	movw	r26, r24
    3140:	cb 01       	movw	r24, r22
    3142:	9a a3       	std	Y+34, r25	; 0x22
    3144:	89 a3       	std	Y+33, r24	; 0x21
    3146:	89 a1       	ldd	r24, Y+33	; 0x21
    3148:	9a a1       	ldd	r25, Y+34	; 0x22
    314a:	9e 8f       	std	Y+30, r25	; 0x1e
    314c:	8d 8f       	std	Y+29, r24	; 0x1d
    314e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3150:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3152:	01 97       	sbiw	r24, 0x01	; 1
    3154:	f1 f7       	brne	.-4      	; 0x3152 <__stack+0xf53>
    3156:	9e 8f       	std	Y+30, r25	; 0x1e
    3158:	8d 8f       	std	Y+29, r24	; 0x1d

				forward();
			}
			stop();

			for (int angle1 = 0, angle2=52; angle1 <=50;angle1++,angle2--)
    315a:	de 01       	movw	r26, r28
    315c:	a5 55       	subi	r26, 0x55	; 85
    315e:	bf 4f       	sbci	r27, 0xFF	; 255
    3160:	fe 01       	movw	r30, r28
    3162:	e5 55       	subi	r30, 0x55	; 85
    3164:	ff 4f       	sbci	r31, 0xFF	; 255
    3166:	80 81       	ld	r24, Z
    3168:	91 81       	ldd	r25, Z+1	; 0x01
    316a:	01 96       	adiw	r24, 0x01	; 1
    316c:	8d 93       	st	X+, r24
    316e:	9c 93       	st	X, r25
    3170:	de 01       	movw	r26, r28
    3172:	a7 55       	subi	r26, 0x57	; 87
    3174:	bf 4f       	sbci	r27, 0xFF	; 255
    3176:	fe 01       	movw	r30, r28
    3178:	e7 55       	subi	r30, 0x57	; 87
    317a:	ff 4f       	sbci	r31, 0xFF	; 255
    317c:	80 81       	ld	r24, Z
    317e:	91 81       	ldd	r25, Z+1	; 0x01
    3180:	01 97       	sbiw	r24, 0x01	; 1
    3182:	11 96       	adiw	r26, 0x01	; 1
    3184:	9c 93       	st	X, r25
    3186:	8e 93       	st	-X, r24
    3188:	fe 01       	movw	r30, r28
    318a:	e5 55       	subi	r30, 0x55	; 85
    318c:	ff 4f       	sbci	r31, 0xFF	; 255
    318e:	80 81       	ld	r24, Z
    3190:	91 81       	ldd	r25, Z+1	; 0x01
    3192:	83 33       	cpi	r24, 0x33	; 51
    3194:	91 05       	cpc	r25, r1
    3196:	0c f4       	brge	.+2      	; 0x319a <__stack+0xf9b>
    3198:	f0 ce       	rjmp	.-544    	; 0x2f7a <__stack+0xd7b>
  				servo_1(angle1);			//code for downward movement of two servo motors
  				_delay_ms(10);				// that holds the gripper
				servo_2(angle2);
  				_delay_ms(10);
 			}
			servo_3(0);						//code the open the gripper arm to drop the ball
    319a:	80 e0       	ldi	r24, 0x00	; 0
    319c:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <servo_3>
			servo_1(0);						//code for upward movement of two servo motors 
    31a0:	80 e0       	ldi	r24, 0x00	; 0
    31a2:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <servo_1>
			servo_2(185);					// that holds the gripper
    31a6:	89 eb       	ldi	r24, 0xB9	; 185
    31a8:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <servo_2>

			for (angle = 0; angle <120; angle++)
    31ac:	fe 01       	movw	r30, r28
    31ae:	ef 54       	subi	r30, 0x4F	; 79
    31b0:	ff 4f       	sbci	r31, 0xFF	; 255
    31b2:	10 82       	st	Z, r1
    31b4:	81 c0       	rjmp	.+258    	; 0x32b8 <__stack+0x10b9>
 			{
  				servo_3(angle);					//code to close the gripper arm
    31b6:	fe 01       	movw	r30, r28
    31b8:	ef 54       	subi	r30, 0x4F	; 79
    31ba:	ff 4f       	sbci	r31, 0xFF	; 255
    31bc:	80 81       	ld	r24, Z
    31be:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <servo_3>
    31c2:	80 e0       	ldi	r24, 0x00	; 0
    31c4:	90 e0       	ldi	r25, 0x00	; 0
    31c6:	a0 e2       	ldi	r26, 0x20	; 32
    31c8:	b1 e4       	ldi	r27, 0x41	; 65
    31ca:	89 8f       	std	Y+25, r24	; 0x19
    31cc:	9a 8f       	std	Y+26, r25	; 0x1a
    31ce:	ab 8f       	std	Y+27, r26	; 0x1b
    31d0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31d2:	69 8d       	ldd	r22, Y+25	; 0x19
    31d4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    31d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    31d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    31da:	2d ec       	ldi	r18, 0xCD	; 205
    31dc:	3c ec       	ldi	r19, 0xCC	; 204
    31de:	4c e2       	ldi	r20, 0x2C	; 44
    31e0:	55 e4       	ldi	r21, 0x45	; 69
    31e2:	0e 94 ee 1b 	call	0x37dc	; 0x37dc <__mulsf3>
    31e6:	dc 01       	movw	r26, r24
    31e8:	cb 01       	movw	r24, r22
    31ea:	8d 8b       	std	Y+21, r24	; 0x15
    31ec:	9e 8b       	std	Y+22, r25	; 0x16
    31ee:	af 8b       	std	Y+23, r26	; 0x17
    31f0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    31f2:	6d 89       	ldd	r22, Y+21	; 0x15
    31f4:	7e 89       	ldd	r23, Y+22	; 0x16
    31f6:	8f 89       	ldd	r24, Y+23	; 0x17
    31f8:	98 8d       	ldd	r25, Y+24	; 0x18
    31fa:	20 e0       	ldi	r18, 0x00	; 0
    31fc:	30 e0       	ldi	r19, 0x00	; 0
    31fe:	40 e8       	ldi	r20, 0x80	; 128
    3200:	5f e3       	ldi	r21, 0x3F	; 63
    3202:	0e 94 f4 1d 	call	0x3be8	; 0x3be8 <__ltsf2>
    3206:	88 23       	and	r24, r24
    3208:	2c f4       	brge	.+10     	; 0x3214 <__stack+0x1015>
		__ticks = 1;
    320a:	81 e0       	ldi	r24, 0x01	; 1
    320c:	90 e0       	ldi	r25, 0x00	; 0
    320e:	9c 8b       	std	Y+20, r25	; 0x14
    3210:	8b 8b       	std	Y+19, r24	; 0x13
    3212:	3f c0       	rjmp	.+126    	; 0x3292 <__stack+0x1093>
	else if (__tmp > 65535)
    3214:	6d 89       	ldd	r22, Y+21	; 0x15
    3216:	7e 89       	ldd	r23, Y+22	; 0x16
    3218:	8f 89       	ldd	r24, Y+23	; 0x17
    321a:	98 8d       	ldd	r25, Y+24	; 0x18
    321c:	20 e0       	ldi	r18, 0x00	; 0
    321e:	3f ef       	ldi	r19, 0xFF	; 255
    3220:	4f e7       	ldi	r20, 0x7F	; 127
    3222:	57 e4       	ldi	r21, 0x47	; 71
    3224:	0e 94 94 1d 	call	0x3b28	; 0x3b28 <__gtsf2>
    3228:	18 16       	cp	r1, r24
    322a:	4c f5       	brge	.+82     	; 0x327e <__stack+0x107f>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    322c:	69 8d       	ldd	r22, Y+25	; 0x19
    322e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3230:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3232:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3234:	20 e0       	ldi	r18, 0x00	; 0
    3236:	30 e0       	ldi	r19, 0x00	; 0
    3238:	40 e2       	ldi	r20, 0x20	; 32
    323a:	51 e4       	ldi	r21, 0x41	; 65
    323c:	0e 94 ee 1b 	call	0x37dc	; 0x37dc <__mulsf3>
    3240:	dc 01       	movw	r26, r24
    3242:	cb 01       	movw	r24, r22
    3244:	bc 01       	movw	r22, r24
    3246:	cd 01       	movw	r24, r26
    3248:	0e 94 18 1a 	call	0x3430	; 0x3430 <__fixunssfsi>
    324c:	dc 01       	movw	r26, r24
    324e:	cb 01       	movw	r24, r22
    3250:	9c 8b       	std	Y+20, r25	; 0x14
    3252:	8b 8b       	std	Y+19, r24	; 0x13
    3254:	0f c0       	rjmp	.+30     	; 0x3274 <__stack+0x1075>
    3256:	84 e1       	ldi	r24, 0x14	; 20
    3258:	91 e0       	ldi	r25, 0x01	; 1
    325a:	9a 8b       	std	Y+18, r25	; 0x12
    325c:	89 8b       	std	Y+17, r24	; 0x11
    325e:	89 89       	ldd	r24, Y+17	; 0x11
    3260:	9a 89       	ldd	r25, Y+18	; 0x12
    3262:	01 97       	sbiw	r24, 0x01	; 1
    3264:	f1 f7       	brne	.-4      	; 0x3262 <__stack+0x1063>
    3266:	9a 8b       	std	Y+18, r25	; 0x12
    3268:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    326a:	8b 89       	ldd	r24, Y+19	; 0x13
    326c:	9c 89       	ldd	r25, Y+20	; 0x14
    326e:	01 97       	sbiw	r24, 0x01	; 1
    3270:	9c 8b       	std	Y+20, r25	; 0x14
    3272:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3274:	8b 89       	ldd	r24, Y+19	; 0x13
    3276:	9c 89       	ldd	r25, Y+20	; 0x14
    3278:	00 97       	sbiw	r24, 0x00	; 0
    327a:	69 f7       	brne	.-38     	; 0x3256 <__stack+0x1057>
    327c:	14 c0       	rjmp	.+40     	; 0x32a6 <__stack+0x10a7>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    327e:	6d 89       	ldd	r22, Y+21	; 0x15
    3280:	7e 89       	ldd	r23, Y+22	; 0x16
    3282:	8f 89       	ldd	r24, Y+23	; 0x17
    3284:	98 8d       	ldd	r25, Y+24	; 0x18
    3286:	0e 94 18 1a 	call	0x3430	; 0x3430 <__fixunssfsi>
    328a:	dc 01       	movw	r26, r24
    328c:	cb 01       	movw	r24, r22
    328e:	9c 8b       	std	Y+20, r25	; 0x14
    3290:	8b 8b       	std	Y+19, r24	; 0x13
    3292:	8b 89       	ldd	r24, Y+19	; 0x13
    3294:	9c 89       	ldd	r25, Y+20	; 0x14
    3296:	98 8b       	std	Y+16, r25	; 0x10
    3298:	8f 87       	std	Y+15, r24	; 0x0f
    329a:	8f 85       	ldd	r24, Y+15	; 0x0f
    329c:	98 89       	ldd	r25, Y+16	; 0x10
    329e:	01 97       	sbiw	r24, 0x01	; 1
    32a0:	f1 f7       	brne	.-4      	; 0x329e <__stack+0x109f>
    32a2:	98 8b       	std	Y+16, r25	; 0x10
    32a4:	8f 87       	std	Y+15, r24	; 0x0f
 			}
			servo_3(0);						//code the open the gripper arm to drop the ball
			servo_1(0);						//code for upward movement of two servo motors 
			servo_2(185);					// that holds the gripper

			for (angle = 0; angle <120; angle++)
    32a6:	de 01       	movw	r26, r28
    32a8:	af 54       	subi	r26, 0x4F	; 79
    32aa:	bf 4f       	sbci	r27, 0xFF	; 255
    32ac:	fe 01       	movw	r30, r28
    32ae:	ef 54       	subi	r30, 0x4F	; 79
    32b0:	ff 4f       	sbci	r31, 0xFF	; 255
    32b2:	80 81       	ld	r24, Z
    32b4:	8f 5f       	subi	r24, 0xFF	; 255
    32b6:	8c 93       	st	X, r24
    32b8:	fe 01       	movw	r30, r28
    32ba:	ef 54       	subi	r30, 0x4F	; 79
    32bc:	ff 4f       	sbci	r31, 0xFF	; 255
    32be:	80 81       	ld	r24, Z
    32c0:	88 37       	cpi	r24, 0x78	; 120
    32c2:	08 f4       	brcc	.+2      	; 0x32c6 <__stack+0x10c7>
    32c4:	78 cf       	rjmp	.-272    	; 0x31b6 <__stack+0xfb7>
 			{
  				servo_3(angle);					//code to close the gripper arm
  				_delay_ms(10);
 			}

			velocity(150,150);					//Code for rotation of the robot 
    32c6:	86 e9       	ldi	r24, 0x96	; 150
    32c8:	66 e9       	ldi	r22, 0x96	; 150
    32ca:	0e 94 57 0b 	call	0x16ae	; 0x16ae <velocity>
			angle_rotate_right_hard(25);		//to avoid the box
    32ce:	89 e1       	ldi	r24, 0x19	; 25
    32d0:	90 e0       	ldi	r25, 0x00	; 0
    32d2:	0e 94 1f 0c 	call	0x183e	; 0x183e <angle_rotate_right_hard>
			stop();
    32d6:	0e 94 42 0b 	call	0x1684	; 0x1684 <stop>
    32da:	80 e0       	ldi	r24, 0x00	; 0
    32dc:	90 e0       	ldi	r25, 0x00	; 0
    32de:	aa ef       	ldi	r26, 0xFA	; 250
    32e0:	b3 e4       	ldi	r27, 0x43	; 67
    32e2:	8b 87       	std	Y+11, r24	; 0x0b
    32e4:	9c 87       	std	Y+12, r25	; 0x0c
    32e6:	ad 87       	std	Y+13, r26	; 0x0d
    32e8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    32ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    32ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    32f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    32f2:	2d ec       	ldi	r18, 0xCD	; 205
    32f4:	3c ec       	ldi	r19, 0xCC	; 204
    32f6:	4c e2       	ldi	r20, 0x2C	; 44
    32f8:	55 e4       	ldi	r21, 0x45	; 69
    32fa:	0e 94 ee 1b 	call	0x37dc	; 0x37dc <__mulsf3>
    32fe:	dc 01       	movw	r26, r24
    3300:	cb 01       	movw	r24, r22
    3302:	8f 83       	std	Y+7, r24	; 0x07
    3304:	98 87       	std	Y+8, r25	; 0x08
    3306:	a9 87       	std	Y+9, r26	; 0x09
    3308:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    330a:	6f 81       	ldd	r22, Y+7	; 0x07
    330c:	78 85       	ldd	r23, Y+8	; 0x08
    330e:	89 85       	ldd	r24, Y+9	; 0x09
    3310:	9a 85       	ldd	r25, Y+10	; 0x0a
    3312:	20 e0       	ldi	r18, 0x00	; 0
    3314:	30 e0       	ldi	r19, 0x00	; 0
    3316:	40 e8       	ldi	r20, 0x80	; 128
    3318:	5f e3       	ldi	r21, 0x3F	; 63
    331a:	0e 94 f4 1d 	call	0x3be8	; 0x3be8 <__ltsf2>
    331e:	88 23       	and	r24, r24
    3320:	2c f4       	brge	.+10     	; 0x332c <__stack+0x112d>
		__ticks = 1;
    3322:	81 e0       	ldi	r24, 0x01	; 1
    3324:	90 e0       	ldi	r25, 0x00	; 0
    3326:	9e 83       	std	Y+6, r25	; 0x06
    3328:	8d 83       	std	Y+5, r24	; 0x05
    332a:	3f c0       	rjmp	.+126    	; 0x33aa <__stack+0x11ab>
	else if (__tmp > 65535)
    332c:	6f 81       	ldd	r22, Y+7	; 0x07
    332e:	78 85       	ldd	r23, Y+8	; 0x08
    3330:	89 85       	ldd	r24, Y+9	; 0x09
    3332:	9a 85       	ldd	r25, Y+10	; 0x0a
    3334:	20 e0       	ldi	r18, 0x00	; 0
    3336:	3f ef       	ldi	r19, 0xFF	; 255
    3338:	4f e7       	ldi	r20, 0x7F	; 127
    333a:	57 e4       	ldi	r21, 0x47	; 71
    333c:	0e 94 94 1d 	call	0x3b28	; 0x3b28 <__gtsf2>
    3340:	18 16       	cp	r1, r24
    3342:	4c f5       	brge	.+82     	; 0x3396 <__stack+0x1197>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3344:	6b 85       	ldd	r22, Y+11	; 0x0b
    3346:	7c 85       	ldd	r23, Y+12	; 0x0c
    3348:	8d 85       	ldd	r24, Y+13	; 0x0d
    334a:	9e 85       	ldd	r25, Y+14	; 0x0e
    334c:	20 e0       	ldi	r18, 0x00	; 0
    334e:	30 e0       	ldi	r19, 0x00	; 0
    3350:	40 e2       	ldi	r20, 0x20	; 32
    3352:	51 e4       	ldi	r21, 0x41	; 65
    3354:	0e 94 ee 1b 	call	0x37dc	; 0x37dc <__mulsf3>
    3358:	dc 01       	movw	r26, r24
    335a:	cb 01       	movw	r24, r22
    335c:	bc 01       	movw	r22, r24
    335e:	cd 01       	movw	r24, r26
    3360:	0e 94 18 1a 	call	0x3430	; 0x3430 <__fixunssfsi>
    3364:	dc 01       	movw	r26, r24
    3366:	cb 01       	movw	r24, r22
    3368:	9e 83       	std	Y+6, r25	; 0x06
    336a:	8d 83       	std	Y+5, r24	; 0x05
    336c:	0f c0       	rjmp	.+30     	; 0x338c <__stack+0x118d>
    336e:	84 e1       	ldi	r24, 0x14	; 20
    3370:	91 e0       	ldi	r25, 0x01	; 1
    3372:	9c 83       	std	Y+4, r25	; 0x04
    3374:	8b 83       	std	Y+3, r24	; 0x03
    3376:	8b 81       	ldd	r24, Y+3	; 0x03
    3378:	9c 81       	ldd	r25, Y+4	; 0x04
    337a:	01 97       	sbiw	r24, 0x01	; 1
    337c:	f1 f7       	brne	.-4      	; 0x337a <__stack+0x117b>
    337e:	9c 83       	std	Y+4, r25	; 0x04
    3380:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3382:	8d 81       	ldd	r24, Y+5	; 0x05
    3384:	9e 81       	ldd	r25, Y+6	; 0x06
    3386:	01 97       	sbiw	r24, 0x01	; 1
    3388:	9e 83       	std	Y+6, r25	; 0x06
    338a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    338c:	8d 81       	ldd	r24, Y+5	; 0x05
    338e:	9e 81       	ldd	r25, Y+6	; 0x06
    3390:	00 97       	sbiw	r24, 0x00	; 0
    3392:	69 f7       	brne	.-38     	; 0x336e <__stack+0x116f>
    3394:	14 c0       	rjmp	.+40     	; 0x33be <__stack+0x11bf>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3396:	6f 81       	ldd	r22, Y+7	; 0x07
    3398:	78 85       	ldd	r23, Y+8	; 0x08
    339a:	89 85       	ldd	r24, Y+9	; 0x09
    339c:	9a 85       	ldd	r25, Y+10	; 0x0a
    339e:	0e 94 18 1a 	call	0x3430	; 0x3430 <__fixunssfsi>
    33a2:	dc 01       	movw	r26, r24
    33a4:	cb 01       	movw	r24, r22
    33a6:	9e 83       	std	Y+6, r25	; 0x06
    33a8:	8d 83       	std	Y+5, r24	; 0x05
    33aa:	8d 81       	ldd	r24, Y+5	; 0x05
    33ac:	9e 81       	ldd	r25, Y+6	; 0x06
    33ae:	9a 83       	std	Y+2, r25	; 0x02
    33b0:	89 83       	std	Y+1, r24	; 0x01
    33b2:	89 81       	ldd	r24, Y+1	; 0x01
    33b4:	9a 81       	ldd	r25, Y+2	; 0x02
    33b6:	01 97       	sbiw	r24, 0x01	; 1
    33b8:	f1 f7       	brne	.-4      	; 0x33b6 <__stack+0x11b7>
    33ba:	9a 83       	std	Y+2, r25	; 0x02
    33bc:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(500);
			
			data='0';
    33be:	80 e3       	ldi	r24, 0x30	; 48
    33c0:	80 93 1e 03 	sts	0x031E, r24
			
		
			sharp = ADC_Conversion(11);						//Stores the Analog value of front sharp connected to ADC channel 11 into variable "sharp"
    33c4:	8b e0       	ldi	r24, 0x0B	; 11
    33c6:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <ADC_Conversion>
    33ca:	80 93 23 03 	sts	0x0323, r24
			value = Sharp_GP2D12_estimation(sharp);			//Stores Distance calsulated in a variable "value".
    33ce:	80 91 23 03 	lds	r24, 0x0323
    33d2:	0e 94 57 0e 	call	0x1cae	; 0x1cae <Sharp_GP2D12_estimation>
    33d6:	fe 01       	movw	r30, r28
    33d8:	e8 54       	subi	r30, 0x48	; 72
    33da:	ff 4f       	sbci	r31, 0xFF	; 255
    33dc:	91 83       	std	Z+1, r25	; 0x01
    33de:	80 83       	st	Z, r24
			lcd_print(1,1,value,3);
    33e0:	fe 01       	movw	r30, r28
    33e2:	e8 54       	subi	r30, 0x48	; 72
    33e4:	ff 4f       	sbci	r31, 0xFF	; 255
    33e6:	20 81       	ld	r18, Z
    33e8:	31 81       	ldd	r19, Z+1	; 0x01
    33ea:	81 e0       	ldi	r24, 0x01	; 1
    33ec:	61 e0       	ldi	r22, 0x01	; 1
    33ee:	a9 01       	movw	r20, r18
    33f0:	23 e0       	ldi	r18, 0x03	; 3
    33f2:	30 e0       	ldi	r19, 0x00	; 0
    33f4:	0e 94 86 09 	call	0x130c	; 0x130c <lcd_print>
			sharp1 = ADC_Conversion(10);					//Stores the Analog value of front sharp connected to ADC channel 11 into variable "sharp"
    33f8:	8a e0       	ldi	r24, 0x0A	; 10
    33fa:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <ADC_Conversion>
    33fe:	80 93 1b 03 	sts	0x031B, r24
			value1 = Sharp_GP2D12_estimation(sharp1);		//Stores Distance calsulated in a variable "value".
    3402:	80 91 1b 03 	lds	r24, 0x031B
    3406:	0e 94 57 0e 	call	0x1cae	; 0x1cae <Sharp_GP2D12_estimation>
    340a:	fe 01       	movw	r30, r28
    340c:	ea 54       	subi	r30, 0x4A	; 74
    340e:	ff 4f       	sbci	r31, 0xFF	; 255
    3410:	91 83       	std	Z+1, r25	; 0x01
    3412:	80 83       	st	Z, r24
			lcd_print(1,5,value1,3);
    3414:	fe 01       	movw	r30, r28
    3416:	ea 54       	subi	r30, 0x4A	; 74
    3418:	ff 4f       	sbci	r31, 0xFF	; 255
    341a:	20 81       	ld	r18, Z
    341c:	31 81       	ldd	r19, Z+1	; 0x01
    341e:	81 e0       	ldi	r24, 0x01	; 1
    3420:	65 e0       	ldi	r22, 0x05	; 5
    3422:	a9 01       	movw	r20, r18
    3424:	23 e0       	ldi	r18, 0x03	; 3
    3426:	30 e0       	ldi	r19, 0x00	; 0
    3428:	0e 94 86 09 	call	0x130c	; 0x130c <lcd_print>
    342c:	0c 94 cf 11 	jmp	0x239e	; 0x239e <__stack+0x19f>

00003430 <__fixunssfsi>:
    3430:	ef 92       	push	r14
    3432:	ff 92       	push	r15
    3434:	0f 93       	push	r16
    3436:	1f 93       	push	r17
    3438:	7b 01       	movw	r14, r22
    343a:	8c 01       	movw	r16, r24
    343c:	20 e0       	ldi	r18, 0x00	; 0
    343e:	30 e0       	ldi	r19, 0x00	; 0
    3440:	40 e0       	ldi	r20, 0x00	; 0
    3442:	5f e4       	ldi	r21, 0x4F	; 79
    3444:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <__gesf2>
    3448:	88 23       	and	r24, r24
    344a:	8c f0       	brlt	.+34     	; 0x346e <__fixunssfsi+0x3e>
    344c:	c8 01       	movw	r24, r16
    344e:	b7 01       	movw	r22, r14
    3450:	20 e0       	ldi	r18, 0x00	; 0
    3452:	30 e0       	ldi	r19, 0x00	; 0
    3454:	40 e0       	ldi	r20, 0x00	; 0
    3456:	5f e4       	ldi	r21, 0x4F	; 79
    3458:	0e 94 90 1b 	call	0x3720	; 0x3720 <__subsf3>
    345c:	0e 94 82 1e 	call	0x3d04	; 0x3d04 <__fixsfsi>
    3460:	9b 01       	movw	r18, r22
    3462:	ac 01       	movw	r20, r24
    3464:	20 50       	subi	r18, 0x00	; 0
    3466:	30 40       	sbci	r19, 0x00	; 0
    3468:	40 40       	sbci	r20, 0x00	; 0
    346a:	50 48       	sbci	r21, 0x80	; 128
    346c:	06 c0       	rjmp	.+12     	; 0x347a <__fixunssfsi+0x4a>
    346e:	c8 01       	movw	r24, r16
    3470:	b7 01       	movw	r22, r14
    3472:	0e 94 82 1e 	call	0x3d04	; 0x3d04 <__fixsfsi>
    3476:	9b 01       	movw	r18, r22
    3478:	ac 01       	movw	r20, r24
    347a:	b9 01       	movw	r22, r18
    347c:	ca 01       	movw	r24, r20
    347e:	1f 91       	pop	r17
    3480:	0f 91       	pop	r16
    3482:	ff 90       	pop	r15
    3484:	ef 90       	pop	r14
    3486:	08 95       	ret

00003488 <_fpadd_parts>:
    3488:	a0 e0       	ldi	r26, 0x00	; 0
    348a:	b0 e0       	ldi	r27, 0x00	; 0
    348c:	ea e4       	ldi	r30, 0x4A	; 74
    348e:	fa e1       	ldi	r31, 0x1A	; 26
    3490:	0c 94 58 21 	jmp	0x42b0	; 0x42b0 <__prologue_saves__>
    3494:	dc 01       	movw	r26, r24
    3496:	2b 01       	movw	r4, r22
    3498:	fa 01       	movw	r30, r20
    349a:	9c 91       	ld	r25, X
    349c:	92 30       	cpi	r25, 0x02	; 2
    349e:	08 f4       	brcc	.+2      	; 0x34a2 <_fpadd_parts+0x1a>
    34a0:	39 c1       	rjmp	.+626    	; 0x3714 <_fpadd_parts+0x28c>
    34a2:	eb 01       	movw	r28, r22
    34a4:	88 81       	ld	r24, Y
    34a6:	82 30       	cpi	r24, 0x02	; 2
    34a8:	08 f4       	brcc	.+2      	; 0x34ac <_fpadd_parts+0x24>
    34aa:	33 c1       	rjmp	.+614    	; 0x3712 <_fpadd_parts+0x28a>
    34ac:	94 30       	cpi	r25, 0x04	; 4
    34ae:	69 f4       	brne	.+26     	; 0x34ca <_fpadd_parts+0x42>
    34b0:	84 30       	cpi	r24, 0x04	; 4
    34b2:	09 f0       	breq	.+2      	; 0x34b6 <_fpadd_parts+0x2e>
    34b4:	2f c1       	rjmp	.+606    	; 0x3714 <_fpadd_parts+0x28c>
    34b6:	11 96       	adiw	r26, 0x01	; 1
    34b8:	9c 91       	ld	r25, X
    34ba:	11 97       	sbiw	r26, 0x01	; 1
    34bc:	89 81       	ldd	r24, Y+1	; 0x01
    34be:	98 17       	cp	r25, r24
    34c0:	09 f4       	brne	.+2      	; 0x34c4 <_fpadd_parts+0x3c>
    34c2:	28 c1       	rjmp	.+592    	; 0x3714 <_fpadd_parts+0x28c>
    34c4:	a0 e0       	ldi	r26, 0x00	; 0
    34c6:	b2 e0       	ldi	r27, 0x02	; 2
    34c8:	25 c1       	rjmp	.+586    	; 0x3714 <_fpadd_parts+0x28c>
    34ca:	84 30       	cpi	r24, 0x04	; 4
    34cc:	09 f4       	brne	.+2      	; 0x34d0 <_fpadd_parts+0x48>
    34ce:	21 c1       	rjmp	.+578    	; 0x3712 <_fpadd_parts+0x28a>
    34d0:	82 30       	cpi	r24, 0x02	; 2
    34d2:	a9 f4       	brne	.+42     	; 0x34fe <_fpadd_parts+0x76>
    34d4:	92 30       	cpi	r25, 0x02	; 2
    34d6:	09 f0       	breq	.+2      	; 0x34da <_fpadd_parts+0x52>
    34d8:	1d c1       	rjmp	.+570    	; 0x3714 <_fpadd_parts+0x28c>
    34da:	9a 01       	movw	r18, r20
    34dc:	ad 01       	movw	r20, r26
    34de:	88 e0       	ldi	r24, 0x08	; 8
    34e0:	ea 01       	movw	r28, r20
    34e2:	09 90       	ld	r0, Y+
    34e4:	ae 01       	movw	r20, r28
    34e6:	e9 01       	movw	r28, r18
    34e8:	09 92       	st	Y+, r0
    34ea:	9e 01       	movw	r18, r28
    34ec:	81 50       	subi	r24, 0x01	; 1
    34ee:	c1 f7       	brne	.-16     	; 0x34e0 <_fpadd_parts+0x58>
    34f0:	e2 01       	movw	r28, r4
    34f2:	89 81       	ldd	r24, Y+1	; 0x01
    34f4:	11 96       	adiw	r26, 0x01	; 1
    34f6:	9c 91       	ld	r25, X
    34f8:	89 23       	and	r24, r25
    34fa:	81 83       	std	Z+1, r24	; 0x01
    34fc:	08 c1       	rjmp	.+528    	; 0x370e <_fpadd_parts+0x286>
    34fe:	92 30       	cpi	r25, 0x02	; 2
    3500:	09 f4       	brne	.+2      	; 0x3504 <_fpadd_parts+0x7c>
    3502:	07 c1       	rjmp	.+526    	; 0x3712 <_fpadd_parts+0x28a>
    3504:	12 96       	adiw	r26, 0x02	; 2
    3506:	2d 90       	ld	r2, X+
    3508:	3c 90       	ld	r3, X
    350a:	13 97       	sbiw	r26, 0x03	; 3
    350c:	eb 01       	movw	r28, r22
    350e:	8a 81       	ldd	r24, Y+2	; 0x02
    3510:	9b 81       	ldd	r25, Y+3	; 0x03
    3512:	14 96       	adiw	r26, 0x04	; 4
    3514:	ad 90       	ld	r10, X+
    3516:	bd 90       	ld	r11, X+
    3518:	cd 90       	ld	r12, X+
    351a:	dc 90       	ld	r13, X
    351c:	17 97       	sbiw	r26, 0x07	; 7
    351e:	ec 80       	ldd	r14, Y+4	; 0x04
    3520:	fd 80       	ldd	r15, Y+5	; 0x05
    3522:	0e 81       	ldd	r16, Y+6	; 0x06
    3524:	1f 81       	ldd	r17, Y+7	; 0x07
    3526:	91 01       	movw	r18, r2
    3528:	28 1b       	sub	r18, r24
    352a:	39 0b       	sbc	r19, r25
    352c:	b9 01       	movw	r22, r18
    352e:	37 ff       	sbrs	r19, 7
    3530:	04 c0       	rjmp	.+8      	; 0x353a <_fpadd_parts+0xb2>
    3532:	66 27       	eor	r22, r22
    3534:	77 27       	eor	r23, r23
    3536:	62 1b       	sub	r22, r18
    3538:	73 0b       	sbc	r23, r19
    353a:	60 32       	cpi	r22, 0x20	; 32
    353c:	71 05       	cpc	r23, r1
    353e:	0c f0       	brlt	.+2      	; 0x3542 <_fpadd_parts+0xba>
    3540:	61 c0       	rjmp	.+194    	; 0x3604 <_fpadd_parts+0x17c>
    3542:	12 16       	cp	r1, r18
    3544:	13 06       	cpc	r1, r19
    3546:	6c f5       	brge	.+90     	; 0x35a2 <_fpadd_parts+0x11a>
    3548:	37 01       	movw	r6, r14
    354a:	48 01       	movw	r8, r16
    354c:	06 2e       	mov	r0, r22
    354e:	04 c0       	rjmp	.+8      	; 0x3558 <_fpadd_parts+0xd0>
    3550:	96 94       	lsr	r9
    3552:	87 94       	ror	r8
    3554:	77 94       	ror	r7
    3556:	67 94       	ror	r6
    3558:	0a 94       	dec	r0
    355a:	d2 f7       	brpl	.-12     	; 0x3550 <_fpadd_parts+0xc8>
    355c:	21 e0       	ldi	r18, 0x01	; 1
    355e:	30 e0       	ldi	r19, 0x00	; 0
    3560:	40 e0       	ldi	r20, 0x00	; 0
    3562:	50 e0       	ldi	r21, 0x00	; 0
    3564:	04 c0       	rjmp	.+8      	; 0x356e <_fpadd_parts+0xe6>
    3566:	22 0f       	add	r18, r18
    3568:	33 1f       	adc	r19, r19
    356a:	44 1f       	adc	r20, r20
    356c:	55 1f       	adc	r21, r21
    356e:	6a 95       	dec	r22
    3570:	d2 f7       	brpl	.-12     	; 0x3566 <_fpadd_parts+0xde>
    3572:	21 50       	subi	r18, 0x01	; 1
    3574:	30 40       	sbci	r19, 0x00	; 0
    3576:	40 40       	sbci	r20, 0x00	; 0
    3578:	50 40       	sbci	r21, 0x00	; 0
    357a:	2e 21       	and	r18, r14
    357c:	3f 21       	and	r19, r15
    357e:	40 23       	and	r20, r16
    3580:	51 23       	and	r21, r17
    3582:	21 15       	cp	r18, r1
    3584:	31 05       	cpc	r19, r1
    3586:	41 05       	cpc	r20, r1
    3588:	51 05       	cpc	r21, r1
    358a:	21 f0       	breq	.+8      	; 0x3594 <_fpadd_parts+0x10c>
    358c:	21 e0       	ldi	r18, 0x01	; 1
    358e:	30 e0       	ldi	r19, 0x00	; 0
    3590:	40 e0       	ldi	r20, 0x00	; 0
    3592:	50 e0       	ldi	r21, 0x00	; 0
    3594:	79 01       	movw	r14, r18
    3596:	8a 01       	movw	r16, r20
    3598:	e6 28       	or	r14, r6
    359a:	f7 28       	or	r15, r7
    359c:	08 29       	or	r16, r8
    359e:	19 29       	or	r17, r9
    35a0:	3c c0       	rjmp	.+120    	; 0x361a <_fpadd_parts+0x192>
    35a2:	23 2b       	or	r18, r19
    35a4:	d1 f1       	breq	.+116    	; 0x361a <_fpadd_parts+0x192>
    35a6:	26 0e       	add	r2, r22
    35a8:	37 1e       	adc	r3, r23
    35aa:	35 01       	movw	r6, r10
    35ac:	46 01       	movw	r8, r12
    35ae:	06 2e       	mov	r0, r22
    35b0:	04 c0       	rjmp	.+8      	; 0x35ba <_fpadd_parts+0x132>
    35b2:	96 94       	lsr	r9
    35b4:	87 94       	ror	r8
    35b6:	77 94       	ror	r7
    35b8:	67 94       	ror	r6
    35ba:	0a 94       	dec	r0
    35bc:	d2 f7       	brpl	.-12     	; 0x35b2 <_fpadd_parts+0x12a>
    35be:	21 e0       	ldi	r18, 0x01	; 1
    35c0:	30 e0       	ldi	r19, 0x00	; 0
    35c2:	40 e0       	ldi	r20, 0x00	; 0
    35c4:	50 e0       	ldi	r21, 0x00	; 0
    35c6:	04 c0       	rjmp	.+8      	; 0x35d0 <_fpadd_parts+0x148>
    35c8:	22 0f       	add	r18, r18
    35ca:	33 1f       	adc	r19, r19
    35cc:	44 1f       	adc	r20, r20
    35ce:	55 1f       	adc	r21, r21
    35d0:	6a 95       	dec	r22
    35d2:	d2 f7       	brpl	.-12     	; 0x35c8 <_fpadd_parts+0x140>
    35d4:	21 50       	subi	r18, 0x01	; 1
    35d6:	30 40       	sbci	r19, 0x00	; 0
    35d8:	40 40       	sbci	r20, 0x00	; 0
    35da:	50 40       	sbci	r21, 0x00	; 0
    35dc:	2a 21       	and	r18, r10
    35de:	3b 21       	and	r19, r11
    35e0:	4c 21       	and	r20, r12
    35e2:	5d 21       	and	r21, r13
    35e4:	21 15       	cp	r18, r1
    35e6:	31 05       	cpc	r19, r1
    35e8:	41 05       	cpc	r20, r1
    35ea:	51 05       	cpc	r21, r1
    35ec:	21 f0       	breq	.+8      	; 0x35f6 <_fpadd_parts+0x16e>
    35ee:	21 e0       	ldi	r18, 0x01	; 1
    35f0:	30 e0       	ldi	r19, 0x00	; 0
    35f2:	40 e0       	ldi	r20, 0x00	; 0
    35f4:	50 e0       	ldi	r21, 0x00	; 0
    35f6:	59 01       	movw	r10, r18
    35f8:	6a 01       	movw	r12, r20
    35fa:	a6 28       	or	r10, r6
    35fc:	b7 28       	or	r11, r7
    35fe:	c8 28       	or	r12, r8
    3600:	d9 28       	or	r13, r9
    3602:	0b c0       	rjmp	.+22     	; 0x361a <_fpadd_parts+0x192>
    3604:	82 15       	cp	r24, r2
    3606:	93 05       	cpc	r25, r3
    3608:	2c f0       	brlt	.+10     	; 0x3614 <_fpadd_parts+0x18c>
    360a:	1c 01       	movw	r2, r24
    360c:	aa 24       	eor	r10, r10
    360e:	bb 24       	eor	r11, r11
    3610:	65 01       	movw	r12, r10
    3612:	03 c0       	rjmp	.+6      	; 0x361a <_fpadd_parts+0x192>
    3614:	ee 24       	eor	r14, r14
    3616:	ff 24       	eor	r15, r15
    3618:	87 01       	movw	r16, r14
    361a:	11 96       	adiw	r26, 0x01	; 1
    361c:	9c 91       	ld	r25, X
    361e:	d2 01       	movw	r26, r4
    3620:	11 96       	adiw	r26, 0x01	; 1
    3622:	8c 91       	ld	r24, X
    3624:	98 17       	cp	r25, r24
    3626:	09 f4       	brne	.+2      	; 0x362a <_fpadd_parts+0x1a2>
    3628:	45 c0       	rjmp	.+138    	; 0x36b4 <_fpadd_parts+0x22c>
    362a:	99 23       	and	r25, r25
    362c:	39 f0       	breq	.+14     	; 0x363c <_fpadd_parts+0x1b4>
    362e:	a8 01       	movw	r20, r16
    3630:	97 01       	movw	r18, r14
    3632:	2a 19       	sub	r18, r10
    3634:	3b 09       	sbc	r19, r11
    3636:	4c 09       	sbc	r20, r12
    3638:	5d 09       	sbc	r21, r13
    363a:	06 c0       	rjmp	.+12     	; 0x3648 <_fpadd_parts+0x1c0>
    363c:	a6 01       	movw	r20, r12
    363e:	95 01       	movw	r18, r10
    3640:	2e 19       	sub	r18, r14
    3642:	3f 09       	sbc	r19, r15
    3644:	40 0b       	sbc	r20, r16
    3646:	51 0b       	sbc	r21, r17
    3648:	57 fd       	sbrc	r21, 7
    364a:	08 c0       	rjmp	.+16     	; 0x365c <_fpadd_parts+0x1d4>
    364c:	11 82       	std	Z+1, r1	; 0x01
    364e:	33 82       	std	Z+3, r3	; 0x03
    3650:	22 82       	std	Z+2, r2	; 0x02
    3652:	24 83       	std	Z+4, r18	; 0x04
    3654:	35 83       	std	Z+5, r19	; 0x05
    3656:	46 83       	std	Z+6, r20	; 0x06
    3658:	57 83       	std	Z+7, r21	; 0x07
    365a:	1d c0       	rjmp	.+58     	; 0x3696 <_fpadd_parts+0x20e>
    365c:	81 e0       	ldi	r24, 0x01	; 1
    365e:	81 83       	std	Z+1, r24	; 0x01
    3660:	33 82       	std	Z+3, r3	; 0x03
    3662:	22 82       	std	Z+2, r2	; 0x02
    3664:	88 27       	eor	r24, r24
    3666:	99 27       	eor	r25, r25
    3668:	dc 01       	movw	r26, r24
    366a:	82 1b       	sub	r24, r18
    366c:	93 0b       	sbc	r25, r19
    366e:	a4 0b       	sbc	r26, r20
    3670:	b5 0b       	sbc	r27, r21
    3672:	84 83       	std	Z+4, r24	; 0x04
    3674:	95 83       	std	Z+5, r25	; 0x05
    3676:	a6 83       	std	Z+6, r26	; 0x06
    3678:	b7 83       	std	Z+7, r27	; 0x07
    367a:	0d c0       	rjmp	.+26     	; 0x3696 <_fpadd_parts+0x20e>
    367c:	22 0f       	add	r18, r18
    367e:	33 1f       	adc	r19, r19
    3680:	44 1f       	adc	r20, r20
    3682:	55 1f       	adc	r21, r21
    3684:	24 83       	std	Z+4, r18	; 0x04
    3686:	35 83       	std	Z+5, r19	; 0x05
    3688:	46 83       	std	Z+6, r20	; 0x06
    368a:	57 83       	std	Z+7, r21	; 0x07
    368c:	82 81       	ldd	r24, Z+2	; 0x02
    368e:	93 81       	ldd	r25, Z+3	; 0x03
    3690:	01 97       	sbiw	r24, 0x01	; 1
    3692:	93 83       	std	Z+3, r25	; 0x03
    3694:	82 83       	std	Z+2, r24	; 0x02
    3696:	24 81       	ldd	r18, Z+4	; 0x04
    3698:	35 81       	ldd	r19, Z+5	; 0x05
    369a:	46 81       	ldd	r20, Z+6	; 0x06
    369c:	57 81       	ldd	r21, Z+7	; 0x07
    369e:	da 01       	movw	r26, r20
    36a0:	c9 01       	movw	r24, r18
    36a2:	01 97       	sbiw	r24, 0x01	; 1
    36a4:	a1 09       	sbc	r26, r1
    36a6:	b1 09       	sbc	r27, r1
    36a8:	8f 5f       	subi	r24, 0xFF	; 255
    36aa:	9f 4f       	sbci	r25, 0xFF	; 255
    36ac:	af 4f       	sbci	r26, 0xFF	; 255
    36ae:	bf 43       	sbci	r27, 0x3F	; 63
    36b0:	28 f3       	brcs	.-54     	; 0x367c <_fpadd_parts+0x1f4>
    36b2:	0b c0       	rjmp	.+22     	; 0x36ca <_fpadd_parts+0x242>
    36b4:	91 83       	std	Z+1, r25	; 0x01
    36b6:	33 82       	std	Z+3, r3	; 0x03
    36b8:	22 82       	std	Z+2, r2	; 0x02
    36ba:	ea 0c       	add	r14, r10
    36bc:	fb 1c       	adc	r15, r11
    36be:	0c 1d       	adc	r16, r12
    36c0:	1d 1d       	adc	r17, r13
    36c2:	e4 82       	std	Z+4, r14	; 0x04
    36c4:	f5 82       	std	Z+5, r15	; 0x05
    36c6:	06 83       	std	Z+6, r16	; 0x06
    36c8:	17 83       	std	Z+7, r17	; 0x07
    36ca:	83 e0       	ldi	r24, 0x03	; 3
    36cc:	80 83       	st	Z, r24
    36ce:	24 81       	ldd	r18, Z+4	; 0x04
    36d0:	35 81       	ldd	r19, Z+5	; 0x05
    36d2:	46 81       	ldd	r20, Z+6	; 0x06
    36d4:	57 81       	ldd	r21, Z+7	; 0x07
    36d6:	57 ff       	sbrs	r21, 7
    36d8:	1a c0       	rjmp	.+52     	; 0x370e <_fpadd_parts+0x286>
    36da:	c9 01       	movw	r24, r18
    36dc:	aa 27       	eor	r26, r26
    36de:	97 fd       	sbrc	r25, 7
    36e0:	a0 95       	com	r26
    36e2:	ba 2f       	mov	r27, r26
    36e4:	81 70       	andi	r24, 0x01	; 1
    36e6:	90 70       	andi	r25, 0x00	; 0
    36e8:	a0 70       	andi	r26, 0x00	; 0
    36ea:	b0 70       	andi	r27, 0x00	; 0
    36ec:	56 95       	lsr	r21
    36ee:	47 95       	ror	r20
    36f0:	37 95       	ror	r19
    36f2:	27 95       	ror	r18
    36f4:	82 2b       	or	r24, r18
    36f6:	93 2b       	or	r25, r19
    36f8:	a4 2b       	or	r26, r20
    36fa:	b5 2b       	or	r27, r21
    36fc:	84 83       	std	Z+4, r24	; 0x04
    36fe:	95 83       	std	Z+5, r25	; 0x05
    3700:	a6 83       	std	Z+6, r26	; 0x06
    3702:	b7 83       	std	Z+7, r27	; 0x07
    3704:	82 81       	ldd	r24, Z+2	; 0x02
    3706:	93 81       	ldd	r25, Z+3	; 0x03
    3708:	01 96       	adiw	r24, 0x01	; 1
    370a:	93 83       	std	Z+3, r25	; 0x03
    370c:	82 83       	std	Z+2, r24	; 0x02
    370e:	df 01       	movw	r26, r30
    3710:	01 c0       	rjmp	.+2      	; 0x3714 <_fpadd_parts+0x28c>
    3712:	d2 01       	movw	r26, r4
    3714:	cd 01       	movw	r24, r26
    3716:	cd b7       	in	r28, 0x3d	; 61
    3718:	de b7       	in	r29, 0x3e	; 62
    371a:	e2 e1       	ldi	r30, 0x12	; 18
    371c:	0c 94 74 21 	jmp	0x42e8	; 0x42e8 <__epilogue_restores__>

00003720 <__subsf3>:
    3720:	a0 e2       	ldi	r26, 0x20	; 32
    3722:	b0 e0       	ldi	r27, 0x00	; 0
    3724:	e6 e9       	ldi	r30, 0x96	; 150
    3726:	fb e1       	ldi	r31, 0x1B	; 27
    3728:	0c 94 64 21 	jmp	0x42c8	; 0x42c8 <__prologue_saves__+0x18>
    372c:	69 83       	std	Y+1, r22	; 0x01
    372e:	7a 83       	std	Y+2, r23	; 0x02
    3730:	8b 83       	std	Y+3, r24	; 0x03
    3732:	9c 83       	std	Y+4, r25	; 0x04
    3734:	2d 83       	std	Y+5, r18	; 0x05
    3736:	3e 83       	std	Y+6, r19	; 0x06
    3738:	4f 83       	std	Y+7, r20	; 0x07
    373a:	58 87       	std	Y+8, r21	; 0x08
    373c:	e9 e0       	ldi	r30, 0x09	; 9
    373e:	ee 2e       	mov	r14, r30
    3740:	f1 2c       	mov	r15, r1
    3742:	ec 0e       	add	r14, r28
    3744:	fd 1e       	adc	r15, r29
    3746:	ce 01       	movw	r24, r28
    3748:	01 96       	adiw	r24, 0x01	; 1
    374a:	b7 01       	movw	r22, r14
    374c:	0e 94 73 20 	call	0x40e6	; 0x40e6 <__unpack_f>
    3750:	8e 01       	movw	r16, r28
    3752:	0f 5e       	subi	r16, 0xEF	; 239
    3754:	1f 4f       	sbci	r17, 0xFF	; 255
    3756:	ce 01       	movw	r24, r28
    3758:	05 96       	adiw	r24, 0x05	; 5
    375a:	b8 01       	movw	r22, r16
    375c:	0e 94 73 20 	call	0x40e6	; 0x40e6 <__unpack_f>
    3760:	8a 89       	ldd	r24, Y+18	; 0x12
    3762:	91 e0       	ldi	r25, 0x01	; 1
    3764:	89 27       	eor	r24, r25
    3766:	8a 8b       	std	Y+18, r24	; 0x12
    3768:	c7 01       	movw	r24, r14
    376a:	b8 01       	movw	r22, r16
    376c:	ae 01       	movw	r20, r28
    376e:	47 5e       	subi	r20, 0xE7	; 231
    3770:	5f 4f       	sbci	r21, 0xFF	; 255
    3772:	0e 94 44 1a 	call	0x3488	; 0x3488 <_fpadd_parts>
    3776:	0e 94 9e 1f 	call	0x3f3c	; 0x3f3c <__pack_f>
    377a:	a0 96       	adiw	r28, 0x20	; 32
    377c:	e6 e0       	ldi	r30, 0x06	; 6
    377e:	0c 94 80 21 	jmp	0x4300	; 0x4300 <__epilogue_restores__+0x18>

00003782 <__addsf3>:
    3782:	a0 e2       	ldi	r26, 0x20	; 32
    3784:	b0 e0       	ldi	r27, 0x00	; 0
    3786:	e7 ec       	ldi	r30, 0xC7	; 199
    3788:	fb e1       	ldi	r31, 0x1B	; 27
    378a:	0c 94 64 21 	jmp	0x42c8	; 0x42c8 <__prologue_saves__+0x18>
    378e:	69 83       	std	Y+1, r22	; 0x01
    3790:	7a 83       	std	Y+2, r23	; 0x02
    3792:	8b 83       	std	Y+3, r24	; 0x03
    3794:	9c 83       	std	Y+4, r25	; 0x04
    3796:	2d 83       	std	Y+5, r18	; 0x05
    3798:	3e 83       	std	Y+6, r19	; 0x06
    379a:	4f 83       	std	Y+7, r20	; 0x07
    379c:	58 87       	std	Y+8, r21	; 0x08
    379e:	f9 e0       	ldi	r31, 0x09	; 9
    37a0:	ef 2e       	mov	r14, r31
    37a2:	f1 2c       	mov	r15, r1
    37a4:	ec 0e       	add	r14, r28
    37a6:	fd 1e       	adc	r15, r29
    37a8:	ce 01       	movw	r24, r28
    37aa:	01 96       	adiw	r24, 0x01	; 1
    37ac:	b7 01       	movw	r22, r14
    37ae:	0e 94 73 20 	call	0x40e6	; 0x40e6 <__unpack_f>
    37b2:	8e 01       	movw	r16, r28
    37b4:	0f 5e       	subi	r16, 0xEF	; 239
    37b6:	1f 4f       	sbci	r17, 0xFF	; 255
    37b8:	ce 01       	movw	r24, r28
    37ba:	05 96       	adiw	r24, 0x05	; 5
    37bc:	b8 01       	movw	r22, r16
    37be:	0e 94 73 20 	call	0x40e6	; 0x40e6 <__unpack_f>
    37c2:	c7 01       	movw	r24, r14
    37c4:	b8 01       	movw	r22, r16
    37c6:	ae 01       	movw	r20, r28
    37c8:	47 5e       	subi	r20, 0xE7	; 231
    37ca:	5f 4f       	sbci	r21, 0xFF	; 255
    37cc:	0e 94 44 1a 	call	0x3488	; 0x3488 <_fpadd_parts>
    37d0:	0e 94 9e 1f 	call	0x3f3c	; 0x3f3c <__pack_f>
    37d4:	a0 96       	adiw	r28, 0x20	; 32
    37d6:	e6 e0       	ldi	r30, 0x06	; 6
    37d8:	0c 94 80 21 	jmp	0x4300	; 0x4300 <__epilogue_restores__+0x18>

000037dc <__mulsf3>:
    37dc:	a0 e2       	ldi	r26, 0x20	; 32
    37de:	b0 e0       	ldi	r27, 0x00	; 0
    37e0:	e4 ef       	ldi	r30, 0xF4	; 244
    37e2:	fb e1       	ldi	r31, 0x1B	; 27
    37e4:	0c 94 58 21 	jmp	0x42b0	; 0x42b0 <__prologue_saves__>
    37e8:	69 83       	std	Y+1, r22	; 0x01
    37ea:	7a 83       	std	Y+2, r23	; 0x02
    37ec:	8b 83       	std	Y+3, r24	; 0x03
    37ee:	9c 83       	std	Y+4, r25	; 0x04
    37f0:	2d 83       	std	Y+5, r18	; 0x05
    37f2:	3e 83       	std	Y+6, r19	; 0x06
    37f4:	4f 83       	std	Y+7, r20	; 0x07
    37f6:	58 87       	std	Y+8, r21	; 0x08
    37f8:	ce 01       	movw	r24, r28
    37fa:	01 96       	adiw	r24, 0x01	; 1
    37fc:	be 01       	movw	r22, r28
    37fe:	67 5f       	subi	r22, 0xF7	; 247
    3800:	7f 4f       	sbci	r23, 0xFF	; 255
    3802:	0e 94 73 20 	call	0x40e6	; 0x40e6 <__unpack_f>
    3806:	ce 01       	movw	r24, r28
    3808:	05 96       	adiw	r24, 0x05	; 5
    380a:	be 01       	movw	r22, r28
    380c:	6f 5e       	subi	r22, 0xEF	; 239
    380e:	7f 4f       	sbci	r23, 0xFF	; 255
    3810:	0e 94 73 20 	call	0x40e6	; 0x40e6 <__unpack_f>
    3814:	99 85       	ldd	r25, Y+9	; 0x09
    3816:	92 30       	cpi	r25, 0x02	; 2
    3818:	88 f0       	brcs	.+34     	; 0x383c <__mulsf3+0x60>
    381a:	89 89       	ldd	r24, Y+17	; 0x11
    381c:	82 30       	cpi	r24, 0x02	; 2
    381e:	c8 f0       	brcs	.+50     	; 0x3852 <__mulsf3+0x76>
    3820:	94 30       	cpi	r25, 0x04	; 4
    3822:	19 f4       	brne	.+6      	; 0x382a <__mulsf3+0x4e>
    3824:	82 30       	cpi	r24, 0x02	; 2
    3826:	51 f4       	brne	.+20     	; 0x383c <__mulsf3+0x60>
    3828:	04 c0       	rjmp	.+8      	; 0x3832 <__mulsf3+0x56>
    382a:	84 30       	cpi	r24, 0x04	; 4
    382c:	29 f4       	brne	.+10     	; 0x3838 <__mulsf3+0x5c>
    382e:	92 30       	cpi	r25, 0x02	; 2
    3830:	81 f4       	brne	.+32     	; 0x3852 <__mulsf3+0x76>
    3832:	80 e0       	ldi	r24, 0x00	; 0
    3834:	92 e0       	ldi	r25, 0x02	; 2
    3836:	c6 c0       	rjmp	.+396    	; 0x39c4 <__mulsf3+0x1e8>
    3838:	92 30       	cpi	r25, 0x02	; 2
    383a:	49 f4       	brne	.+18     	; 0x384e <__mulsf3+0x72>
    383c:	20 e0       	ldi	r18, 0x00	; 0
    383e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3840:	8a 89       	ldd	r24, Y+18	; 0x12
    3842:	98 13       	cpse	r25, r24
    3844:	21 e0       	ldi	r18, 0x01	; 1
    3846:	2a 87       	std	Y+10, r18	; 0x0a
    3848:	ce 01       	movw	r24, r28
    384a:	09 96       	adiw	r24, 0x09	; 9
    384c:	bb c0       	rjmp	.+374    	; 0x39c4 <__mulsf3+0x1e8>
    384e:	82 30       	cpi	r24, 0x02	; 2
    3850:	49 f4       	brne	.+18     	; 0x3864 <__mulsf3+0x88>
    3852:	20 e0       	ldi	r18, 0x00	; 0
    3854:	9a 85       	ldd	r25, Y+10	; 0x0a
    3856:	8a 89       	ldd	r24, Y+18	; 0x12
    3858:	98 13       	cpse	r25, r24
    385a:	21 e0       	ldi	r18, 0x01	; 1
    385c:	2a 8b       	std	Y+18, r18	; 0x12
    385e:	ce 01       	movw	r24, r28
    3860:	41 96       	adiw	r24, 0x11	; 17
    3862:	b0 c0       	rjmp	.+352    	; 0x39c4 <__mulsf3+0x1e8>
    3864:	2d 84       	ldd	r2, Y+13	; 0x0d
    3866:	3e 84       	ldd	r3, Y+14	; 0x0e
    3868:	4f 84       	ldd	r4, Y+15	; 0x0f
    386a:	58 88       	ldd	r5, Y+16	; 0x10
    386c:	6d 88       	ldd	r6, Y+21	; 0x15
    386e:	7e 88       	ldd	r7, Y+22	; 0x16
    3870:	8f 88       	ldd	r8, Y+23	; 0x17
    3872:	98 8c       	ldd	r9, Y+24	; 0x18
    3874:	ee 24       	eor	r14, r14
    3876:	ff 24       	eor	r15, r15
    3878:	87 01       	movw	r16, r14
    387a:	aa 24       	eor	r10, r10
    387c:	bb 24       	eor	r11, r11
    387e:	65 01       	movw	r12, r10
    3880:	40 e0       	ldi	r20, 0x00	; 0
    3882:	50 e0       	ldi	r21, 0x00	; 0
    3884:	60 e0       	ldi	r22, 0x00	; 0
    3886:	70 e0       	ldi	r23, 0x00	; 0
    3888:	e0 e0       	ldi	r30, 0x00	; 0
    388a:	f0 e0       	ldi	r31, 0x00	; 0
    388c:	c1 01       	movw	r24, r2
    388e:	81 70       	andi	r24, 0x01	; 1
    3890:	90 70       	andi	r25, 0x00	; 0
    3892:	89 2b       	or	r24, r25
    3894:	e9 f0       	breq	.+58     	; 0x38d0 <__mulsf3+0xf4>
    3896:	e6 0c       	add	r14, r6
    3898:	f7 1c       	adc	r15, r7
    389a:	08 1d       	adc	r16, r8
    389c:	19 1d       	adc	r17, r9
    389e:	9a 01       	movw	r18, r20
    38a0:	ab 01       	movw	r20, r22
    38a2:	2a 0d       	add	r18, r10
    38a4:	3b 1d       	adc	r19, r11
    38a6:	4c 1d       	adc	r20, r12
    38a8:	5d 1d       	adc	r21, r13
    38aa:	80 e0       	ldi	r24, 0x00	; 0
    38ac:	90 e0       	ldi	r25, 0x00	; 0
    38ae:	a0 e0       	ldi	r26, 0x00	; 0
    38b0:	b0 e0       	ldi	r27, 0x00	; 0
    38b2:	e6 14       	cp	r14, r6
    38b4:	f7 04       	cpc	r15, r7
    38b6:	08 05       	cpc	r16, r8
    38b8:	19 05       	cpc	r17, r9
    38ba:	20 f4       	brcc	.+8      	; 0x38c4 <__mulsf3+0xe8>
    38bc:	81 e0       	ldi	r24, 0x01	; 1
    38be:	90 e0       	ldi	r25, 0x00	; 0
    38c0:	a0 e0       	ldi	r26, 0x00	; 0
    38c2:	b0 e0       	ldi	r27, 0x00	; 0
    38c4:	ba 01       	movw	r22, r20
    38c6:	a9 01       	movw	r20, r18
    38c8:	48 0f       	add	r20, r24
    38ca:	59 1f       	adc	r21, r25
    38cc:	6a 1f       	adc	r22, r26
    38ce:	7b 1f       	adc	r23, r27
    38d0:	aa 0c       	add	r10, r10
    38d2:	bb 1c       	adc	r11, r11
    38d4:	cc 1c       	adc	r12, r12
    38d6:	dd 1c       	adc	r13, r13
    38d8:	97 fe       	sbrs	r9, 7
    38da:	08 c0       	rjmp	.+16     	; 0x38ec <__mulsf3+0x110>
    38dc:	81 e0       	ldi	r24, 0x01	; 1
    38de:	90 e0       	ldi	r25, 0x00	; 0
    38e0:	a0 e0       	ldi	r26, 0x00	; 0
    38e2:	b0 e0       	ldi	r27, 0x00	; 0
    38e4:	a8 2a       	or	r10, r24
    38e6:	b9 2a       	or	r11, r25
    38e8:	ca 2a       	or	r12, r26
    38ea:	db 2a       	or	r13, r27
    38ec:	31 96       	adiw	r30, 0x01	; 1
    38ee:	e0 32       	cpi	r30, 0x20	; 32
    38f0:	f1 05       	cpc	r31, r1
    38f2:	49 f0       	breq	.+18     	; 0x3906 <__mulsf3+0x12a>
    38f4:	66 0c       	add	r6, r6
    38f6:	77 1c       	adc	r7, r7
    38f8:	88 1c       	adc	r8, r8
    38fa:	99 1c       	adc	r9, r9
    38fc:	56 94       	lsr	r5
    38fe:	47 94       	ror	r4
    3900:	37 94       	ror	r3
    3902:	27 94       	ror	r2
    3904:	c3 cf       	rjmp	.-122    	; 0x388c <__mulsf3+0xb0>
    3906:	fa 85       	ldd	r31, Y+10	; 0x0a
    3908:	ea 89       	ldd	r30, Y+18	; 0x12
    390a:	2b 89       	ldd	r18, Y+19	; 0x13
    390c:	3c 89       	ldd	r19, Y+20	; 0x14
    390e:	8b 85       	ldd	r24, Y+11	; 0x0b
    3910:	9c 85       	ldd	r25, Y+12	; 0x0c
    3912:	28 0f       	add	r18, r24
    3914:	39 1f       	adc	r19, r25
    3916:	2e 5f       	subi	r18, 0xFE	; 254
    3918:	3f 4f       	sbci	r19, 0xFF	; 255
    391a:	17 c0       	rjmp	.+46     	; 0x394a <__mulsf3+0x16e>
    391c:	ca 01       	movw	r24, r20
    391e:	81 70       	andi	r24, 0x01	; 1
    3920:	90 70       	andi	r25, 0x00	; 0
    3922:	89 2b       	or	r24, r25
    3924:	61 f0       	breq	.+24     	; 0x393e <__mulsf3+0x162>
    3926:	16 95       	lsr	r17
    3928:	07 95       	ror	r16
    392a:	f7 94       	ror	r15
    392c:	e7 94       	ror	r14
    392e:	80 e0       	ldi	r24, 0x00	; 0
    3930:	90 e0       	ldi	r25, 0x00	; 0
    3932:	a0 e0       	ldi	r26, 0x00	; 0
    3934:	b0 e8       	ldi	r27, 0x80	; 128
    3936:	e8 2a       	or	r14, r24
    3938:	f9 2a       	or	r15, r25
    393a:	0a 2b       	or	r16, r26
    393c:	1b 2b       	or	r17, r27
    393e:	76 95       	lsr	r23
    3940:	67 95       	ror	r22
    3942:	57 95       	ror	r21
    3944:	47 95       	ror	r20
    3946:	2f 5f       	subi	r18, 0xFF	; 255
    3948:	3f 4f       	sbci	r19, 0xFF	; 255
    394a:	77 fd       	sbrc	r23, 7
    394c:	e7 cf       	rjmp	.-50     	; 0x391c <__mulsf3+0x140>
    394e:	0c c0       	rjmp	.+24     	; 0x3968 <__mulsf3+0x18c>
    3950:	44 0f       	add	r20, r20
    3952:	55 1f       	adc	r21, r21
    3954:	66 1f       	adc	r22, r22
    3956:	77 1f       	adc	r23, r23
    3958:	17 fd       	sbrc	r17, 7
    395a:	41 60       	ori	r20, 0x01	; 1
    395c:	ee 0c       	add	r14, r14
    395e:	ff 1c       	adc	r15, r15
    3960:	00 1f       	adc	r16, r16
    3962:	11 1f       	adc	r17, r17
    3964:	21 50       	subi	r18, 0x01	; 1
    3966:	30 40       	sbci	r19, 0x00	; 0
    3968:	40 30       	cpi	r20, 0x00	; 0
    396a:	90 e0       	ldi	r25, 0x00	; 0
    396c:	59 07       	cpc	r21, r25
    396e:	90 e0       	ldi	r25, 0x00	; 0
    3970:	69 07       	cpc	r22, r25
    3972:	90 e4       	ldi	r25, 0x40	; 64
    3974:	79 07       	cpc	r23, r25
    3976:	60 f3       	brcs	.-40     	; 0x3950 <__mulsf3+0x174>
    3978:	2b 8f       	std	Y+27, r18	; 0x1b
    397a:	3c 8f       	std	Y+28, r19	; 0x1c
    397c:	db 01       	movw	r26, r22
    397e:	ca 01       	movw	r24, r20
    3980:	8f 77       	andi	r24, 0x7F	; 127
    3982:	90 70       	andi	r25, 0x00	; 0
    3984:	a0 70       	andi	r26, 0x00	; 0
    3986:	b0 70       	andi	r27, 0x00	; 0
    3988:	80 34       	cpi	r24, 0x40	; 64
    398a:	91 05       	cpc	r25, r1
    398c:	a1 05       	cpc	r26, r1
    398e:	b1 05       	cpc	r27, r1
    3990:	61 f4       	brne	.+24     	; 0x39aa <__mulsf3+0x1ce>
    3992:	47 fd       	sbrc	r20, 7
    3994:	0a c0       	rjmp	.+20     	; 0x39aa <__mulsf3+0x1ce>
    3996:	e1 14       	cp	r14, r1
    3998:	f1 04       	cpc	r15, r1
    399a:	01 05       	cpc	r16, r1
    399c:	11 05       	cpc	r17, r1
    399e:	29 f0       	breq	.+10     	; 0x39aa <__mulsf3+0x1ce>
    39a0:	40 5c       	subi	r20, 0xC0	; 192
    39a2:	5f 4f       	sbci	r21, 0xFF	; 255
    39a4:	6f 4f       	sbci	r22, 0xFF	; 255
    39a6:	7f 4f       	sbci	r23, 0xFF	; 255
    39a8:	40 78       	andi	r20, 0x80	; 128
    39aa:	1a 8e       	std	Y+26, r1	; 0x1a
    39ac:	fe 17       	cp	r31, r30
    39ae:	11 f0       	breq	.+4      	; 0x39b4 <__mulsf3+0x1d8>
    39b0:	81 e0       	ldi	r24, 0x01	; 1
    39b2:	8a 8f       	std	Y+26, r24	; 0x1a
    39b4:	4d 8f       	std	Y+29, r20	; 0x1d
    39b6:	5e 8f       	std	Y+30, r21	; 0x1e
    39b8:	6f 8f       	std	Y+31, r22	; 0x1f
    39ba:	78 a3       	std	Y+32, r23	; 0x20
    39bc:	83 e0       	ldi	r24, 0x03	; 3
    39be:	89 8f       	std	Y+25, r24	; 0x19
    39c0:	ce 01       	movw	r24, r28
    39c2:	49 96       	adiw	r24, 0x19	; 25
    39c4:	0e 94 9e 1f 	call	0x3f3c	; 0x3f3c <__pack_f>
    39c8:	a0 96       	adiw	r28, 0x20	; 32
    39ca:	e2 e1       	ldi	r30, 0x12	; 18
    39cc:	0c 94 74 21 	jmp	0x42e8	; 0x42e8 <__epilogue_restores__>

000039d0 <__divsf3>:
    39d0:	a8 e1       	ldi	r26, 0x18	; 24
    39d2:	b0 e0       	ldi	r27, 0x00	; 0
    39d4:	ee ee       	ldi	r30, 0xEE	; 238
    39d6:	fc e1       	ldi	r31, 0x1C	; 28
    39d8:	0c 94 60 21 	jmp	0x42c0	; 0x42c0 <__prologue_saves__+0x10>
    39dc:	69 83       	std	Y+1, r22	; 0x01
    39de:	7a 83       	std	Y+2, r23	; 0x02
    39e0:	8b 83       	std	Y+3, r24	; 0x03
    39e2:	9c 83       	std	Y+4, r25	; 0x04
    39e4:	2d 83       	std	Y+5, r18	; 0x05
    39e6:	3e 83       	std	Y+6, r19	; 0x06
    39e8:	4f 83       	std	Y+7, r20	; 0x07
    39ea:	58 87       	std	Y+8, r21	; 0x08
    39ec:	b9 e0       	ldi	r27, 0x09	; 9
    39ee:	eb 2e       	mov	r14, r27
    39f0:	f1 2c       	mov	r15, r1
    39f2:	ec 0e       	add	r14, r28
    39f4:	fd 1e       	adc	r15, r29
    39f6:	ce 01       	movw	r24, r28
    39f8:	01 96       	adiw	r24, 0x01	; 1
    39fa:	b7 01       	movw	r22, r14
    39fc:	0e 94 73 20 	call	0x40e6	; 0x40e6 <__unpack_f>
    3a00:	8e 01       	movw	r16, r28
    3a02:	0f 5e       	subi	r16, 0xEF	; 239
    3a04:	1f 4f       	sbci	r17, 0xFF	; 255
    3a06:	ce 01       	movw	r24, r28
    3a08:	05 96       	adiw	r24, 0x05	; 5
    3a0a:	b8 01       	movw	r22, r16
    3a0c:	0e 94 73 20 	call	0x40e6	; 0x40e6 <__unpack_f>
    3a10:	29 85       	ldd	r18, Y+9	; 0x09
    3a12:	22 30       	cpi	r18, 0x02	; 2
    3a14:	08 f4       	brcc	.+2      	; 0x3a18 <__divsf3+0x48>
    3a16:	7e c0       	rjmp	.+252    	; 0x3b14 <__divsf3+0x144>
    3a18:	39 89       	ldd	r19, Y+17	; 0x11
    3a1a:	32 30       	cpi	r19, 0x02	; 2
    3a1c:	10 f4       	brcc	.+4      	; 0x3a22 <__divsf3+0x52>
    3a1e:	b8 01       	movw	r22, r16
    3a20:	7c c0       	rjmp	.+248    	; 0x3b1a <__divsf3+0x14a>
    3a22:	8a 85       	ldd	r24, Y+10	; 0x0a
    3a24:	9a 89       	ldd	r25, Y+18	; 0x12
    3a26:	89 27       	eor	r24, r25
    3a28:	8a 87       	std	Y+10, r24	; 0x0a
    3a2a:	24 30       	cpi	r18, 0x04	; 4
    3a2c:	11 f0       	breq	.+4      	; 0x3a32 <__divsf3+0x62>
    3a2e:	22 30       	cpi	r18, 0x02	; 2
    3a30:	31 f4       	brne	.+12     	; 0x3a3e <__divsf3+0x6e>
    3a32:	23 17       	cp	r18, r19
    3a34:	09 f0       	breq	.+2      	; 0x3a38 <__divsf3+0x68>
    3a36:	6e c0       	rjmp	.+220    	; 0x3b14 <__divsf3+0x144>
    3a38:	60 e0       	ldi	r22, 0x00	; 0
    3a3a:	72 e0       	ldi	r23, 0x02	; 2
    3a3c:	6e c0       	rjmp	.+220    	; 0x3b1a <__divsf3+0x14a>
    3a3e:	34 30       	cpi	r19, 0x04	; 4
    3a40:	39 f4       	brne	.+14     	; 0x3a50 <__divsf3+0x80>
    3a42:	1d 86       	std	Y+13, r1	; 0x0d
    3a44:	1e 86       	std	Y+14, r1	; 0x0e
    3a46:	1f 86       	std	Y+15, r1	; 0x0f
    3a48:	18 8a       	std	Y+16, r1	; 0x10
    3a4a:	1c 86       	std	Y+12, r1	; 0x0c
    3a4c:	1b 86       	std	Y+11, r1	; 0x0b
    3a4e:	04 c0       	rjmp	.+8      	; 0x3a58 <__divsf3+0x88>
    3a50:	32 30       	cpi	r19, 0x02	; 2
    3a52:	21 f4       	brne	.+8      	; 0x3a5c <__divsf3+0x8c>
    3a54:	84 e0       	ldi	r24, 0x04	; 4
    3a56:	89 87       	std	Y+9, r24	; 0x09
    3a58:	b7 01       	movw	r22, r14
    3a5a:	5f c0       	rjmp	.+190    	; 0x3b1a <__divsf3+0x14a>
    3a5c:	2b 85       	ldd	r18, Y+11	; 0x0b
    3a5e:	3c 85       	ldd	r19, Y+12	; 0x0c
    3a60:	8b 89       	ldd	r24, Y+19	; 0x13
    3a62:	9c 89       	ldd	r25, Y+20	; 0x14
    3a64:	28 1b       	sub	r18, r24
    3a66:	39 0b       	sbc	r19, r25
    3a68:	3c 87       	std	Y+12, r19	; 0x0c
    3a6a:	2b 87       	std	Y+11, r18	; 0x0b
    3a6c:	ed 84       	ldd	r14, Y+13	; 0x0d
    3a6e:	fe 84       	ldd	r15, Y+14	; 0x0e
    3a70:	0f 85       	ldd	r16, Y+15	; 0x0f
    3a72:	18 89       	ldd	r17, Y+16	; 0x10
    3a74:	ad 88       	ldd	r10, Y+21	; 0x15
    3a76:	be 88       	ldd	r11, Y+22	; 0x16
    3a78:	cf 88       	ldd	r12, Y+23	; 0x17
    3a7a:	d8 8c       	ldd	r13, Y+24	; 0x18
    3a7c:	ea 14       	cp	r14, r10
    3a7e:	fb 04       	cpc	r15, r11
    3a80:	0c 05       	cpc	r16, r12
    3a82:	1d 05       	cpc	r17, r13
    3a84:	40 f4       	brcc	.+16     	; 0x3a96 <__divsf3+0xc6>
    3a86:	ee 0c       	add	r14, r14
    3a88:	ff 1c       	adc	r15, r15
    3a8a:	00 1f       	adc	r16, r16
    3a8c:	11 1f       	adc	r17, r17
    3a8e:	21 50       	subi	r18, 0x01	; 1
    3a90:	30 40       	sbci	r19, 0x00	; 0
    3a92:	3c 87       	std	Y+12, r19	; 0x0c
    3a94:	2b 87       	std	Y+11, r18	; 0x0b
    3a96:	20 e0       	ldi	r18, 0x00	; 0
    3a98:	30 e0       	ldi	r19, 0x00	; 0
    3a9a:	40 e0       	ldi	r20, 0x00	; 0
    3a9c:	50 e0       	ldi	r21, 0x00	; 0
    3a9e:	80 e0       	ldi	r24, 0x00	; 0
    3aa0:	90 e0       	ldi	r25, 0x00	; 0
    3aa2:	a0 e0       	ldi	r26, 0x00	; 0
    3aa4:	b0 e4       	ldi	r27, 0x40	; 64
    3aa6:	60 e0       	ldi	r22, 0x00	; 0
    3aa8:	70 e0       	ldi	r23, 0x00	; 0
    3aaa:	ea 14       	cp	r14, r10
    3aac:	fb 04       	cpc	r15, r11
    3aae:	0c 05       	cpc	r16, r12
    3ab0:	1d 05       	cpc	r17, r13
    3ab2:	40 f0       	brcs	.+16     	; 0x3ac4 <__divsf3+0xf4>
    3ab4:	28 2b       	or	r18, r24
    3ab6:	39 2b       	or	r19, r25
    3ab8:	4a 2b       	or	r20, r26
    3aba:	5b 2b       	or	r21, r27
    3abc:	ea 18       	sub	r14, r10
    3abe:	fb 08       	sbc	r15, r11
    3ac0:	0c 09       	sbc	r16, r12
    3ac2:	1d 09       	sbc	r17, r13
    3ac4:	b6 95       	lsr	r27
    3ac6:	a7 95       	ror	r26
    3ac8:	97 95       	ror	r25
    3aca:	87 95       	ror	r24
    3acc:	ee 0c       	add	r14, r14
    3ace:	ff 1c       	adc	r15, r15
    3ad0:	00 1f       	adc	r16, r16
    3ad2:	11 1f       	adc	r17, r17
    3ad4:	6f 5f       	subi	r22, 0xFF	; 255
    3ad6:	7f 4f       	sbci	r23, 0xFF	; 255
    3ad8:	6f 31       	cpi	r22, 0x1F	; 31
    3ada:	71 05       	cpc	r23, r1
    3adc:	31 f7       	brne	.-52     	; 0x3aaa <__divsf3+0xda>
    3ade:	da 01       	movw	r26, r20
    3ae0:	c9 01       	movw	r24, r18
    3ae2:	8f 77       	andi	r24, 0x7F	; 127
    3ae4:	90 70       	andi	r25, 0x00	; 0
    3ae6:	a0 70       	andi	r26, 0x00	; 0
    3ae8:	b0 70       	andi	r27, 0x00	; 0
    3aea:	80 34       	cpi	r24, 0x40	; 64
    3aec:	91 05       	cpc	r25, r1
    3aee:	a1 05       	cpc	r26, r1
    3af0:	b1 05       	cpc	r27, r1
    3af2:	61 f4       	brne	.+24     	; 0x3b0c <__divsf3+0x13c>
    3af4:	27 fd       	sbrc	r18, 7
    3af6:	0a c0       	rjmp	.+20     	; 0x3b0c <__divsf3+0x13c>
    3af8:	e1 14       	cp	r14, r1
    3afa:	f1 04       	cpc	r15, r1
    3afc:	01 05       	cpc	r16, r1
    3afe:	11 05       	cpc	r17, r1
    3b00:	29 f0       	breq	.+10     	; 0x3b0c <__divsf3+0x13c>
    3b02:	20 5c       	subi	r18, 0xC0	; 192
    3b04:	3f 4f       	sbci	r19, 0xFF	; 255
    3b06:	4f 4f       	sbci	r20, 0xFF	; 255
    3b08:	5f 4f       	sbci	r21, 0xFF	; 255
    3b0a:	20 78       	andi	r18, 0x80	; 128
    3b0c:	2d 87       	std	Y+13, r18	; 0x0d
    3b0e:	3e 87       	std	Y+14, r19	; 0x0e
    3b10:	4f 87       	std	Y+15, r20	; 0x0f
    3b12:	58 8b       	std	Y+16, r21	; 0x10
    3b14:	be 01       	movw	r22, r28
    3b16:	67 5f       	subi	r22, 0xF7	; 247
    3b18:	7f 4f       	sbci	r23, 0xFF	; 255
    3b1a:	cb 01       	movw	r24, r22
    3b1c:	0e 94 9e 1f 	call	0x3f3c	; 0x3f3c <__pack_f>
    3b20:	68 96       	adiw	r28, 0x18	; 24
    3b22:	ea e0       	ldi	r30, 0x0A	; 10
    3b24:	0c 94 7c 21 	jmp	0x42f8	; 0x42f8 <__epilogue_restores__+0x10>

00003b28 <__gtsf2>:
    3b28:	a8 e1       	ldi	r26, 0x18	; 24
    3b2a:	b0 e0       	ldi	r27, 0x00	; 0
    3b2c:	ea e9       	ldi	r30, 0x9A	; 154
    3b2e:	fd e1       	ldi	r31, 0x1D	; 29
    3b30:	0c 94 64 21 	jmp	0x42c8	; 0x42c8 <__prologue_saves__+0x18>
    3b34:	69 83       	std	Y+1, r22	; 0x01
    3b36:	7a 83       	std	Y+2, r23	; 0x02
    3b38:	8b 83       	std	Y+3, r24	; 0x03
    3b3a:	9c 83       	std	Y+4, r25	; 0x04
    3b3c:	2d 83       	std	Y+5, r18	; 0x05
    3b3e:	3e 83       	std	Y+6, r19	; 0x06
    3b40:	4f 83       	std	Y+7, r20	; 0x07
    3b42:	58 87       	std	Y+8, r21	; 0x08
    3b44:	89 e0       	ldi	r24, 0x09	; 9
    3b46:	e8 2e       	mov	r14, r24
    3b48:	f1 2c       	mov	r15, r1
    3b4a:	ec 0e       	add	r14, r28
    3b4c:	fd 1e       	adc	r15, r29
    3b4e:	ce 01       	movw	r24, r28
    3b50:	01 96       	adiw	r24, 0x01	; 1
    3b52:	b7 01       	movw	r22, r14
    3b54:	0e 94 73 20 	call	0x40e6	; 0x40e6 <__unpack_f>
    3b58:	8e 01       	movw	r16, r28
    3b5a:	0f 5e       	subi	r16, 0xEF	; 239
    3b5c:	1f 4f       	sbci	r17, 0xFF	; 255
    3b5e:	ce 01       	movw	r24, r28
    3b60:	05 96       	adiw	r24, 0x05	; 5
    3b62:	b8 01       	movw	r22, r16
    3b64:	0e 94 73 20 	call	0x40e6	; 0x40e6 <__unpack_f>
    3b68:	89 85       	ldd	r24, Y+9	; 0x09
    3b6a:	82 30       	cpi	r24, 0x02	; 2
    3b6c:	40 f0       	brcs	.+16     	; 0x3b7e <__gtsf2+0x56>
    3b6e:	89 89       	ldd	r24, Y+17	; 0x11
    3b70:	82 30       	cpi	r24, 0x02	; 2
    3b72:	28 f0       	brcs	.+10     	; 0x3b7e <__gtsf2+0x56>
    3b74:	c7 01       	movw	r24, r14
    3b76:	b8 01       	movw	r22, r16
    3b78:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <__fpcmp_parts_f>
    3b7c:	01 c0       	rjmp	.+2      	; 0x3b80 <__gtsf2+0x58>
    3b7e:	8f ef       	ldi	r24, 0xFF	; 255
    3b80:	68 96       	adiw	r28, 0x18	; 24
    3b82:	e6 e0       	ldi	r30, 0x06	; 6
    3b84:	0c 94 80 21 	jmp	0x4300	; 0x4300 <__epilogue_restores__+0x18>

00003b88 <__gesf2>:
    3b88:	a8 e1       	ldi	r26, 0x18	; 24
    3b8a:	b0 e0       	ldi	r27, 0x00	; 0
    3b8c:	ea ec       	ldi	r30, 0xCA	; 202
    3b8e:	fd e1       	ldi	r31, 0x1D	; 29
    3b90:	0c 94 64 21 	jmp	0x42c8	; 0x42c8 <__prologue_saves__+0x18>
    3b94:	69 83       	std	Y+1, r22	; 0x01
    3b96:	7a 83       	std	Y+2, r23	; 0x02
    3b98:	8b 83       	std	Y+3, r24	; 0x03
    3b9a:	9c 83       	std	Y+4, r25	; 0x04
    3b9c:	2d 83       	std	Y+5, r18	; 0x05
    3b9e:	3e 83       	std	Y+6, r19	; 0x06
    3ba0:	4f 83       	std	Y+7, r20	; 0x07
    3ba2:	58 87       	std	Y+8, r21	; 0x08
    3ba4:	89 e0       	ldi	r24, 0x09	; 9
    3ba6:	e8 2e       	mov	r14, r24
    3ba8:	f1 2c       	mov	r15, r1
    3baa:	ec 0e       	add	r14, r28
    3bac:	fd 1e       	adc	r15, r29
    3bae:	ce 01       	movw	r24, r28
    3bb0:	01 96       	adiw	r24, 0x01	; 1
    3bb2:	b7 01       	movw	r22, r14
    3bb4:	0e 94 73 20 	call	0x40e6	; 0x40e6 <__unpack_f>
    3bb8:	8e 01       	movw	r16, r28
    3bba:	0f 5e       	subi	r16, 0xEF	; 239
    3bbc:	1f 4f       	sbci	r17, 0xFF	; 255
    3bbe:	ce 01       	movw	r24, r28
    3bc0:	05 96       	adiw	r24, 0x05	; 5
    3bc2:	b8 01       	movw	r22, r16
    3bc4:	0e 94 73 20 	call	0x40e6	; 0x40e6 <__unpack_f>
    3bc8:	89 85       	ldd	r24, Y+9	; 0x09
    3bca:	82 30       	cpi	r24, 0x02	; 2
    3bcc:	40 f0       	brcs	.+16     	; 0x3bde <__gesf2+0x56>
    3bce:	89 89       	ldd	r24, Y+17	; 0x11
    3bd0:	82 30       	cpi	r24, 0x02	; 2
    3bd2:	28 f0       	brcs	.+10     	; 0x3bde <__gesf2+0x56>
    3bd4:	c7 01       	movw	r24, r14
    3bd6:	b8 01       	movw	r22, r16
    3bd8:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <__fpcmp_parts_f>
    3bdc:	01 c0       	rjmp	.+2      	; 0x3be0 <__gesf2+0x58>
    3bde:	8f ef       	ldi	r24, 0xFF	; 255
    3be0:	68 96       	adiw	r28, 0x18	; 24
    3be2:	e6 e0       	ldi	r30, 0x06	; 6
    3be4:	0c 94 80 21 	jmp	0x4300	; 0x4300 <__epilogue_restores__+0x18>

00003be8 <__ltsf2>:
    3be8:	a8 e1       	ldi	r26, 0x18	; 24
    3bea:	b0 e0       	ldi	r27, 0x00	; 0
    3bec:	ea ef       	ldi	r30, 0xFA	; 250
    3bee:	fd e1       	ldi	r31, 0x1D	; 29
    3bf0:	0c 94 64 21 	jmp	0x42c8	; 0x42c8 <__prologue_saves__+0x18>
    3bf4:	69 83       	std	Y+1, r22	; 0x01
    3bf6:	7a 83       	std	Y+2, r23	; 0x02
    3bf8:	8b 83       	std	Y+3, r24	; 0x03
    3bfa:	9c 83       	std	Y+4, r25	; 0x04
    3bfc:	2d 83       	std	Y+5, r18	; 0x05
    3bfe:	3e 83       	std	Y+6, r19	; 0x06
    3c00:	4f 83       	std	Y+7, r20	; 0x07
    3c02:	58 87       	std	Y+8, r21	; 0x08
    3c04:	89 e0       	ldi	r24, 0x09	; 9
    3c06:	e8 2e       	mov	r14, r24
    3c08:	f1 2c       	mov	r15, r1
    3c0a:	ec 0e       	add	r14, r28
    3c0c:	fd 1e       	adc	r15, r29
    3c0e:	ce 01       	movw	r24, r28
    3c10:	01 96       	adiw	r24, 0x01	; 1
    3c12:	b7 01       	movw	r22, r14
    3c14:	0e 94 73 20 	call	0x40e6	; 0x40e6 <__unpack_f>
    3c18:	8e 01       	movw	r16, r28
    3c1a:	0f 5e       	subi	r16, 0xEF	; 239
    3c1c:	1f 4f       	sbci	r17, 0xFF	; 255
    3c1e:	ce 01       	movw	r24, r28
    3c20:	05 96       	adiw	r24, 0x05	; 5
    3c22:	b8 01       	movw	r22, r16
    3c24:	0e 94 73 20 	call	0x40e6	; 0x40e6 <__unpack_f>
    3c28:	89 85       	ldd	r24, Y+9	; 0x09
    3c2a:	82 30       	cpi	r24, 0x02	; 2
    3c2c:	40 f0       	brcs	.+16     	; 0x3c3e <__ltsf2+0x56>
    3c2e:	89 89       	ldd	r24, Y+17	; 0x11
    3c30:	82 30       	cpi	r24, 0x02	; 2
    3c32:	28 f0       	brcs	.+10     	; 0x3c3e <__ltsf2+0x56>
    3c34:	c7 01       	movw	r24, r14
    3c36:	b8 01       	movw	r22, r16
    3c38:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <__fpcmp_parts_f>
    3c3c:	01 c0       	rjmp	.+2      	; 0x3c40 <__ltsf2+0x58>
    3c3e:	81 e0       	ldi	r24, 0x01	; 1
    3c40:	68 96       	adiw	r28, 0x18	; 24
    3c42:	e6 e0       	ldi	r30, 0x06	; 6
    3c44:	0c 94 80 21 	jmp	0x4300	; 0x4300 <__epilogue_restores__+0x18>

00003c48 <__floatsisf>:
    3c48:	a8 e0       	ldi	r26, 0x08	; 8
    3c4a:	b0 e0       	ldi	r27, 0x00	; 0
    3c4c:	ea e2       	ldi	r30, 0x2A	; 42
    3c4e:	fe e1       	ldi	r31, 0x1E	; 30
    3c50:	0c 94 61 21 	jmp	0x42c2	; 0x42c2 <__prologue_saves__+0x12>
    3c54:	9b 01       	movw	r18, r22
    3c56:	ac 01       	movw	r20, r24
    3c58:	83 e0       	ldi	r24, 0x03	; 3
    3c5a:	89 83       	std	Y+1, r24	; 0x01
    3c5c:	da 01       	movw	r26, r20
    3c5e:	c9 01       	movw	r24, r18
    3c60:	88 27       	eor	r24, r24
    3c62:	b7 fd       	sbrc	r27, 7
    3c64:	83 95       	inc	r24
    3c66:	99 27       	eor	r25, r25
    3c68:	aa 27       	eor	r26, r26
    3c6a:	bb 27       	eor	r27, r27
    3c6c:	b8 2e       	mov	r11, r24
    3c6e:	21 15       	cp	r18, r1
    3c70:	31 05       	cpc	r19, r1
    3c72:	41 05       	cpc	r20, r1
    3c74:	51 05       	cpc	r21, r1
    3c76:	19 f4       	brne	.+6      	; 0x3c7e <__floatsisf+0x36>
    3c78:	82 e0       	ldi	r24, 0x02	; 2
    3c7a:	89 83       	std	Y+1, r24	; 0x01
    3c7c:	3a c0       	rjmp	.+116    	; 0x3cf2 <__floatsisf+0xaa>
    3c7e:	88 23       	and	r24, r24
    3c80:	a9 f0       	breq	.+42     	; 0x3cac <__floatsisf+0x64>
    3c82:	20 30       	cpi	r18, 0x00	; 0
    3c84:	80 e0       	ldi	r24, 0x00	; 0
    3c86:	38 07       	cpc	r19, r24
    3c88:	80 e0       	ldi	r24, 0x00	; 0
    3c8a:	48 07       	cpc	r20, r24
    3c8c:	80 e8       	ldi	r24, 0x80	; 128
    3c8e:	58 07       	cpc	r21, r24
    3c90:	29 f4       	brne	.+10     	; 0x3c9c <__floatsisf+0x54>
    3c92:	60 e0       	ldi	r22, 0x00	; 0
    3c94:	70 e0       	ldi	r23, 0x00	; 0
    3c96:	80 e0       	ldi	r24, 0x00	; 0
    3c98:	9f ec       	ldi	r25, 0xCF	; 207
    3c9a:	30 c0       	rjmp	.+96     	; 0x3cfc <__floatsisf+0xb4>
    3c9c:	ee 24       	eor	r14, r14
    3c9e:	ff 24       	eor	r15, r15
    3ca0:	87 01       	movw	r16, r14
    3ca2:	e2 1a       	sub	r14, r18
    3ca4:	f3 0a       	sbc	r15, r19
    3ca6:	04 0b       	sbc	r16, r20
    3ca8:	15 0b       	sbc	r17, r21
    3caa:	02 c0       	rjmp	.+4      	; 0x3cb0 <__floatsisf+0x68>
    3cac:	79 01       	movw	r14, r18
    3cae:	8a 01       	movw	r16, r20
    3cb0:	8e e1       	ldi	r24, 0x1E	; 30
    3cb2:	c8 2e       	mov	r12, r24
    3cb4:	d1 2c       	mov	r13, r1
    3cb6:	dc 82       	std	Y+4, r13	; 0x04
    3cb8:	cb 82       	std	Y+3, r12	; 0x03
    3cba:	ed 82       	std	Y+5, r14	; 0x05
    3cbc:	fe 82       	std	Y+6, r15	; 0x06
    3cbe:	0f 83       	std	Y+7, r16	; 0x07
    3cc0:	18 87       	std	Y+8, r17	; 0x08
    3cc2:	c8 01       	movw	r24, r16
    3cc4:	b7 01       	movw	r22, r14
    3cc6:	0e 94 4f 1f 	call	0x3e9e	; 0x3e9e <__clzsi2>
    3cca:	01 97       	sbiw	r24, 0x01	; 1
    3ccc:	18 16       	cp	r1, r24
    3cce:	19 06       	cpc	r1, r25
    3cd0:	84 f4       	brge	.+32     	; 0x3cf2 <__floatsisf+0xaa>
    3cd2:	08 2e       	mov	r0, r24
    3cd4:	04 c0       	rjmp	.+8      	; 0x3cde <__floatsisf+0x96>
    3cd6:	ee 0c       	add	r14, r14
    3cd8:	ff 1c       	adc	r15, r15
    3cda:	00 1f       	adc	r16, r16
    3cdc:	11 1f       	adc	r17, r17
    3cde:	0a 94       	dec	r0
    3ce0:	d2 f7       	brpl	.-12     	; 0x3cd6 <__floatsisf+0x8e>
    3ce2:	ed 82       	std	Y+5, r14	; 0x05
    3ce4:	fe 82       	std	Y+6, r15	; 0x06
    3ce6:	0f 83       	std	Y+7, r16	; 0x07
    3ce8:	18 87       	std	Y+8, r17	; 0x08
    3cea:	c8 1a       	sub	r12, r24
    3cec:	d9 0a       	sbc	r13, r25
    3cee:	dc 82       	std	Y+4, r13	; 0x04
    3cf0:	cb 82       	std	Y+3, r12	; 0x03
    3cf2:	ba 82       	std	Y+2, r11	; 0x02
    3cf4:	ce 01       	movw	r24, r28
    3cf6:	01 96       	adiw	r24, 0x01	; 1
    3cf8:	0e 94 9e 1f 	call	0x3f3c	; 0x3f3c <__pack_f>
    3cfc:	28 96       	adiw	r28, 0x08	; 8
    3cfe:	e9 e0       	ldi	r30, 0x09	; 9
    3d00:	0c 94 7d 21 	jmp	0x42fa	; 0x42fa <__epilogue_restores__+0x12>

00003d04 <__fixsfsi>:
    3d04:	ac e0       	ldi	r26, 0x0C	; 12
    3d06:	b0 e0       	ldi	r27, 0x00	; 0
    3d08:	e8 e8       	ldi	r30, 0x88	; 136
    3d0a:	fe e1       	ldi	r31, 0x1E	; 30
    3d0c:	0c 94 68 21 	jmp	0x42d0	; 0x42d0 <__prologue_saves__+0x20>
    3d10:	69 83       	std	Y+1, r22	; 0x01
    3d12:	7a 83       	std	Y+2, r23	; 0x02
    3d14:	8b 83       	std	Y+3, r24	; 0x03
    3d16:	9c 83       	std	Y+4, r25	; 0x04
    3d18:	ce 01       	movw	r24, r28
    3d1a:	01 96       	adiw	r24, 0x01	; 1
    3d1c:	be 01       	movw	r22, r28
    3d1e:	6b 5f       	subi	r22, 0xFB	; 251
    3d20:	7f 4f       	sbci	r23, 0xFF	; 255
    3d22:	0e 94 73 20 	call	0x40e6	; 0x40e6 <__unpack_f>
    3d26:	8d 81       	ldd	r24, Y+5	; 0x05
    3d28:	82 30       	cpi	r24, 0x02	; 2
    3d2a:	61 f1       	breq	.+88     	; 0x3d84 <__fixsfsi+0x80>
    3d2c:	82 30       	cpi	r24, 0x02	; 2
    3d2e:	50 f1       	brcs	.+84     	; 0x3d84 <__fixsfsi+0x80>
    3d30:	84 30       	cpi	r24, 0x04	; 4
    3d32:	21 f4       	brne	.+8      	; 0x3d3c <__fixsfsi+0x38>
    3d34:	8e 81       	ldd	r24, Y+6	; 0x06
    3d36:	88 23       	and	r24, r24
    3d38:	51 f1       	breq	.+84     	; 0x3d8e <__fixsfsi+0x8a>
    3d3a:	2e c0       	rjmp	.+92     	; 0x3d98 <__fixsfsi+0x94>
    3d3c:	2f 81       	ldd	r18, Y+7	; 0x07
    3d3e:	38 85       	ldd	r19, Y+8	; 0x08
    3d40:	37 fd       	sbrc	r19, 7
    3d42:	20 c0       	rjmp	.+64     	; 0x3d84 <__fixsfsi+0x80>
    3d44:	6e 81       	ldd	r22, Y+6	; 0x06
    3d46:	2f 31       	cpi	r18, 0x1F	; 31
    3d48:	31 05       	cpc	r19, r1
    3d4a:	1c f0       	brlt	.+6      	; 0x3d52 <__fixsfsi+0x4e>
    3d4c:	66 23       	and	r22, r22
    3d4e:	f9 f0       	breq	.+62     	; 0x3d8e <__fixsfsi+0x8a>
    3d50:	23 c0       	rjmp	.+70     	; 0x3d98 <__fixsfsi+0x94>
    3d52:	8e e1       	ldi	r24, 0x1E	; 30
    3d54:	90 e0       	ldi	r25, 0x00	; 0
    3d56:	82 1b       	sub	r24, r18
    3d58:	93 0b       	sbc	r25, r19
    3d5a:	29 85       	ldd	r18, Y+9	; 0x09
    3d5c:	3a 85       	ldd	r19, Y+10	; 0x0a
    3d5e:	4b 85       	ldd	r20, Y+11	; 0x0b
    3d60:	5c 85       	ldd	r21, Y+12	; 0x0c
    3d62:	04 c0       	rjmp	.+8      	; 0x3d6c <__fixsfsi+0x68>
    3d64:	56 95       	lsr	r21
    3d66:	47 95       	ror	r20
    3d68:	37 95       	ror	r19
    3d6a:	27 95       	ror	r18
    3d6c:	8a 95       	dec	r24
    3d6e:	d2 f7       	brpl	.-12     	; 0x3d64 <__fixsfsi+0x60>
    3d70:	66 23       	and	r22, r22
    3d72:	b1 f0       	breq	.+44     	; 0x3da0 <__fixsfsi+0x9c>
    3d74:	50 95       	com	r21
    3d76:	40 95       	com	r20
    3d78:	30 95       	com	r19
    3d7a:	21 95       	neg	r18
    3d7c:	3f 4f       	sbci	r19, 0xFF	; 255
    3d7e:	4f 4f       	sbci	r20, 0xFF	; 255
    3d80:	5f 4f       	sbci	r21, 0xFF	; 255
    3d82:	0e c0       	rjmp	.+28     	; 0x3da0 <__fixsfsi+0x9c>
    3d84:	20 e0       	ldi	r18, 0x00	; 0
    3d86:	30 e0       	ldi	r19, 0x00	; 0
    3d88:	40 e0       	ldi	r20, 0x00	; 0
    3d8a:	50 e0       	ldi	r21, 0x00	; 0
    3d8c:	09 c0       	rjmp	.+18     	; 0x3da0 <__fixsfsi+0x9c>
    3d8e:	2f ef       	ldi	r18, 0xFF	; 255
    3d90:	3f ef       	ldi	r19, 0xFF	; 255
    3d92:	4f ef       	ldi	r20, 0xFF	; 255
    3d94:	5f e7       	ldi	r21, 0x7F	; 127
    3d96:	04 c0       	rjmp	.+8      	; 0x3da0 <__fixsfsi+0x9c>
    3d98:	20 e0       	ldi	r18, 0x00	; 0
    3d9a:	30 e0       	ldi	r19, 0x00	; 0
    3d9c:	40 e0       	ldi	r20, 0x00	; 0
    3d9e:	50 e8       	ldi	r21, 0x80	; 128
    3da0:	b9 01       	movw	r22, r18
    3da2:	ca 01       	movw	r24, r20
    3da4:	2c 96       	adiw	r28, 0x0c	; 12
    3da6:	e2 e0       	ldi	r30, 0x02	; 2
    3da8:	0c 94 84 21 	jmp	0x4308	; 0x4308 <__epilogue_restores__+0x20>

00003dac <__floatunsisf>:
    3dac:	a8 e0       	ldi	r26, 0x08	; 8
    3dae:	b0 e0       	ldi	r27, 0x00	; 0
    3db0:	ec ed       	ldi	r30, 0xDC	; 220
    3db2:	fe e1       	ldi	r31, 0x1E	; 30
    3db4:	0c 94 60 21 	jmp	0x42c0	; 0x42c0 <__prologue_saves__+0x10>
    3db8:	7b 01       	movw	r14, r22
    3dba:	8c 01       	movw	r16, r24
    3dbc:	61 15       	cp	r22, r1
    3dbe:	71 05       	cpc	r23, r1
    3dc0:	81 05       	cpc	r24, r1
    3dc2:	91 05       	cpc	r25, r1
    3dc4:	19 f4       	brne	.+6      	; 0x3dcc <__floatunsisf+0x20>
    3dc6:	82 e0       	ldi	r24, 0x02	; 2
    3dc8:	89 83       	std	Y+1, r24	; 0x01
    3dca:	60 c0       	rjmp	.+192    	; 0x3e8c <__floatunsisf+0xe0>
    3dcc:	83 e0       	ldi	r24, 0x03	; 3
    3dce:	89 83       	std	Y+1, r24	; 0x01
    3dd0:	8e e1       	ldi	r24, 0x1E	; 30
    3dd2:	c8 2e       	mov	r12, r24
    3dd4:	d1 2c       	mov	r13, r1
    3dd6:	dc 82       	std	Y+4, r13	; 0x04
    3dd8:	cb 82       	std	Y+3, r12	; 0x03
    3dda:	ed 82       	std	Y+5, r14	; 0x05
    3ddc:	fe 82       	std	Y+6, r15	; 0x06
    3dde:	0f 83       	std	Y+7, r16	; 0x07
    3de0:	18 87       	std	Y+8, r17	; 0x08
    3de2:	c8 01       	movw	r24, r16
    3de4:	b7 01       	movw	r22, r14
    3de6:	0e 94 4f 1f 	call	0x3e9e	; 0x3e9e <__clzsi2>
    3dea:	fc 01       	movw	r30, r24
    3dec:	31 97       	sbiw	r30, 0x01	; 1
    3dee:	f7 ff       	sbrs	r31, 7
    3df0:	3b c0       	rjmp	.+118    	; 0x3e68 <__floatunsisf+0xbc>
    3df2:	22 27       	eor	r18, r18
    3df4:	33 27       	eor	r19, r19
    3df6:	2e 1b       	sub	r18, r30
    3df8:	3f 0b       	sbc	r19, r31
    3dfa:	57 01       	movw	r10, r14
    3dfc:	68 01       	movw	r12, r16
    3dfe:	02 2e       	mov	r0, r18
    3e00:	04 c0       	rjmp	.+8      	; 0x3e0a <__floatunsisf+0x5e>
    3e02:	d6 94       	lsr	r13
    3e04:	c7 94       	ror	r12
    3e06:	b7 94       	ror	r11
    3e08:	a7 94       	ror	r10
    3e0a:	0a 94       	dec	r0
    3e0c:	d2 f7       	brpl	.-12     	; 0x3e02 <__floatunsisf+0x56>
    3e0e:	40 e0       	ldi	r20, 0x00	; 0
    3e10:	50 e0       	ldi	r21, 0x00	; 0
    3e12:	60 e0       	ldi	r22, 0x00	; 0
    3e14:	70 e0       	ldi	r23, 0x00	; 0
    3e16:	81 e0       	ldi	r24, 0x01	; 1
    3e18:	90 e0       	ldi	r25, 0x00	; 0
    3e1a:	a0 e0       	ldi	r26, 0x00	; 0
    3e1c:	b0 e0       	ldi	r27, 0x00	; 0
    3e1e:	04 c0       	rjmp	.+8      	; 0x3e28 <__floatunsisf+0x7c>
    3e20:	88 0f       	add	r24, r24
    3e22:	99 1f       	adc	r25, r25
    3e24:	aa 1f       	adc	r26, r26
    3e26:	bb 1f       	adc	r27, r27
    3e28:	2a 95       	dec	r18
    3e2a:	d2 f7       	brpl	.-12     	; 0x3e20 <__floatunsisf+0x74>
    3e2c:	01 97       	sbiw	r24, 0x01	; 1
    3e2e:	a1 09       	sbc	r26, r1
    3e30:	b1 09       	sbc	r27, r1
    3e32:	8e 21       	and	r24, r14
    3e34:	9f 21       	and	r25, r15
    3e36:	a0 23       	and	r26, r16
    3e38:	b1 23       	and	r27, r17
    3e3a:	00 97       	sbiw	r24, 0x00	; 0
    3e3c:	a1 05       	cpc	r26, r1
    3e3e:	b1 05       	cpc	r27, r1
    3e40:	21 f0       	breq	.+8      	; 0x3e4a <__floatunsisf+0x9e>
    3e42:	41 e0       	ldi	r20, 0x01	; 1
    3e44:	50 e0       	ldi	r21, 0x00	; 0
    3e46:	60 e0       	ldi	r22, 0x00	; 0
    3e48:	70 e0       	ldi	r23, 0x00	; 0
    3e4a:	4a 29       	or	r20, r10
    3e4c:	5b 29       	or	r21, r11
    3e4e:	6c 29       	or	r22, r12
    3e50:	7d 29       	or	r23, r13
    3e52:	4d 83       	std	Y+5, r20	; 0x05
    3e54:	5e 83       	std	Y+6, r21	; 0x06
    3e56:	6f 83       	std	Y+7, r22	; 0x07
    3e58:	78 87       	std	Y+8, r23	; 0x08
    3e5a:	8e e1       	ldi	r24, 0x1E	; 30
    3e5c:	90 e0       	ldi	r25, 0x00	; 0
    3e5e:	8e 1b       	sub	r24, r30
    3e60:	9f 0b       	sbc	r25, r31
    3e62:	9c 83       	std	Y+4, r25	; 0x04
    3e64:	8b 83       	std	Y+3, r24	; 0x03
    3e66:	12 c0       	rjmp	.+36     	; 0x3e8c <__floatunsisf+0xe0>
    3e68:	30 97       	sbiw	r30, 0x00	; 0
    3e6a:	81 f0       	breq	.+32     	; 0x3e8c <__floatunsisf+0xe0>
    3e6c:	0e 2e       	mov	r0, r30
    3e6e:	04 c0       	rjmp	.+8      	; 0x3e78 <__floatunsisf+0xcc>
    3e70:	ee 0c       	add	r14, r14
    3e72:	ff 1c       	adc	r15, r15
    3e74:	00 1f       	adc	r16, r16
    3e76:	11 1f       	adc	r17, r17
    3e78:	0a 94       	dec	r0
    3e7a:	d2 f7       	brpl	.-12     	; 0x3e70 <__floatunsisf+0xc4>
    3e7c:	ed 82       	std	Y+5, r14	; 0x05
    3e7e:	fe 82       	std	Y+6, r15	; 0x06
    3e80:	0f 83       	std	Y+7, r16	; 0x07
    3e82:	18 87       	std	Y+8, r17	; 0x08
    3e84:	ce 1a       	sub	r12, r30
    3e86:	df 0a       	sbc	r13, r31
    3e88:	dc 82       	std	Y+4, r13	; 0x04
    3e8a:	cb 82       	std	Y+3, r12	; 0x03
    3e8c:	1a 82       	std	Y+2, r1	; 0x02
    3e8e:	ce 01       	movw	r24, r28
    3e90:	01 96       	adiw	r24, 0x01	; 1
    3e92:	0e 94 9e 1f 	call	0x3f3c	; 0x3f3c <__pack_f>
    3e96:	28 96       	adiw	r28, 0x08	; 8
    3e98:	ea e0       	ldi	r30, 0x0A	; 10
    3e9a:	0c 94 7c 21 	jmp	0x42f8	; 0x42f8 <__epilogue_restores__+0x10>

00003e9e <__clzsi2>:
    3e9e:	ef 92       	push	r14
    3ea0:	ff 92       	push	r15
    3ea2:	0f 93       	push	r16
    3ea4:	1f 93       	push	r17
    3ea6:	7b 01       	movw	r14, r22
    3ea8:	8c 01       	movw	r16, r24
    3eaa:	80 e0       	ldi	r24, 0x00	; 0
    3eac:	e8 16       	cp	r14, r24
    3eae:	80 e0       	ldi	r24, 0x00	; 0
    3eb0:	f8 06       	cpc	r15, r24
    3eb2:	81 e0       	ldi	r24, 0x01	; 1
    3eb4:	08 07       	cpc	r16, r24
    3eb6:	80 e0       	ldi	r24, 0x00	; 0
    3eb8:	18 07       	cpc	r17, r24
    3eba:	88 f4       	brcc	.+34     	; 0x3ede <__clzsi2+0x40>
    3ebc:	8f ef       	ldi	r24, 0xFF	; 255
    3ebe:	e8 16       	cp	r14, r24
    3ec0:	f1 04       	cpc	r15, r1
    3ec2:	01 05       	cpc	r16, r1
    3ec4:	11 05       	cpc	r17, r1
    3ec6:	31 f0       	breq	.+12     	; 0x3ed4 <__clzsi2+0x36>
    3ec8:	28 f0       	brcs	.+10     	; 0x3ed4 <__clzsi2+0x36>
    3eca:	88 e0       	ldi	r24, 0x08	; 8
    3ecc:	90 e0       	ldi	r25, 0x00	; 0
    3ece:	a0 e0       	ldi	r26, 0x00	; 0
    3ed0:	b0 e0       	ldi	r27, 0x00	; 0
    3ed2:	17 c0       	rjmp	.+46     	; 0x3f02 <__clzsi2+0x64>
    3ed4:	80 e0       	ldi	r24, 0x00	; 0
    3ed6:	90 e0       	ldi	r25, 0x00	; 0
    3ed8:	a0 e0       	ldi	r26, 0x00	; 0
    3eda:	b0 e0       	ldi	r27, 0x00	; 0
    3edc:	12 c0       	rjmp	.+36     	; 0x3f02 <__clzsi2+0x64>
    3ede:	80 e0       	ldi	r24, 0x00	; 0
    3ee0:	e8 16       	cp	r14, r24
    3ee2:	80 e0       	ldi	r24, 0x00	; 0
    3ee4:	f8 06       	cpc	r15, r24
    3ee6:	80 e0       	ldi	r24, 0x00	; 0
    3ee8:	08 07       	cpc	r16, r24
    3eea:	81 e0       	ldi	r24, 0x01	; 1
    3eec:	18 07       	cpc	r17, r24
    3eee:	28 f0       	brcs	.+10     	; 0x3efa <__clzsi2+0x5c>
    3ef0:	88 e1       	ldi	r24, 0x18	; 24
    3ef2:	90 e0       	ldi	r25, 0x00	; 0
    3ef4:	a0 e0       	ldi	r26, 0x00	; 0
    3ef6:	b0 e0       	ldi	r27, 0x00	; 0
    3ef8:	04 c0       	rjmp	.+8      	; 0x3f02 <__clzsi2+0x64>
    3efa:	80 e1       	ldi	r24, 0x10	; 16
    3efc:	90 e0       	ldi	r25, 0x00	; 0
    3efe:	a0 e0       	ldi	r26, 0x00	; 0
    3f00:	b0 e0       	ldi	r27, 0x00	; 0
    3f02:	20 e2       	ldi	r18, 0x20	; 32
    3f04:	30 e0       	ldi	r19, 0x00	; 0
    3f06:	40 e0       	ldi	r20, 0x00	; 0
    3f08:	50 e0       	ldi	r21, 0x00	; 0
    3f0a:	28 1b       	sub	r18, r24
    3f0c:	39 0b       	sbc	r19, r25
    3f0e:	4a 0b       	sbc	r20, r26
    3f10:	5b 0b       	sbc	r21, r27
    3f12:	04 c0       	rjmp	.+8      	; 0x3f1c <__clzsi2+0x7e>
    3f14:	16 95       	lsr	r17
    3f16:	07 95       	ror	r16
    3f18:	f7 94       	ror	r15
    3f1a:	e7 94       	ror	r14
    3f1c:	8a 95       	dec	r24
    3f1e:	d2 f7       	brpl	.-12     	; 0x3f14 <__clzsi2+0x76>
    3f20:	f7 01       	movw	r30, r14
    3f22:	e8 5f       	subi	r30, 0xF8	; 248
    3f24:	fd 4f       	sbci	r31, 0xFD	; 253
    3f26:	80 81       	ld	r24, Z
    3f28:	28 1b       	sub	r18, r24
    3f2a:	31 09       	sbc	r19, r1
    3f2c:	41 09       	sbc	r20, r1
    3f2e:	51 09       	sbc	r21, r1
    3f30:	c9 01       	movw	r24, r18
    3f32:	1f 91       	pop	r17
    3f34:	0f 91       	pop	r16
    3f36:	ff 90       	pop	r15
    3f38:	ef 90       	pop	r14
    3f3a:	08 95       	ret

00003f3c <__pack_f>:
    3f3c:	df 92       	push	r13
    3f3e:	ef 92       	push	r14
    3f40:	ff 92       	push	r15
    3f42:	0f 93       	push	r16
    3f44:	1f 93       	push	r17
    3f46:	fc 01       	movw	r30, r24
    3f48:	e4 80       	ldd	r14, Z+4	; 0x04
    3f4a:	f5 80       	ldd	r15, Z+5	; 0x05
    3f4c:	06 81       	ldd	r16, Z+6	; 0x06
    3f4e:	17 81       	ldd	r17, Z+7	; 0x07
    3f50:	d1 80       	ldd	r13, Z+1	; 0x01
    3f52:	80 81       	ld	r24, Z
    3f54:	82 30       	cpi	r24, 0x02	; 2
    3f56:	48 f4       	brcc	.+18     	; 0x3f6a <__pack_f+0x2e>
    3f58:	80 e0       	ldi	r24, 0x00	; 0
    3f5a:	90 e0       	ldi	r25, 0x00	; 0
    3f5c:	a0 e1       	ldi	r26, 0x10	; 16
    3f5e:	b0 e0       	ldi	r27, 0x00	; 0
    3f60:	e8 2a       	or	r14, r24
    3f62:	f9 2a       	or	r15, r25
    3f64:	0a 2b       	or	r16, r26
    3f66:	1b 2b       	or	r17, r27
    3f68:	a5 c0       	rjmp	.+330    	; 0x40b4 <__pack_f+0x178>
    3f6a:	84 30       	cpi	r24, 0x04	; 4
    3f6c:	09 f4       	brne	.+2      	; 0x3f70 <__pack_f+0x34>
    3f6e:	9f c0       	rjmp	.+318    	; 0x40ae <__pack_f+0x172>
    3f70:	82 30       	cpi	r24, 0x02	; 2
    3f72:	21 f4       	brne	.+8      	; 0x3f7c <__pack_f+0x40>
    3f74:	ee 24       	eor	r14, r14
    3f76:	ff 24       	eor	r15, r15
    3f78:	87 01       	movw	r16, r14
    3f7a:	05 c0       	rjmp	.+10     	; 0x3f86 <__pack_f+0x4a>
    3f7c:	e1 14       	cp	r14, r1
    3f7e:	f1 04       	cpc	r15, r1
    3f80:	01 05       	cpc	r16, r1
    3f82:	11 05       	cpc	r17, r1
    3f84:	19 f4       	brne	.+6      	; 0x3f8c <__pack_f+0x50>
    3f86:	e0 e0       	ldi	r30, 0x00	; 0
    3f88:	f0 e0       	ldi	r31, 0x00	; 0
    3f8a:	96 c0       	rjmp	.+300    	; 0x40b8 <__pack_f+0x17c>
    3f8c:	62 81       	ldd	r22, Z+2	; 0x02
    3f8e:	73 81       	ldd	r23, Z+3	; 0x03
    3f90:	9f ef       	ldi	r25, 0xFF	; 255
    3f92:	62 38       	cpi	r22, 0x82	; 130
    3f94:	79 07       	cpc	r23, r25
    3f96:	0c f0       	brlt	.+2      	; 0x3f9a <__pack_f+0x5e>
    3f98:	5b c0       	rjmp	.+182    	; 0x4050 <__pack_f+0x114>
    3f9a:	22 e8       	ldi	r18, 0x82	; 130
    3f9c:	3f ef       	ldi	r19, 0xFF	; 255
    3f9e:	26 1b       	sub	r18, r22
    3fa0:	37 0b       	sbc	r19, r23
    3fa2:	2a 31       	cpi	r18, 0x1A	; 26
    3fa4:	31 05       	cpc	r19, r1
    3fa6:	2c f0       	brlt	.+10     	; 0x3fb2 <__pack_f+0x76>
    3fa8:	20 e0       	ldi	r18, 0x00	; 0
    3faa:	30 e0       	ldi	r19, 0x00	; 0
    3fac:	40 e0       	ldi	r20, 0x00	; 0
    3fae:	50 e0       	ldi	r21, 0x00	; 0
    3fb0:	2a c0       	rjmp	.+84     	; 0x4006 <__pack_f+0xca>
    3fb2:	b8 01       	movw	r22, r16
    3fb4:	a7 01       	movw	r20, r14
    3fb6:	02 2e       	mov	r0, r18
    3fb8:	04 c0       	rjmp	.+8      	; 0x3fc2 <__pack_f+0x86>
    3fba:	76 95       	lsr	r23
    3fbc:	67 95       	ror	r22
    3fbe:	57 95       	ror	r21
    3fc0:	47 95       	ror	r20
    3fc2:	0a 94       	dec	r0
    3fc4:	d2 f7       	brpl	.-12     	; 0x3fba <__pack_f+0x7e>
    3fc6:	81 e0       	ldi	r24, 0x01	; 1
    3fc8:	90 e0       	ldi	r25, 0x00	; 0
    3fca:	a0 e0       	ldi	r26, 0x00	; 0
    3fcc:	b0 e0       	ldi	r27, 0x00	; 0
    3fce:	04 c0       	rjmp	.+8      	; 0x3fd8 <__pack_f+0x9c>
    3fd0:	88 0f       	add	r24, r24
    3fd2:	99 1f       	adc	r25, r25
    3fd4:	aa 1f       	adc	r26, r26
    3fd6:	bb 1f       	adc	r27, r27
    3fd8:	2a 95       	dec	r18
    3fda:	d2 f7       	brpl	.-12     	; 0x3fd0 <__pack_f+0x94>
    3fdc:	01 97       	sbiw	r24, 0x01	; 1
    3fde:	a1 09       	sbc	r26, r1
    3fe0:	b1 09       	sbc	r27, r1
    3fe2:	8e 21       	and	r24, r14
    3fe4:	9f 21       	and	r25, r15
    3fe6:	a0 23       	and	r26, r16
    3fe8:	b1 23       	and	r27, r17
    3fea:	00 97       	sbiw	r24, 0x00	; 0
    3fec:	a1 05       	cpc	r26, r1
    3fee:	b1 05       	cpc	r27, r1
    3ff0:	21 f0       	breq	.+8      	; 0x3ffa <__pack_f+0xbe>
    3ff2:	81 e0       	ldi	r24, 0x01	; 1
    3ff4:	90 e0       	ldi	r25, 0x00	; 0
    3ff6:	a0 e0       	ldi	r26, 0x00	; 0
    3ff8:	b0 e0       	ldi	r27, 0x00	; 0
    3ffa:	9a 01       	movw	r18, r20
    3ffc:	ab 01       	movw	r20, r22
    3ffe:	28 2b       	or	r18, r24
    4000:	39 2b       	or	r19, r25
    4002:	4a 2b       	or	r20, r26
    4004:	5b 2b       	or	r21, r27
    4006:	da 01       	movw	r26, r20
    4008:	c9 01       	movw	r24, r18
    400a:	8f 77       	andi	r24, 0x7F	; 127
    400c:	90 70       	andi	r25, 0x00	; 0
    400e:	a0 70       	andi	r26, 0x00	; 0
    4010:	b0 70       	andi	r27, 0x00	; 0
    4012:	80 34       	cpi	r24, 0x40	; 64
    4014:	91 05       	cpc	r25, r1
    4016:	a1 05       	cpc	r26, r1
    4018:	b1 05       	cpc	r27, r1
    401a:	39 f4       	brne	.+14     	; 0x402a <__pack_f+0xee>
    401c:	27 ff       	sbrs	r18, 7
    401e:	09 c0       	rjmp	.+18     	; 0x4032 <__pack_f+0xf6>
    4020:	20 5c       	subi	r18, 0xC0	; 192
    4022:	3f 4f       	sbci	r19, 0xFF	; 255
    4024:	4f 4f       	sbci	r20, 0xFF	; 255
    4026:	5f 4f       	sbci	r21, 0xFF	; 255
    4028:	04 c0       	rjmp	.+8      	; 0x4032 <__pack_f+0xf6>
    402a:	21 5c       	subi	r18, 0xC1	; 193
    402c:	3f 4f       	sbci	r19, 0xFF	; 255
    402e:	4f 4f       	sbci	r20, 0xFF	; 255
    4030:	5f 4f       	sbci	r21, 0xFF	; 255
    4032:	e0 e0       	ldi	r30, 0x00	; 0
    4034:	f0 e0       	ldi	r31, 0x00	; 0
    4036:	20 30       	cpi	r18, 0x00	; 0
    4038:	a0 e0       	ldi	r26, 0x00	; 0
    403a:	3a 07       	cpc	r19, r26
    403c:	a0 e0       	ldi	r26, 0x00	; 0
    403e:	4a 07       	cpc	r20, r26
    4040:	a0 e4       	ldi	r26, 0x40	; 64
    4042:	5a 07       	cpc	r21, r26
    4044:	10 f0       	brcs	.+4      	; 0x404a <__pack_f+0x10e>
    4046:	e1 e0       	ldi	r30, 0x01	; 1
    4048:	f0 e0       	ldi	r31, 0x00	; 0
    404a:	79 01       	movw	r14, r18
    404c:	8a 01       	movw	r16, r20
    404e:	27 c0       	rjmp	.+78     	; 0x409e <__pack_f+0x162>
    4050:	60 38       	cpi	r22, 0x80	; 128
    4052:	71 05       	cpc	r23, r1
    4054:	64 f5       	brge	.+88     	; 0x40ae <__pack_f+0x172>
    4056:	fb 01       	movw	r30, r22
    4058:	e1 58       	subi	r30, 0x81	; 129
    405a:	ff 4f       	sbci	r31, 0xFF	; 255
    405c:	d8 01       	movw	r26, r16
    405e:	c7 01       	movw	r24, r14
    4060:	8f 77       	andi	r24, 0x7F	; 127
    4062:	90 70       	andi	r25, 0x00	; 0
    4064:	a0 70       	andi	r26, 0x00	; 0
    4066:	b0 70       	andi	r27, 0x00	; 0
    4068:	80 34       	cpi	r24, 0x40	; 64
    406a:	91 05       	cpc	r25, r1
    406c:	a1 05       	cpc	r26, r1
    406e:	b1 05       	cpc	r27, r1
    4070:	39 f4       	brne	.+14     	; 0x4080 <__pack_f+0x144>
    4072:	e7 fe       	sbrs	r14, 7
    4074:	0d c0       	rjmp	.+26     	; 0x4090 <__pack_f+0x154>
    4076:	80 e4       	ldi	r24, 0x40	; 64
    4078:	90 e0       	ldi	r25, 0x00	; 0
    407a:	a0 e0       	ldi	r26, 0x00	; 0
    407c:	b0 e0       	ldi	r27, 0x00	; 0
    407e:	04 c0       	rjmp	.+8      	; 0x4088 <__pack_f+0x14c>
    4080:	8f e3       	ldi	r24, 0x3F	; 63
    4082:	90 e0       	ldi	r25, 0x00	; 0
    4084:	a0 e0       	ldi	r26, 0x00	; 0
    4086:	b0 e0       	ldi	r27, 0x00	; 0
    4088:	e8 0e       	add	r14, r24
    408a:	f9 1e       	adc	r15, r25
    408c:	0a 1f       	adc	r16, r26
    408e:	1b 1f       	adc	r17, r27
    4090:	17 ff       	sbrs	r17, 7
    4092:	05 c0       	rjmp	.+10     	; 0x409e <__pack_f+0x162>
    4094:	16 95       	lsr	r17
    4096:	07 95       	ror	r16
    4098:	f7 94       	ror	r15
    409a:	e7 94       	ror	r14
    409c:	31 96       	adiw	r30, 0x01	; 1
    409e:	87 e0       	ldi	r24, 0x07	; 7
    40a0:	16 95       	lsr	r17
    40a2:	07 95       	ror	r16
    40a4:	f7 94       	ror	r15
    40a6:	e7 94       	ror	r14
    40a8:	8a 95       	dec	r24
    40aa:	d1 f7       	brne	.-12     	; 0x40a0 <__pack_f+0x164>
    40ac:	05 c0       	rjmp	.+10     	; 0x40b8 <__pack_f+0x17c>
    40ae:	ee 24       	eor	r14, r14
    40b0:	ff 24       	eor	r15, r15
    40b2:	87 01       	movw	r16, r14
    40b4:	ef ef       	ldi	r30, 0xFF	; 255
    40b6:	f0 e0       	ldi	r31, 0x00	; 0
    40b8:	6e 2f       	mov	r22, r30
    40ba:	67 95       	ror	r22
    40bc:	66 27       	eor	r22, r22
    40be:	67 95       	ror	r22
    40c0:	90 2f       	mov	r25, r16
    40c2:	9f 77       	andi	r25, 0x7F	; 127
    40c4:	d7 94       	ror	r13
    40c6:	dd 24       	eor	r13, r13
    40c8:	d7 94       	ror	r13
    40ca:	8e 2f       	mov	r24, r30
    40cc:	86 95       	lsr	r24
    40ce:	49 2f       	mov	r20, r25
    40d0:	46 2b       	or	r20, r22
    40d2:	58 2f       	mov	r21, r24
    40d4:	5d 29       	or	r21, r13
    40d6:	b7 01       	movw	r22, r14
    40d8:	ca 01       	movw	r24, r20
    40da:	1f 91       	pop	r17
    40dc:	0f 91       	pop	r16
    40de:	ff 90       	pop	r15
    40e0:	ef 90       	pop	r14
    40e2:	df 90       	pop	r13
    40e4:	08 95       	ret

000040e6 <__unpack_f>:
    40e6:	fc 01       	movw	r30, r24
    40e8:	db 01       	movw	r26, r22
    40ea:	40 81       	ld	r20, Z
    40ec:	51 81       	ldd	r21, Z+1	; 0x01
    40ee:	22 81       	ldd	r18, Z+2	; 0x02
    40f0:	62 2f       	mov	r22, r18
    40f2:	6f 77       	andi	r22, 0x7F	; 127
    40f4:	70 e0       	ldi	r23, 0x00	; 0
    40f6:	22 1f       	adc	r18, r18
    40f8:	22 27       	eor	r18, r18
    40fa:	22 1f       	adc	r18, r18
    40fc:	93 81       	ldd	r25, Z+3	; 0x03
    40fe:	89 2f       	mov	r24, r25
    4100:	88 0f       	add	r24, r24
    4102:	82 2b       	or	r24, r18
    4104:	28 2f       	mov	r18, r24
    4106:	30 e0       	ldi	r19, 0x00	; 0
    4108:	99 1f       	adc	r25, r25
    410a:	99 27       	eor	r25, r25
    410c:	99 1f       	adc	r25, r25
    410e:	11 96       	adiw	r26, 0x01	; 1
    4110:	9c 93       	st	X, r25
    4112:	11 97       	sbiw	r26, 0x01	; 1
    4114:	21 15       	cp	r18, r1
    4116:	31 05       	cpc	r19, r1
    4118:	a9 f5       	brne	.+106    	; 0x4184 <__unpack_f+0x9e>
    411a:	41 15       	cp	r20, r1
    411c:	51 05       	cpc	r21, r1
    411e:	61 05       	cpc	r22, r1
    4120:	71 05       	cpc	r23, r1
    4122:	11 f4       	brne	.+4      	; 0x4128 <__unpack_f+0x42>
    4124:	82 e0       	ldi	r24, 0x02	; 2
    4126:	37 c0       	rjmp	.+110    	; 0x4196 <__unpack_f+0xb0>
    4128:	82 e8       	ldi	r24, 0x82	; 130
    412a:	9f ef       	ldi	r25, 0xFF	; 255
    412c:	13 96       	adiw	r26, 0x03	; 3
    412e:	9c 93       	st	X, r25
    4130:	8e 93       	st	-X, r24
    4132:	12 97       	sbiw	r26, 0x02	; 2
    4134:	9a 01       	movw	r18, r20
    4136:	ab 01       	movw	r20, r22
    4138:	67 e0       	ldi	r22, 0x07	; 7
    413a:	22 0f       	add	r18, r18
    413c:	33 1f       	adc	r19, r19
    413e:	44 1f       	adc	r20, r20
    4140:	55 1f       	adc	r21, r21
    4142:	6a 95       	dec	r22
    4144:	d1 f7       	brne	.-12     	; 0x413a <__unpack_f+0x54>
    4146:	83 e0       	ldi	r24, 0x03	; 3
    4148:	8c 93       	st	X, r24
    414a:	0d c0       	rjmp	.+26     	; 0x4166 <__unpack_f+0x80>
    414c:	22 0f       	add	r18, r18
    414e:	33 1f       	adc	r19, r19
    4150:	44 1f       	adc	r20, r20
    4152:	55 1f       	adc	r21, r21
    4154:	12 96       	adiw	r26, 0x02	; 2
    4156:	8d 91       	ld	r24, X+
    4158:	9c 91       	ld	r25, X
    415a:	13 97       	sbiw	r26, 0x03	; 3
    415c:	01 97       	sbiw	r24, 0x01	; 1
    415e:	13 96       	adiw	r26, 0x03	; 3
    4160:	9c 93       	st	X, r25
    4162:	8e 93       	st	-X, r24
    4164:	12 97       	sbiw	r26, 0x02	; 2
    4166:	20 30       	cpi	r18, 0x00	; 0
    4168:	80 e0       	ldi	r24, 0x00	; 0
    416a:	38 07       	cpc	r19, r24
    416c:	80 e0       	ldi	r24, 0x00	; 0
    416e:	48 07       	cpc	r20, r24
    4170:	80 e4       	ldi	r24, 0x40	; 64
    4172:	58 07       	cpc	r21, r24
    4174:	58 f3       	brcs	.-42     	; 0x414c <__unpack_f+0x66>
    4176:	14 96       	adiw	r26, 0x04	; 4
    4178:	2d 93       	st	X+, r18
    417a:	3d 93       	st	X+, r19
    417c:	4d 93       	st	X+, r20
    417e:	5c 93       	st	X, r21
    4180:	17 97       	sbiw	r26, 0x07	; 7
    4182:	08 95       	ret
    4184:	2f 3f       	cpi	r18, 0xFF	; 255
    4186:	31 05       	cpc	r19, r1
    4188:	79 f4       	brne	.+30     	; 0x41a8 <__unpack_f+0xc2>
    418a:	41 15       	cp	r20, r1
    418c:	51 05       	cpc	r21, r1
    418e:	61 05       	cpc	r22, r1
    4190:	71 05       	cpc	r23, r1
    4192:	19 f4       	brne	.+6      	; 0x419a <__unpack_f+0xb4>
    4194:	84 e0       	ldi	r24, 0x04	; 4
    4196:	8c 93       	st	X, r24
    4198:	08 95       	ret
    419a:	64 ff       	sbrs	r22, 4
    419c:	03 c0       	rjmp	.+6      	; 0x41a4 <__unpack_f+0xbe>
    419e:	81 e0       	ldi	r24, 0x01	; 1
    41a0:	8c 93       	st	X, r24
    41a2:	12 c0       	rjmp	.+36     	; 0x41c8 <__unpack_f+0xe2>
    41a4:	1c 92       	st	X, r1
    41a6:	10 c0       	rjmp	.+32     	; 0x41c8 <__unpack_f+0xe2>
    41a8:	2f 57       	subi	r18, 0x7F	; 127
    41aa:	30 40       	sbci	r19, 0x00	; 0
    41ac:	13 96       	adiw	r26, 0x03	; 3
    41ae:	3c 93       	st	X, r19
    41b0:	2e 93       	st	-X, r18
    41b2:	12 97       	sbiw	r26, 0x02	; 2
    41b4:	83 e0       	ldi	r24, 0x03	; 3
    41b6:	8c 93       	st	X, r24
    41b8:	87 e0       	ldi	r24, 0x07	; 7
    41ba:	44 0f       	add	r20, r20
    41bc:	55 1f       	adc	r21, r21
    41be:	66 1f       	adc	r22, r22
    41c0:	77 1f       	adc	r23, r23
    41c2:	8a 95       	dec	r24
    41c4:	d1 f7       	brne	.-12     	; 0x41ba <__unpack_f+0xd4>
    41c6:	70 64       	ori	r23, 0x40	; 64
    41c8:	14 96       	adiw	r26, 0x04	; 4
    41ca:	4d 93       	st	X+, r20
    41cc:	5d 93       	st	X+, r21
    41ce:	6d 93       	st	X+, r22
    41d0:	7c 93       	st	X, r23
    41d2:	17 97       	sbiw	r26, 0x07	; 7
    41d4:	08 95       	ret

000041d6 <__fpcmp_parts_f>:
    41d6:	1f 93       	push	r17
    41d8:	dc 01       	movw	r26, r24
    41da:	fb 01       	movw	r30, r22
    41dc:	9c 91       	ld	r25, X
    41de:	92 30       	cpi	r25, 0x02	; 2
    41e0:	08 f4       	brcc	.+2      	; 0x41e4 <__fpcmp_parts_f+0xe>
    41e2:	47 c0       	rjmp	.+142    	; 0x4272 <__fpcmp_parts_f+0x9c>
    41e4:	80 81       	ld	r24, Z
    41e6:	82 30       	cpi	r24, 0x02	; 2
    41e8:	08 f4       	brcc	.+2      	; 0x41ec <__fpcmp_parts_f+0x16>
    41ea:	43 c0       	rjmp	.+134    	; 0x4272 <__fpcmp_parts_f+0x9c>
    41ec:	94 30       	cpi	r25, 0x04	; 4
    41ee:	51 f4       	brne	.+20     	; 0x4204 <__fpcmp_parts_f+0x2e>
    41f0:	11 96       	adiw	r26, 0x01	; 1
    41f2:	1c 91       	ld	r17, X
    41f4:	84 30       	cpi	r24, 0x04	; 4
    41f6:	99 f5       	brne	.+102    	; 0x425e <__fpcmp_parts_f+0x88>
    41f8:	81 81       	ldd	r24, Z+1	; 0x01
    41fa:	68 2f       	mov	r22, r24
    41fc:	70 e0       	ldi	r23, 0x00	; 0
    41fe:	61 1b       	sub	r22, r17
    4200:	71 09       	sbc	r23, r1
    4202:	3f c0       	rjmp	.+126    	; 0x4282 <__fpcmp_parts_f+0xac>
    4204:	84 30       	cpi	r24, 0x04	; 4
    4206:	21 f0       	breq	.+8      	; 0x4210 <__fpcmp_parts_f+0x3a>
    4208:	92 30       	cpi	r25, 0x02	; 2
    420a:	31 f4       	brne	.+12     	; 0x4218 <__fpcmp_parts_f+0x42>
    420c:	82 30       	cpi	r24, 0x02	; 2
    420e:	b9 f1       	breq	.+110    	; 0x427e <__fpcmp_parts_f+0xa8>
    4210:	81 81       	ldd	r24, Z+1	; 0x01
    4212:	88 23       	and	r24, r24
    4214:	89 f1       	breq	.+98     	; 0x4278 <__fpcmp_parts_f+0xa2>
    4216:	2d c0       	rjmp	.+90     	; 0x4272 <__fpcmp_parts_f+0x9c>
    4218:	11 96       	adiw	r26, 0x01	; 1
    421a:	1c 91       	ld	r17, X
    421c:	11 97       	sbiw	r26, 0x01	; 1
    421e:	82 30       	cpi	r24, 0x02	; 2
    4220:	f1 f0       	breq	.+60     	; 0x425e <__fpcmp_parts_f+0x88>
    4222:	81 81       	ldd	r24, Z+1	; 0x01
    4224:	18 17       	cp	r17, r24
    4226:	d9 f4       	brne	.+54     	; 0x425e <__fpcmp_parts_f+0x88>
    4228:	12 96       	adiw	r26, 0x02	; 2
    422a:	2d 91       	ld	r18, X+
    422c:	3c 91       	ld	r19, X
    422e:	13 97       	sbiw	r26, 0x03	; 3
    4230:	82 81       	ldd	r24, Z+2	; 0x02
    4232:	93 81       	ldd	r25, Z+3	; 0x03
    4234:	82 17       	cp	r24, r18
    4236:	93 07       	cpc	r25, r19
    4238:	94 f0       	brlt	.+36     	; 0x425e <__fpcmp_parts_f+0x88>
    423a:	28 17       	cp	r18, r24
    423c:	39 07       	cpc	r19, r25
    423e:	bc f0       	brlt	.+46     	; 0x426e <__fpcmp_parts_f+0x98>
    4240:	14 96       	adiw	r26, 0x04	; 4
    4242:	8d 91       	ld	r24, X+
    4244:	9d 91       	ld	r25, X+
    4246:	0d 90       	ld	r0, X+
    4248:	bc 91       	ld	r27, X
    424a:	a0 2d       	mov	r26, r0
    424c:	24 81       	ldd	r18, Z+4	; 0x04
    424e:	35 81       	ldd	r19, Z+5	; 0x05
    4250:	46 81       	ldd	r20, Z+6	; 0x06
    4252:	57 81       	ldd	r21, Z+7	; 0x07
    4254:	28 17       	cp	r18, r24
    4256:	39 07       	cpc	r19, r25
    4258:	4a 07       	cpc	r20, r26
    425a:	5b 07       	cpc	r21, r27
    425c:	18 f4       	brcc	.+6      	; 0x4264 <__fpcmp_parts_f+0x8e>
    425e:	11 23       	and	r17, r17
    4260:	41 f0       	breq	.+16     	; 0x4272 <__fpcmp_parts_f+0x9c>
    4262:	0a c0       	rjmp	.+20     	; 0x4278 <__fpcmp_parts_f+0xa2>
    4264:	82 17       	cp	r24, r18
    4266:	93 07       	cpc	r25, r19
    4268:	a4 07       	cpc	r26, r20
    426a:	b5 07       	cpc	r27, r21
    426c:	40 f4       	brcc	.+16     	; 0x427e <__fpcmp_parts_f+0xa8>
    426e:	11 23       	and	r17, r17
    4270:	19 f0       	breq	.+6      	; 0x4278 <__fpcmp_parts_f+0xa2>
    4272:	61 e0       	ldi	r22, 0x01	; 1
    4274:	70 e0       	ldi	r23, 0x00	; 0
    4276:	05 c0       	rjmp	.+10     	; 0x4282 <__fpcmp_parts_f+0xac>
    4278:	6f ef       	ldi	r22, 0xFF	; 255
    427a:	7f ef       	ldi	r23, 0xFF	; 255
    427c:	02 c0       	rjmp	.+4      	; 0x4282 <__fpcmp_parts_f+0xac>
    427e:	60 e0       	ldi	r22, 0x00	; 0
    4280:	70 e0       	ldi	r23, 0x00	; 0
    4282:	cb 01       	movw	r24, r22
    4284:	1f 91       	pop	r17
    4286:	08 95       	ret

00004288 <__udivmodhi4>:
    4288:	aa 1b       	sub	r26, r26
    428a:	bb 1b       	sub	r27, r27
    428c:	51 e1       	ldi	r21, 0x11	; 17
    428e:	07 c0       	rjmp	.+14     	; 0x429e <__udivmodhi4_ep>

00004290 <__udivmodhi4_loop>:
    4290:	aa 1f       	adc	r26, r26
    4292:	bb 1f       	adc	r27, r27
    4294:	a6 17       	cp	r26, r22
    4296:	b7 07       	cpc	r27, r23
    4298:	10 f0       	brcs	.+4      	; 0x429e <__udivmodhi4_ep>
    429a:	a6 1b       	sub	r26, r22
    429c:	b7 0b       	sbc	r27, r23

0000429e <__udivmodhi4_ep>:
    429e:	88 1f       	adc	r24, r24
    42a0:	99 1f       	adc	r25, r25
    42a2:	5a 95       	dec	r21
    42a4:	a9 f7       	brne	.-22     	; 0x4290 <__udivmodhi4_loop>
    42a6:	80 95       	com	r24
    42a8:	90 95       	com	r25
    42aa:	bc 01       	movw	r22, r24
    42ac:	cd 01       	movw	r24, r26
    42ae:	08 95       	ret

000042b0 <__prologue_saves__>:
    42b0:	2f 92       	push	r2
    42b2:	3f 92       	push	r3
    42b4:	4f 92       	push	r4
    42b6:	5f 92       	push	r5
    42b8:	6f 92       	push	r6
    42ba:	7f 92       	push	r7
    42bc:	8f 92       	push	r8
    42be:	9f 92       	push	r9
    42c0:	af 92       	push	r10
    42c2:	bf 92       	push	r11
    42c4:	cf 92       	push	r12
    42c6:	df 92       	push	r13
    42c8:	ef 92       	push	r14
    42ca:	ff 92       	push	r15
    42cc:	0f 93       	push	r16
    42ce:	1f 93       	push	r17
    42d0:	cf 93       	push	r28
    42d2:	df 93       	push	r29
    42d4:	cd b7       	in	r28, 0x3d	; 61
    42d6:	de b7       	in	r29, 0x3e	; 62
    42d8:	ca 1b       	sub	r28, r26
    42da:	db 0b       	sbc	r29, r27
    42dc:	0f b6       	in	r0, 0x3f	; 63
    42de:	f8 94       	cli
    42e0:	de bf       	out	0x3e, r29	; 62
    42e2:	0f be       	out	0x3f, r0	; 63
    42e4:	cd bf       	out	0x3d, r28	; 61
    42e6:	19 94       	eijmp

000042e8 <__epilogue_restores__>:
    42e8:	2a 88       	ldd	r2, Y+18	; 0x12
    42ea:	39 88       	ldd	r3, Y+17	; 0x11
    42ec:	48 88       	ldd	r4, Y+16	; 0x10
    42ee:	5f 84       	ldd	r5, Y+15	; 0x0f
    42f0:	6e 84       	ldd	r6, Y+14	; 0x0e
    42f2:	7d 84       	ldd	r7, Y+13	; 0x0d
    42f4:	8c 84       	ldd	r8, Y+12	; 0x0c
    42f6:	9b 84       	ldd	r9, Y+11	; 0x0b
    42f8:	aa 84       	ldd	r10, Y+10	; 0x0a
    42fa:	b9 84       	ldd	r11, Y+9	; 0x09
    42fc:	c8 84       	ldd	r12, Y+8	; 0x08
    42fe:	df 80       	ldd	r13, Y+7	; 0x07
    4300:	ee 80       	ldd	r14, Y+6	; 0x06
    4302:	fd 80       	ldd	r15, Y+5	; 0x05
    4304:	0c 81       	ldd	r16, Y+4	; 0x04
    4306:	1b 81       	ldd	r17, Y+3	; 0x03
    4308:	aa 81       	ldd	r26, Y+2	; 0x02
    430a:	b9 81       	ldd	r27, Y+1	; 0x01
    430c:	ce 0f       	add	r28, r30
    430e:	d1 1d       	adc	r29, r1
    4310:	0f b6       	in	r0, 0x3f	; 63
    4312:	f8 94       	cli
    4314:	de bf       	out	0x3e, r29	; 62
    4316:	0f be       	out	0x3f, r0	; 63
    4318:	cd bf       	out	0x3d, r28	; 61
    431a:	ed 01       	movw	r28, r26
    431c:	08 95       	ret

0000431e <pow>:
    431e:	fa 01       	movw	r30, r20
    4320:	ee 0f       	add	r30, r30
    4322:	ff 1f       	adc	r31, r31
    4324:	30 96       	adiw	r30, 0x00	; 0
    4326:	21 05       	cpc	r18, r1
    4328:	31 05       	cpc	r19, r1
    432a:	99 f1       	breq	.+102    	; 0x4392 <pow+0x74>
    432c:	61 15       	cp	r22, r1
    432e:	71 05       	cpc	r23, r1
    4330:	61 f4       	brne	.+24     	; 0x434a <pow+0x2c>
    4332:	80 38       	cpi	r24, 0x80	; 128
    4334:	bf e3       	ldi	r27, 0x3F	; 63
    4336:	9b 07       	cpc	r25, r27
    4338:	49 f1       	breq	.+82     	; 0x438c <pow+0x6e>
    433a:	68 94       	set
    433c:	90 38       	cpi	r25, 0x80	; 128
    433e:	81 05       	cpc	r24, r1
    4340:	61 f0       	breq	.+24     	; 0x435a <pow+0x3c>
    4342:	80 38       	cpi	r24, 0x80	; 128
    4344:	bf ef       	ldi	r27, 0xFF	; 255
    4346:	9b 07       	cpc	r25, r27
    4348:	41 f0       	breq	.+16     	; 0x435a <pow+0x3c>
    434a:	99 23       	and	r25, r25
    434c:	42 f5       	brpl	.+80     	; 0x439e <pow+0x80>
    434e:	ff 3f       	cpi	r31, 0xFF	; 255
    4350:	e1 05       	cpc	r30, r1
    4352:	31 05       	cpc	r19, r1
    4354:	21 05       	cpc	r18, r1
    4356:	11 f1       	breq	.+68     	; 0x439c <pow+0x7e>
    4358:	e8 94       	clt
    435a:	08 94       	sec
    435c:	e7 95       	ror	r30
    435e:	d9 01       	movw	r26, r18
    4360:	aa 23       	and	r26, r26
    4362:	29 f4       	brne	.+10     	; 0x436e <pow+0x50>
    4364:	ab 2f       	mov	r26, r27
    4366:	be 2f       	mov	r27, r30
    4368:	f8 5f       	subi	r31, 0xF8	; 248
    436a:	d0 f3       	brcs	.-12     	; 0x4360 <pow+0x42>
    436c:	10 c0       	rjmp	.+32     	; 0x438e <pow+0x70>
    436e:	ff 5f       	subi	r31, 0xFF	; 255
    4370:	70 f4       	brcc	.+28     	; 0x438e <pow+0x70>
    4372:	a6 95       	lsr	r26
    4374:	e0 f7       	brcc	.-8      	; 0x436e <pow+0x50>
    4376:	f7 39       	cpi	r31, 0x97	; 151
    4378:	50 f0       	brcs	.+20     	; 0x438e <pow+0x70>
    437a:	19 f0       	breq	.+6      	; 0x4382 <pow+0x64>
    437c:	ff 3a       	cpi	r31, 0xAF	; 175
    437e:	38 f4       	brcc	.+14     	; 0x438e <pow+0x70>
    4380:	9f 77       	andi	r25, 0x7F	; 127
    4382:	9f 93       	push	r25
    4384:	0c d0       	rcall	.+24     	; 0x439e <pow+0x80>
    4386:	0f 90       	pop	r0
    4388:	07 fc       	sbrc	r0, 7
    438a:	90 58       	subi	r25, 0x80	; 128
    438c:	08 95       	ret
    438e:	3e f0       	brts	.+14     	; 0x439e <pow+0x80>
    4390:	49 c0       	rjmp	.+146    	; 0x4424 <__fp_nan>
    4392:	60 e0       	ldi	r22, 0x00	; 0
    4394:	70 e0       	ldi	r23, 0x00	; 0
    4396:	80 e8       	ldi	r24, 0x80	; 128
    4398:	9f e3       	ldi	r25, 0x3F	; 63
    439a:	08 95       	ret
    439c:	4f e7       	ldi	r20, 0x7F	; 127
    439e:	9f 77       	andi	r25, 0x7F	; 127
    43a0:	5f 93       	push	r21
    43a2:	4f 93       	push	r20
    43a4:	3f 93       	push	r19
    43a6:	2f 93       	push	r18
    43a8:	d0 d0       	rcall	.+416    	; 0x454a <log>
    43aa:	2f 91       	pop	r18
    43ac:	3f 91       	pop	r19
    43ae:	4f 91       	pop	r20
    43b0:	5f 91       	pop	r21
    43b2:	14 da       	rcall	.-3032   	; 0x37dc <__mulsf3>
    43b4:	05 c0       	rjmp	.+10     	; 0x43c0 <exp>
    43b6:	19 f4       	brne	.+6      	; 0x43be <pow+0xa0>
    43b8:	0e f0       	brts	.+2      	; 0x43bc <pow+0x9e>
    43ba:	2e c0       	rjmp	.+92     	; 0x4418 <__fp_inf>
    43bc:	7d c0       	rjmp	.+250    	; 0x44b8 <__fp_zero>
    43be:	32 c0       	rjmp	.+100    	; 0x4424 <__fp_nan>

000043c0 <exp>:
    43c0:	61 d0       	rcall	.+194    	; 0x4484 <__fp_splitA>
    43c2:	c8 f3       	brcs	.-14     	; 0x43b6 <pow+0x98>
    43c4:	96 38       	cpi	r25, 0x86	; 134
    43c6:	c0 f7       	brcc	.-16     	; 0x43b8 <pow+0x9a>
    43c8:	07 f8       	bld	r0, 7
    43ca:	0f 92       	push	r0
    43cc:	e8 94       	clt
    43ce:	2b e3       	ldi	r18, 0x3B	; 59
    43d0:	3a ea       	ldi	r19, 0xAA	; 170
    43d2:	48 eb       	ldi	r20, 0xB8	; 184
    43d4:	5f e7       	ldi	r21, 0x7F	; 127
    43d6:	38 d1       	rcall	.+624    	; 0x4648 <__mulsf3_pse>
    43d8:	0f 92       	push	r0
    43da:	0f 92       	push	r0
    43dc:	0f 92       	push	r0
    43de:	4d b7       	in	r20, 0x3d	; 61
    43e0:	5e b7       	in	r21, 0x3e	; 62
    43e2:	0f 92       	push	r0
    43e4:	f2 d0       	rcall	.+484    	; 0x45ca <modf>
    43e6:	e4 ee       	ldi	r30, 0xE4	; 228
    43e8:	f0 e0       	ldi	r31, 0x00	; 0
    43ea:	1f d0       	rcall	.+62     	; 0x442a <__fp_powser>
    43ec:	4f 91       	pop	r20
    43ee:	5f 91       	pop	r21
    43f0:	ef 91       	pop	r30
    43f2:	ff 91       	pop	r31
    43f4:	e5 95       	asr	r30
    43f6:	ee 1f       	adc	r30, r30
    43f8:	ff 1f       	adc	r31, r31
    43fa:	49 f0       	breq	.+18     	; 0x440e <exp+0x4e>
    43fc:	fe 57       	subi	r31, 0x7E	; 126
    43fe:	e0 68       	ori	r30, 0x80	; 128
    4400:	44 27       	eor	r20, r20
    4402:	ee 0f       	add	r30, r30
    4404:	44 1f       	adc	r20, r20
    4406:	fa 95       	dec	r31
    4408:	e1 f7       	brne	.-8      	; 0x4402 <exp+0x42>
    440a:	41 95       	neg	r20
    440c:	55 0b       	sbc	r21, r21
    440e:	64 d0       	rcall	.+200    	; 0x44d8 <ldexp>
    4410:	0f 90       	pop	r0
    4412:	07 fe       	sbrs	r0, 7
    4414:	58 c0       	rjmp	.+176    	; 0x44c6 <inverse>
    4416:	08 95       	ret

00004418 <__fp_inf>:
    4418:	97 f9       	bld	r25, 7
    441a:	9f 67       	ori	r25, 0x7F	; 127
    441c:	80 e8       	ldi	r24, 0x80	; 128
    441e:	70 e0       	ldi	r23, 0x00	; 0
    4420:	60 e0       	ldi	r22, 0x00	; 0
    4422:	08 95       	ret

00004424 <__fp_nan>:
    4424:	9f ef       	ldi	r25, 0xFF	; 255
    4426:	80 ec       	ldi	r24, 0xC0	; 192
    4428:	08 95       	ret

0000442a <__fp_powser>:
    442a:	df 93       	push	r29
    442c:	cf 93       	push	r28
    442e:	1f 93       	push	r17
    4430:	0f 93       	push	r16
    4432:	ff 92       	push	r15
    4434:	ef 92       	push	r14
    4436:	df 92       	push	r13
    4438:	7b 01       	movw	r14, r22
    443a:	8c 01       	movw	r16, r24
    443c:	68 94       	set
    443e:	05 c0       	rjmp	.+10     	; 0x444a <__fp_powser+0x20>
    4440:	da 2e       	mov	r13, r26
    4442:	ef 01       	movw	r28, r30
    4444:	ff d0       	rcall	.+510    	; 0x4644 <__mulsf3x>
    4446:	fe 01       	movw	r30, r28
    4448:	e8 94       	clt
    444a:	a5 91       	lpm	r26, Z+
    444c:	25 91       	lpm	r18, Z+
    444e:	35 91       	lpm	r19, Z+
    4450:	45 91       	lpm	r20, Z+
    4452:	55 91       	lpm	r21, Z+
    4454:	ae f3       	brts	.-22     	; 0x4440 <__fp_powser+0x16>
    4456:	ef 01       	movw	r28, r30
    4458:	59 d1       	rcall	.+690    	; 0x470c <__addsf3x>
    445a:	fe 01       	movw	r30, r28
    445c:	97 01       	movw	r18, r14
    445e:	a8 01       	movw	r20, r16
    4460:	da 94       	dec	r13
    4462:	79 f7       	brne	.-34     	; 0x4442 <__fp_powser+0x18>
    4464:	df 90       	pop	r13
    4466:	ef 90       	pop	r14
    4468:	ff 90       	pop	r15
    446a:	0f 91       	pop	r16
    446c:	1f 91       	pop	r17
    446e:	cf 91       	pop	r28
    4470:	df 91       	pop	r29
    4472:	08 95       	ret

00004474 <__fp_split3>:
    4474:	57 fd       	sbrc	r21, 7
    4476:	90 58       	subi	r25, 0x80	; 128
    4478:	44 0f       	add	r20, r20
    447a:	55 1f       	adc	r21, r21
    447c:	59 f0       	breq	.+22     	; 0x4494 <__fp_splitA+0x10>
    447e:	5f 3f       	cpi	r21, 0xFF	; 255
    4480:	71 f0       	breq	.+28     	; 0x449e <__fp_splitA+0x1a>
    4482:	47 95       	ror	r20

00004484 <__fp_splitA>:
    4484:	88 0f       	add	r24, r24
    4486:	97 fb       	bst	r25, 7
    4488:	99 1f       	adc	r25, r25
    448a:	61 f0       	breq	.+24     	; 0x44a4 <__fp_splitA+0x20>
    448c:	9f 3f       	cpi	r25, 0xFF	; 255
    448e:	79 f0       	breq	.+30     	; 0x44ae <__fp_splitA+0x2a>
    4490:	87 95       	ror	r24
    4492:	08 95       	ret
    4494:	12 16       	cp	r1, r18
    4496:	13 06       	cpc	r1, r19
    4498:	14 06       	cpc	r1, r20
    449a:	55 1f       	adc	r21, r21
    449c:	f2 cf       	rjmp	.-28     	; 0x4482 <__fp_split3+0xe>
    449e:	46 95       	lsr	r20
    44a0:	f1 df       	rcall	.-30     	; 0x4484 <__fp_splitA>
    44a2:	08 c0       	rjmp	.+16     	; 0x44b4 <__fp_splitA+0x30>
    44a4:	16 16       	cp	r1, r22
    44a6:	17 06       	cpc	r1, r23
    44a8:	18 06       	cpc	r1, r24
    44aa:	99 1f       	adc	r25, r25
    44ac:	f1 cf       	rjmp	.-30     	; 0x4490 <__fp_splitA+0xc>
    44ae:	86 95       	lsr	r24
    44b0:	71 05       	cpc	r23, r1
    44b2:	61 05       	cpc	r22, r1
    44b4:	08 94       	sec
    44b6:	08 95       	ret

000044b8 <__fp_zero>:
    44b8:	e8 94       	clt

000044ba <__fp_szero>:
    44ba:	bb 27       	eor	r27, r27
    44bc:	66 27       	eor	r22, r22
    44be:	77 27       	eor	r23, r23
    44c0:	cb 01       	movw	r24, r22
    44c2:	97 f9       	bld	r25, 7
    44c4:	08 95       	ret

000044c6 <inverse>:
    44c6:	9b 01       	movw	r18, r22
    44c8:	ac 01       	movw	r20, r24
    44ca:	60 e0       	ldi	r22, 0x00	; 0
    44cc:	70 e0       	ldi	r23, 0x00	; 0
    44ce:	80 e8       	ldi	r24, 0x80	; 128
    44d0:	9f e3       	ldi	r25, 0x3F	; 63
    44d2:	7e ca       	rjmp	.-2820   	; 0x39d0 <__divsf3>
    44d4:	a1 cf       	rjmp	.-190    	; 0x4418 <__fp_inf>
    44d6:	6d c1       	rjmp	.+730    	; 0x47b2 <__fp_mpack>

000044d8 <ldexp>:
    44d8:	d5 df       	rcall	.-86     	; 0x4484 <__fp_splitA>
    44da:	e8 f3       	brcs	.-6      	; 0x44d6 <inverse+0x10>
    44dc:	99 23       	and	r25, r25
    44de:	d9 f3       	breq	.-10     	; 0x44d6 <inverse+0x10>
    44e0:	94 0f       	add	r25, r20
    44e2:	51 1d       	adc	r21, r1
    44e4:	bb f3       	brvs	.-18     	; 0x44d4 <inverse+0xe>
    44e6:	91 50       	subi	r25, 0x01	; 1
    44e8:	50 40       	sbci	r21, 0x00	; 0
    44ea:	94 f0       	brlt	.+36     	; 0x4510 <ldexp+0x38>
    44ec:	59 f0       	breq	.+22     	; 0x4504 <ldexp+0x2c>
    44ee:	88 23       	and	r24, r24
    44f0:	32 f0       	brmi	.+12     	; 0x44fe <ldexp+0x26>
    44f2:	66 0f       	add	r22, r22
    44f4:	77 1f       	adc	r23, r23
    44f6:	88 1f       	adc	r24, r24
    44f8:	91 50       	subi	r25, 0x01	; 1
    44fa:	50 40       	sbci	r21, 0x00	; 0
    44fc:	c1 f7       	brne	.-16     	; 0x44ee <ldexp+0x16>
    44fe:	9e 3f       	cpi	r25, 0xFE	; 254
    4500:	51 05       	cpc	r21, r1
    4502:	44 f7       	brge	.-48     	; 0x44d4 <inverse+0xe>
    4504:	88 0f       	add	r24, r24
    4506:	91 1d       	adc	r25, r1
    4508:	96 95       	lsr	r25
    450a:	87 95       	ror	r24
    450c:	97 f9       	bld	r25, 7
    450e:	08 95       	ret
    4510:	5f 3f       	cpi	r21, 0xFF	; 255
    4512:	ac f0       	brlt	.+42     	; 0x453e <ldexp+0x66>
    4514:	98 3e       	cpi	r25, 0xE8	; 232
    4516:	9c f0       	brlt	.+38     	; 0x453e <ldexp+0x66>
    4518:	bb 27       	eor	r27, r27
    451a:	86 95       	lsr	r24
    451c:	77 95       	ror	r23
    451e:	67 95       	ror	r22
    4520:	b7 95       	ror	r27
    4522:	08 f4       	brcc	.+2      	; 0x4526 <ldexp+0x4e>
    4524:	b1 60       	ori	r27, 0x01	; 1
    4526:	93 95       	inc	r25
    4528:	c1 f7       	brne	.-16     	; 0x451a <ldexp+0x42>
    452a:	bb 0f       	add	r27, r27
    452c:	58 f7       	brcc	.-42     	; 0x4504 <ldexp+0x2c>
    452e:	11 f4       	brne	.+4      	; 0x4534 <ldexp+0x5c>
    4530:	60 ff       	sbrs	r22, 0
    4532:	e8 cf       	rjmp	.-48     	; 0x4504 <ldexp+0x2c>
    4534:	6f 5f       	subi	r22, 0xFF	; 255
    4536:	7f 4f       	sbci	r23, 0xFF	; 255
    4538:	8f 4f       	sbci	r24, 0xFF	; 255
    453a:	9f 4f       	sbci	r25, 0xFF	; 255
    453c:	e3 cf       	rjmp	.-58     	; 0x4504 <ldexp+0x2c>
    453e:	bd cf       	rjmp	.-134    	; 0x44ba <__fp_szero>
    4540:	0e f0       	brts	.+2      	; 0x4544 <ldexp+0x6c>
    4542:	37 c1       	rjmp	.+622    	; 0x47b2 <__fp_mpack>
    4544:	6f cf       	rjmp	.-290    	; 0x4424 <__fp_nan>
    4546:	68 94       	set
    4548:	67 cf       	rjmp	.-306    	; 0x4418 <__fp_inf>

0000454a <log>:
    454a:	9c df       	rcall	.-200    	; 0x4484 <__fp_splitA>
    454c:	c8 f3       	brcs	.-14     	; 0x4540 <ldexp+0x68>
    454e:	99 23       	and	r25, r25
    4550:	d1 f3       	breq	.-12     	; 0x4546 <ldexp+0x6e>
    4552:	c6 f3       	brts	.-16     	; 0x4544 <ldexp+0x6c>
    4554:	df 93       	push	r29
    4556:	cf 93       	push	r28
    4558:	1f 93       	push	r17
    455a:	0f 93       	push	r16
    455c:	ff 92       	push	r15
    455e:	c9 2f       	mov	r28, r25
    4560:	dd 27       	eor	r29, r29
    4562:	88 23       	and	r24, r24
    4564:	2a f0       	brmi	.+10     	; 0x4570 <log+0x26>
    4566:	21 97       	sbiw	r28, 0x01	; 1
    4568:	66 0f       	add	r22, r22
    456a:	77 1f       	adc	r23, r23
    456c:	88 1f       	adc	r24, r24
    456e:	da f7       	brpl	.-10     	; 0x4566 <log+0x1c>
    4570:	20 e0       	ldi	r18, 0x00	; 0
    4572:	30 e0       	ldi	r19, 0x00	; 0
    4574:	40 e8       	ldi	r20, 0x80	; 128
    4576:	5f eb       	ldi	r21, 0xBF	; 191
    4578:	9f e3       	ldi	r25, 0x3F	; 63
    457a:	88 39       	cpi	r24, 0x98	; 152
    457c:	20 f0       	brcs	.+8      	; 0x4586 <log+0x3c>
    457e:	80 3e       	cpi	r24, 0xE0	; 224
    4580:	30 f0       	brcs	.+12     	; 0x458e <log+0x44>
    4582:	21 96       	adiw	r28, 0x01	; 1
    4584:	8f 77       	andi	r24, 0x7F	; 127
    4586:	fd d8       	rcall	.-3590   	; 0x3782 <__addsf3>
    4588:	ec e0       	ldi	r30, 0x0C	; 12
    458a:	f1 e0       	ldi	r31, 0x01	; 1
    458c:	03 c0       	rjmp	.+6      	; 0x4594 <log+0x4a>
    458e:	f9 d8       	rcall	.-3598   	; 0x3782 <__addsf3>
    4590:	e9 e3       	ldi	r30, 0x39	; 57
    4592:	f1 e0       	ldi	r31, 0x01	; 1
    4594:	4a df       	rcall	.-364    	; 0x442a <__fp_powser>
    4596:	8b 01       	movw	r16, r22
    4598:	be 01       	movw	r22, r28
    459a:	ec 01       	movw	r28, r24
    459c:	fb 2e       	mov	r15, r27
    459e:	6f 57       	subi	r22, 0x7F	; 127
    45a0:	71 09       	sbc	r23, r1
    45a2:	75 95       	asr	r23
    45a4:	77 1f       	adc	r23, r23
    45a6:	88 0b       	sbc	r24, r24
    45a8:	99 0b       	sbc	r25, r25
    45aa:	4e db       	rcall	.-2404   	; 0x3c48 <__floatsisf>
    45ac:	28 e1       	ldi	r18, 0x18	; 24
    45ae:	32 e7       	ldi	r19, 0x72	; 114
    45b0:	41 e3       	ldi	r20, 0x31	; 49
    45b2:	5f e3       	ldi	r21, 0x3F	; 63
    45b4:	47 d0       	rcall	.+142    	; 0x4644 <__mulsf3x>
    45b6:	af 2d       	mov	r26, r15
    45b8:	98 01       	movw	r18, r16
    45ba:	ae 01       	movw	r20, r28
    45bc:	ff 90       	pop	r15
    45be:	0f 91       	pop	r16
    45c0:	1f 91       	pop	r17
    45c2:	cf 91       	pop	r28
    45c4:	df 91       	pop	r29
    45c6:	a2 d0       	rcall	.+324    	; 0x470c <__addsf3x>
    45c8:	10 c1       	rjmp	.+544    	; 0x47ea <__fp_round>

000045ca <modf>:
    45ca:	fa 01       	movw	r30, r20
    45cc:	dc 01       	movw	r26, r24
    45ce:	aa 0f       	add	r26, r26
    45d0:	bb 1f       	adc	r27, r27
    45d2:	9b 01       	movw	r18, r22
    45d4:	ac 01       	movw	r20, r24
    45d6:	bf 57       	subi	r27, 0x7F	; 127
    45d8:	28 f4       	brcc	.+10     	; 0x45e4 <modf+0x1a>
    45da:	22 27       	eor	r18, r18
    45dc:	33 27       	eor	r19, r19
    45de:	44 27       	eor	r20, r20
    45e0:	50 78       	andi	r21, 0x80	; 128
    45e2:	1f c0       	rjmp	.+62     	; 0x4622 <modf+0x58>
    45e4:	b7 51       	subi	r27, 0x17	; 23
    45e6:	88 f4       	brcc	.+34     	; 0x460a <modf+0x40>
    45e8:	ab 2f       	mov	r26, r27
    45ea:	00 24       	eor	r0, r0
    45ec:	46 95       	lsr	r20
    45ee:	37 95       	ror	r19
    45f0:	27 95       	ror	r18
    45f2:	01 1c       	adc	r0, r1
    45f4:	a3 95       	inc	r26
    45f6:	d2 f3       	brmi	.-12     	; 0x45ec <modf+0x22>
    45f8:	00 20       	and	r0, r0
    45fa:	69 f0       	breq	.+26     	; 0x4616 <modf+0x4c>
    45fc:	22 0f       	add	r18, r18
    45fe:	33 1f       	adc	r19, r19
    4600:	44 1f       	adc	r20, r20
    4602:	b3 95       	inc	r27
    4604:	da f3       	brmi	.-10     	; 0x45fc <modf+0x32>
    4606:	0d d0       	rcall	.+26     	; 0x4622 <modf+0x58>
    4608:	8b c8       	rjmp	.-3818   	; 0x3720 <__subsf3>
    460a:	61 30       	cpi	r22, 0x01	; 1
    460c:	71 05       	cpc	r23, r1
    460e:	a0 e8       	ldi	r26, 0x80	; 128
    4610:	8a 07       	cpc	r24, r26
    4612:	b9 46       	sbci	r27, 0x69	; 105
    4614:	30 f4       	brcc	.+12     	; 0x4622 <modf+0x58>
    4616:	9b 01       	movw	r18, r22
    4618:	ac 01       	movw	r20, r24
    461a:	66 27       	eor	r22, r22
    461c:	77 27       	eor	r23, r23
    461e:	88 27       	eor	r24, r24
    4620:	90 78       	andi	r25, 0x80	; 128
    4622:	30 96       	adiw	r30, 0x00	; 0
    4624:	21 f0       	breq	.+8      	; 0x462e <modf+0x64>
    4626:	20 83       	st	Z, r18
    4628:	31 83       	std	Z+1, r19	; 0x01
    462a:	42 83       	std	Z+2, r20	; 0x02
    462c:	53 83       	std	Z+3, r21	; 0x03
    462e:	08 95       	ret
    4630:	ce d0       	rcall	.+412    	; 0x47ce <__fp_pscA>
    4632:	28 f0       	brcs	.+10     	; 0x463e <modf+0x74>
    4634:	d3 d0       	rcall	.+422    	; 0x47dc <__fp_pscB>
    4636:	18 f0       	brcs	.+6      	; 0x463e <modf+0x74>
    4638:	95 23       	and	r25, r21
    463a:	09 f0       	breq	.+2      	; 0x463e <modf+0x74>
    463c:	ed ce       	rjmp	.-550    	; 0x4418 <__fp_inf>
    463e:	f2 ce       	rjmp	.-540    	; 0x4424 <__fp_nan>
    4640:	11 24       	eor	r1, r1
    4642:	3b cf       	rjmp	.-394    	; 0x44ba <__fp_szero>

00004644 <__mulsf3x>:
    4644:	17 df       	rcall	.-466    	; 0x4474 <__fp_split3>
    4646:	a0 f3       	brcs	.-24     	; 0x4630 <modf+0x66>

00004648 <__mulsf3_pse>:
    4648:	95 9f       	mul	r25, r21
    464a:	d1 f3       	breq	.-12     	; 0x4640 <modf+0x76>
    464c:	95 0f       	add	r25, r21
    464e:	50 e0       	ldi	r21, 0x00	; 0
    4650:	55 1f       	adc	r21, r21
    4652:	62 9f       	mul	r22, r18
    4654:	f0 01       	movw	r30, r0
    4656:	72 9f       	mul	r23, r18
    4658:	bb 27       	eor	r27, r27
    465a:	f0 0d       	add	r31, r0
    465c:	b1 1d       	adc	r27, r1
    465e:	63 9f       	mul	r22, r19
    4660:	aa 27       	eor	r26, r26
    4662:	f0 0d       	add	r31, r0
    4664:	b1 1d       	adc	r27, r1
    4666:	aa 1f       	adc	r26, r26
    4668:	64 9f       	mul	r22, r20
    466a:	66 27       	eor	r22, r22
    466c:	b0 0d       	add	r27, r0
    466e:	a1 1d       	adc	r26, r1
    4670:	66 1f       	adc	r22, r22
    4672:	82 9f       	mul	r24, r18
    4674:	22 27       	eor	r18, r18
    4676:	b0 0d       	add	r27, r0
    4678:	a1 1d       	adc	r26, r1
    467a:	62 1f       	adc	r22, r18
    467c:	73 9f       	mul	r23, r19
    467e:	b0 0d       	add	r27, r0
    4680:	a1 1d       	adc	r26, r1
    4682:	62 1f       	adc	r22, r18
    4684:	83 9f       	mul	r24, r19
    4686:	a0 0d       	add	r26, r0
    4688:	61 1d       	adc	r22, r1
    468a:	22 1f       	adc	r18, r18
    468c:	74 9f       	mul	r23, r20
    468e:	33 27       	eor	r19, r19
    4690:	a0 0d       	add	r26, r0
    4692:	61 1d       	adc	r22, r1
    4694:	23 1f       	adc	r18, r19
    4696:	84 9f       	mul	r24, r20
    4698:	60 0d       	add	r22, r0
    469a:	21 1d       	adc	r18, r1
    469c:	82 2f       	mov	r24, r18
    469e:	76 2f       	mov	r23, r22
    46a0:	6a 2f       	mov	r22, r26
    46a2:	11 24       	eor	r1, r1
    46a4:	9f 57       	subi	r25, 0x7F	; 127
    46a6:	50 40       	sbci	r21, 0x00	; 0
    46a8:	8a f0       	brmi	.+34     	; 0x46cc <__mulsf3_pse+0x84>
    46aa:	e1 f0       	breq	.+56     	; 0x46e4 <__mulsf3_pse+0x9c>
    46ac:	88 23       	and	r24, r24
    46ae:	4a f0       	brmi	.+18     	; 0x46c2 <__mulsf3_pse+0x7a>
    46b0:	ee 0f       	add	r30, r30
    46b2:	ff 1f       	adc	r31, r31
    46b4:	bb 1f       	adc	r27, r27
    46b6:	66 1f       	adc	r22, r22
    46b8:	77 1f       	adc	r23, r23
    46ba:	88 1f       	adc	r24, r24
    46bc:	91 50       	subi	r25, 0x01	; 1
    46be:	50 40       	sbci	r21, 0x00	; 0
    46c0:	a9 f7       	brne	.-22     	; 0x46ac <__mulsf3_pse+0x64>
    46c2:	9e 3f       	cpi	r25, 0xFE	; 254
    46c4:	51 05       	cpc	r21, r1
    46c6:	70 f0       	brcs	.+28     	; 0x46e4 <__mulsf3_pse+0x9c>
    46c8:	a7 ce       	rjmp	.-690    	; 0x4418 <__fp_inf>
    46ca:	f7 ce       	rjmp	.-530    	; 0x44ba <__fp_szero>
    46cc:	5f 3f       	cpi	r21, 0xFF	; 255
    46ce:	ec f3       	brlt	.-6      	; 0x46ca <__mulsf3_pse+0x82>
    46d0:	98 3e       	cpi	r25, 0xE8	; 232
    46d2:	dc f3       	brlt	.-10     	; 0x46ca <__mulsf3_pse+0x82>
    46d4:	86 95       	lsr	r24
    46d6:	77 95       	ror	r23
    46d8:	67 95       	ror	r22
    46da:	b7 95       	ror	r27
    46dc:	f7 95       	ror	r31
    46de:	e7 95       	ror	r30
    46e0:	9f 5f       	subi	r25, 0xFF	; 255
    46e2:	c1 f7       	brne	.-16     	; 0x46d4 <__mulsf3_pse+0x8c>
    46e4:	fe 2b       	or	r31, r30
    46e6:	88 0f       	add	r24, r24
    46e8:	91 1d       	adc	r25, r1
    46ea:	96 95       	lsr	r25
    46ec:	87 95       	ror	r24
    46ee:	97 f9       	bld	r25, 7
    46f0:	08 95       	ret
    46f2:	6d d0       	rcall	.+218    	; 0x47ce <__fp_pscA>
    46f4:	30 f0       	brcs	.+12     	; 0x4702 <__mulsf3_pse+0xba>
    46f6:	72 d0       	rcall	.+228    	; 0x47dc <__fp_pscB>
    46f8:	20 f0       	brcs	.+8      	; 0x4702 <__mulsf3_pse+0xba>
    46fa:	31 f4       	brne	.+12     	; 0x4708 <__mulsf3_pse+0xc0>
    46fc:	9f 3f       	cpi	r25, 0xFF	; 255
    46fe:	11 f4       	brne	.+4      	; 0x4704 <__mulsf3_pse+0xbc>
    4700:	1e f4       	brtc	.+6      	; 0x4708 <__mulsf3_pse+0xc0>
    4702:	90 ce       	rjmp	.-736    	; 0x4424 <__fp_nan>
    4704:	0e f4       	brtc	.+2      	; 0x4708 <__mulsf3_pse+0xc0>
    4706:	e0 95       	com	r30
    4708:	e7 fb       	bst	r30, 7
    470a:	86 ce       	rjmp	.-756    	; 0x4418 <__fp_inf>

0000470c <__addsf3x>:
    470c:	e9 2f       	mov	r30, r25
    470e:	b2 de       	rcall	.-668    	; 0x4474 <__fp_split3>
    4710:	80 f3       	brcs	.-32     	; 0x46f2 <__mulsf3_pse+0xaa>
    4712:	ba 17       	cp	r27, r26
    4714:	62 07       	cpc	r22, r18
    4716:	73 07       	cpc	r23, r19
    4718:	84 07       	cpc	r24, r20
    471a:	95 07       	cpc	r25, r21
    471c:	18 f0       	brcs	.+6      	; 0x4724 <__addsf3x+0x18>
    471e:	71 f4       	brne	.+28     	; 0x473c <__addsf3x+0x30>
    4720:	9e f5       	brtc	.+102    	; 0x4788 <__addsf3x+0x7c>
    4722:	ca ce       	rjmp	.-620    	; 0x44b8 <__fp_zero>
    4724:	0e f4       	brtc	.+2      	; 0x4728 <__addsf3x+0x1c>
    4726:	e0 95       	com	r30
    4728:	0b 2e       	mov	r0, r27
    472a:	ba 2f       	mov	r27, r26
    472c:	a0 2d       	mov	r26, r0
    472e:	0b 01       	movw	r0, r22
    4730:	b9 01       	movw	r22, r18
    4732:	90 01       	movw	r18, r0
    4734:	0c 01       	movw	r0, r24
    4736:	ca 01       	movw	r24, r20
    4738:	a0 01       	movw	r20, r0
    473a:	11 24       	eor	r1, r1
    473c:	ff 27       	eor	r31, r31
    473e:	59 1b       	sub	r21, r25
    4740:	99 f0       	breq	.+38     	; 0x4768 <__addsf3x+0x5c>
    4742:	59 3f       	cpi	r21, 0xF9	; 249
    4744:	50 f4       	brcc	.+20     	; 0x475a <__addsf3x+0x4e>
    4746:	50 3e       	cpi	r21, 0xE0	; 224
    4748:	68 f1       	brcs	.+90     	; 0x47a4 <__addsf3x+0x98>
    474a:	1a 16       	cp	r1, r26
    474c:	f0 40       	sbci	r31, 0x00	; 0
    474e:	a2 2f       	mov	r26, r18
    4750:	23 2f       	mov	r18, r19
    4752:	34 2f       	mov	r19, r20
    4754:	44 27       	eor	r20, r20
    4756:	58 5f       	subi	r21, 0xF8	; 248
    4758:	f3 cf       	rjmp	.-26     	; 0x4740 <__addsf3x+0x34>
    475a:	46 95       	lsr	r20
    475c:	37 95       	ror	r19
    475e:	27 95       	ror	r18
    4760:	a7 95       	ror	r26
    4762:	f0 40       	sbci	r31, 0x00	; 0
    4764:	53 95       	inc	r21
    4766:	c9 f7       	brne	.-14     	; 0x475a <__addsf3x+0x4e>
    4768:	7e f4       	brtc	.+30     	; 0x4788 <__addsf3x+0x7c>
    476a:	1f 16       	cp	r1, r31
    476c:	ba 0b       	sbc	r27, r26
    476e:	62 0b       	sbc	r22, r18
    4770:	73 0b       	sbc	r23, r19
    4772:	84 0b       	sbc	r24, r20
    4774:	ba f0       	brmi	.+46     	; 0x47a4 <__addsf3x+0x98>
    4776:	91 50       	subi	r25, 0x01	; 1
    4778:	a1 f0       	breq	.+40     	; 0x47a2 <__addsf3x+0x96>
    477a:	ff 0f       	add	r31, r31
    477c:	bb 1f       	adc	r27, r27
    477e:	66 1f       	adc	r22, r22
    4780:	77 1f       	adc	r23, r23
    4782:	88 1f       	adc	r24, r24
    4784:	c2 f7       	brpl	.-16     	; 0x4776 <__addsf3x+0x6a>
    4786:	0e c0       	rjmp	.+28     	; 0x47a4 <__addsf3x+0x98>
    4788:	ba 0f       	add	r27, r26
    478a:	62 1f       	adc	r22, r18
    478c:	73 1f       	adc	r23, r19
    478e:	84 1f       	adc	r24, r20
    4790:	48 f4       	brcc	.+18     	; 0x47a4 <__addsf3x+0x98>
    4792:	87 95       	ror	r24
    4794:	77 95       	ror	r23
    4796:	67 95       	ror	r22
    4798:	b7 95       	ror	r27
    479a:	f7 95       	ror	r31
    479c:	9e 3f       	cpi	r25, 0xFE	; 254
    479e:	08 f0       	brcs	.+2      	; 0x47a2 <__addsf3x+0x96>
    47a0:	b3 cf       	rjmp	.-154    	; 0x4708 <__mulsf3_pse+0xc0>
    47a2:	93 95       	inc	r25
    47a4:	88 0f       	add	r24, r24
    47a6:	08 f0       	brcs	.+2      	; 0x47aa <__addsf3x+0x9e>
    47a8:	99 27       	eor	r25, r25
    47aa:	ee 0f       	add	r30, r30
    47ac:	97 95       	ror	r25
    47ae:	87 95       	ror	r24
    47b0:	08 95       	ret

000047b2 <__fp_mpack>:
    47b2:	9f 3f       	cpi	r25, 0xFF	; 255
    47b4:	31 f0       	breq	.+12     	; 0x47c2 <__fp_mpack_finite+0xc>

000047b6 <__fp_mpack_finite>:
    47b6:	91 50       	subi	r25, 0x01	; 1
    47b8:	20 f4       	brcc	.+8      	; 0x47c2 <__fp_mpack_finite+0xc>
    47ba:	87 95       	ror	r24
    47bc:	77 95       	ror	r23
    47be:	67 95       	ror	r22
    47c0:	b7 95       	ror	r27
    47c2:	88 0f       	add	r24, r24
    47c4:	91 1d       	adc	r25, r1
    47c6:	96 95       	lsr	r25
    47c8:	87 95       	ror	r24
    47ca:	97 f9       	bld	r25, 7
    47cc:	08 95       	ret

000047ce <__fp_pscA>:
    47ce:	00 24       	eor	r0, r0
    47d0:	0a 94       	dec	r0
    47d2:	16 16       	cp	r1, r22
    47d4:	17 06       	cpc	r1, r23
    47d6:	18 06       	cpc	r1, r24
    47d8:	09 06       	cpc	r0, r25
    47da:	08 95       	ret

000047dc <__fp_pscB>:
    47dc:	00 24       	eor	r0, r0
    47de:	0a 94       	dec	r0
    47e0:	12 16       	cp	r1, r18
    47e2:	13 06       	cpc	r1, r19
    47e4:	14 06       	cpc	r1, r20
    47e6:	05 06       	cpc	r0, r21
    47e8:	08 95       	ret

000047ea <__fp_round>:
    47ea:	09 2e       	mov	r0, r25
    47ec:	03 94       	inc	r0
    47ee:	00 0c       	add	r0, r0
    47f0:	11 f4       	brne	.+4      	; 0x47f6 <__fp_round+0xc>
    47f2:	88 23       	and	r24, r24
    47f4:	52 f0       	brmi	.+20     	; 0x480a <__fp_round+0x20>
    47f6:	bb 0f       	add	r27, r27
    47f8:	40 f4       	brcc	.+16     	; 0x480a <__fp_round+0x20>
    47fa:	bf 2b       	or	r27, r31
    47fc:	11 f4       	brne	.+4      	; 0x4802 <__fp_round+0x18>
    47fe:	60 ff       	sbrs	r22, 0
    4800:	04 c0       	rjmp	.+8      	; 0x480a <__fp_round+0x20>
    4802:	6f 5f       	subi	r22, 0xFF	; 255
    4804:	7f 4f       	sbci	r23, 0xFF	; 255
    4806:	8f 4f       	sbci	r24, 0xFF	; 255
    4808:	9f 4f       	sbci	r25, 0xFF	; 255
    480a:	08 95       	ret

0000480c <_exit>:
    480c:	f8 94       	cli

0000480e <__stop_program>:
    480e:	ff cf       	rjmp	.-2      	; 0x480e <__stop_program>
