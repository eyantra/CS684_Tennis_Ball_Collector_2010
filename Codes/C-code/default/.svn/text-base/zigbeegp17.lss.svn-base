
zigbeegp17.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000108  00800200  00003ddc  00003e70  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003ddc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000021  00800308  00800308  00003f78  2**0
                  ALLOC
  3 .debug_aranges 000001e0  00000000  00000000  00003f78  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000599  00000000  00000000  00004158  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000033ee  00000000  00000000  000046f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000016d3  00000000  00000000  00007adf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002774  00000000  00000000  000091b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000480  00000000  00000000  0000b928  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000693  00000000  00000000  0000bda8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a1a  00000000  00000000  0000c43b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  0000ce55  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b3 00 	jmp	0x166	; 0x166 <__ctors_end>
       4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
       8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
       c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      10:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      14:	0c 94 14 0c 	jmp	0x1828	; 0x1828 <__vector_5>
      18:	0c 94 31 0c 	jmp	0x1862	; 0x1862 <__vector_6>
      1c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      20:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      24:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      28:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      2c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      30:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      34:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      38:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      3c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      40:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      44:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      48:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      4c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      50:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      54:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      58:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      5c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      60:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      64:	0c 94 d3 0a 	jmp	0x15a6	; 0x15a6 <__vector_25>
      68:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      6c:	0c 94 f4 0a 	jmp	0x15e8	; 0x15e8 <__vector_27>
      70:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      74:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      78:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      7c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      80:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      84:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      88:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      8c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      90:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      94:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      98:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      9c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      ac:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      bc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      cc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      dc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      e0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      e4:	07 63       	ori	r16, 0x37	; 55
      e6:	42 36       	cpi	r20, 0x62	; 98
      e8:	b7 9b       	sbis	0x16, 7	; 22
      ea:	d8 a7       	std	Y+40, r29	; 0x28
      ec:	1a 39       	cpi	r17, 0x9A	; 154
      ee:	68 56       	subi	r22, 0x68	; 104
      f0:	18 ae       	std	Y+56, r1	; 0x38
      f2:	ba ab       	std	Y+50, r27	; 0x32
      f4:	55 8c       	ldd	r5, Z+29	; 0x1d
      f6:	1d 3c       	cpi	r17, 0xCD	; 205
      f8:	b7 cc       	rjmp	.-1682   	; 0xfffffa68 <__eeprom_end+0xff7efa68>
      fa:	57 63       	ori	r21, 0x37	; 55
      fc:	bd 6d       	ori	r27, 0xDD	; 221
      fe:	ed fd       	.word	0xfded	; ????
     100:	75 3e       	cpi	r23, 0xE5	; 229
     102:	f6 17       	cp	r31, r22
     104:	72 31       	cpi	r23, 0x12	; 18
     106:	bf 00       	.word	0x00bf	; ????
     108:	00 00       	nop
     10a:	80 3f       	cpi	r24, 0xF0	; 240
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 00       	nop
     110:	be 92       	st	-X, r11
     112:	24 49       	sbci	r18, 0x94	; 148
     114:	12 3e       	cpi	r17, 0xE2	; 226
     116:	ab aa       	std	Y+51, r10	; 0x33
     118:	aa 2a       	or	r10, r26
     11a:	be cd       	rjmp	.-1156   	; 0xfffffc98 <__eeprom_end+0xff7efc98>
     11c:	cc cc       	rjmp	.-1640   	; 0xfffffab6 <__eeprom_end+0xff7efab6>
     11e:	4c 3e       	cpi	r20, 0xEC	; 236
     120:	00 00       	nop
     122:	00 80       	ld	r0, Z
     124:	be ab       	std	Y+54, r27	; 0x36
     126:	aa aa       	std	Y+50, r10	; 0x32
     128:	aa 3e       	cpi	r26, 0xEA	; 234
     12a:	00 00       	nop
     12c:	00 00       	nop
     12e:	bf 00       	.word	0x00bf	; ????
     130:	00 00       	nop
     132:	80 3f       	cpi	r24, 0xF0	; 240
     134:	00 00       	nop
     136:	00 00       	nop
     138:	00 08       	sbc	r0, r0
     13a:	41 78       	andi	r20, 0x81	; 129
     13c:	d3 bb       	out	0x13, r29	; 19
     13e:	43 87       	std	Z+11, r20	; 0x0b
     140:	d1 13       	cpse	r29, r17
     142:	3d 19       	sub	r19, r13
     144:	0e 3c       	cpi	r16, 0xCE	; 206
     146:	c3 bd       	out	0x23, r28	; 35
     148:	42 82       	std	Z+2, r4	; 0x02
     14a:	ad 2b       	or	r26, r29
     14c:	3e 68       	ori	r19, 0x8E	; 142
     14e:	ec 82       	std	Y+4, r14	; 0x04
     150:	76 be       	out	0x36, r7	; 54
     152:	d9 8f       	std	Y+25, r29	; 0x19
     154:	e1 a9       	ldd	r30, Z+49	; 0x31
     156:	3e 4c       	sbci	r19, 0xCE	; 206
     158:	80 ef       	ldi	r24, 0xF0	; 240
     15a:	ff be       	out	0x3f, r15	; 63
     15c:	01 c4       	rjmp	.+2050   	; 0x960 <lcd_set_4bit+0x7b4>
     15e:	ff 7f       	andi	r31, 0xFF	; 255
     160:	3f 00       	.word	0x003f	; ????
     162:	00 00       	nop
	...

00000166 <__ctors_end>:
     166:	11 24       	eor	r1, r1
     168:	1f be       	out	0x3f, r1	; 63
     16a:	cf ef       	ldi	r28, 0xFF	; 255
     16c:	d1 e2       	ldi	r29, 0x21	; 33
     16e:	de bf       	out	0x3e, r29	; 62
     170:	cd bf       	out	0x3d, r28	; 61
     172:	00 e0       	ldi	r16, 0x00	; 0
     174:	0c bf       	out	0x3c, r16	; 60

00000176 <__do_copy_data>:
     176:	13 e0       	ldi	r17, 0x03	; 3
     178:	a0 e0       	ldi	r26, 0x00	; 0
     17a:	b2 e0       	ldi	r27, 0x02	; 2
     17c:	ec ed       	ldi	r30, 0xDC	; 220
     17e:	fd e3       	ldi	r31, 0x3D	; 61
     180:	00 e0       	ldi	r16, 0x00	; 0
     182:	0b bf       	out	0x3b, r16	; 59
     184:	02 c0       	rjmp	.+4      	; 0x18a <__do_copy_data+0x14>
     186:	07 90       	elpm	r0, Z+
     188:	0d 92       	st	X+, r0
     18a:	a8 30       	cpi	r26, 0x08	; 8
     18c:	b1 07       	cpc	r27, r17
     18e:	d9 f7       	brne	.-10     	; 0x186 <__do_copy_data+0x10>

00000190 <__do_clear_bss>:
     190:	13 e0       	ldi	r17, 0x03	; 3
     192:	a8 e0       	ldi	r26, 0x08	; 8
     194:	b3 e0       	ldi	r27, 0x03	; 3
     196:	01 c0       	rjmp	.+2      	; 0x19a <.do_clear_bss_start>

00000198 <.do_clear_bss_loop>:
     198:	1d 92       	st	X+, r1

0000019a <.do_clear_bss_start>:
     19a:	a9 32       	cpi	r26, 0x29	; 41
     19c:	b1 07       	cpc	r27, r17
     19e:	e1 f7       	brne	.-8      	; 0x198 <.do_clear_bss_loop>
     1a0:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <main>
     1a4:	0c 94 ec 1e 	jmp	0x3dd8	; 0x3dd8 <_exit>

000001a8 <__bad_interrupt>:
     1a8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ac <lcd_set_4bit>:
int i;


/*****Function to Reset LCD*****/
void lcd_set_4bit()
{
     1ac:	0f 93       	push	r16
     1ae:	1f 93       	push	r17
     1b0:	df 93       	push	r29
     1b2:	cf 93       	push	r28
     1b4:	cd b7       	in	r28, 0x3d	; 61
     1b6:	de b7       	in	r29, 0x3e	; 62
     1b8:	c0 57       	subi	r28, 0x70	; 112
     1ba:	d0 40       	sbci	r29, 0x00	; 0
     1bc:	0f b6       	in	r0, 0x3f	; 63
     1be:	f8 94       	cli
     1c0:	de bf       	out	0x3e, r29	; 62
     1c2:	0f be       	out	0x3f, r0	; 63
     1c4:	cd bf       	out	0x3d, r28	; 61
     1c6:	fe 01       	movw	r30, r28
     1c8:	e3 59       	subi	r30, 0x93	; 147
     1ca:	ff 4f       	sbci	r31, 0xFF	; 255
     1cc:	80 e0       	ldi	r24, 0x00	; 0
     1ce:	90 e0       	ldi	r25, 0x00	; 0
     1d0:	a0 e8       	ldi	r26, 0x80	; 128
     1d2:	bf e3       	ldi	r27, 0x3F	; 63
     1d4:	80 83       	st	Z, r24
     1d6:	91 83       	std	Z+1, r25	; 0x01
     1d8:	a2 83       	std	Z+2, r26	; 0x02
     1da:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     1dc:	8e 01       	movw	r16, r28
     1de:	07 59       	subi	r16, 0x97	; 151
     1e0:	1f 4f       	sbci	r17, 0xFF	; 255
     1e2:	fe 01       	movw	r30, r28
     1e4:	e3 59       	subi	r30, 0x93	; 147
     1e6:	ff 4f       	sbci	r31, 0xFF	; 255
     1e8:	60 81       	ld	r22, Z
     1ea:	71 81       	ldd	r23, Z+1	; 0x01
     1ec:	82 81       	ldd	r24, Z+2	; 0x02
     1ee:	93 81       	ldd	r25, Z+3	; 0x03
     1f0:	2d ec       	ldi	r18, 0xCD	; 205
     1f2:	3c ec       	ldi	r19, 0xCC	; 204
     1f4:	4c e2       	ldi	r20, 0x2C	; 44
     1f6:	55 e4       	ldi	r21, 0x45	; 69
     1f8:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <__mulsf3>
     1fc:	dc 01       	movw	r26, r24
     1fe:	cb 01       	movw	r24, r22
     200:	f8 01       	movw	r30, r16
     202:	80 83       	st	Z, r24
     204:	91 83       	std	Z+1, r25	; 0x01
     206:	a2 83       	std	Z+2, r26	; 0x02
     208:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     20a:	fe 01       	movw	r30, r28
     20c:	e7 59       	subi	r30, 0x97	; 151
     20e:	ff 4f       	sbci	r31, 0xFF	; 255
     210:	60 81       	ld	r22, Z
     212:	71 81       	ldd	r23, Z+1	; 0x01
     214:	82 81       	ldd	r24, Z+2	; 0x02
     216:	93 81       	ldd	r25, Z+3	; 0x03
     218:	20 e0       	ldi	r18, 0x00	; 0
     21a:	30 e0       	ldi	r19, 0x00	; 0
     21c:	40 e8       	ldi	r20, 0x80	; 128
     21e:	5f e3       	ldi	r21, 0x3F	; 63
     220:	0e 94 da 18 	call	0x31b4	; 0x31b4 <__ltsf2>
     224:	88 23       	and	r24, r24
     226:	44 f4       	brge	.+16     	; 0x238 <lcd_set_4bit+0x8c>
		__ticks = 1;
     228:	fe 01       	movw	r30, r28
     22a:	e9 59       	subi	r30, 0x99	; 153
     22c:	ff 4f       	sbci	r31, 0xFF	; 255
     22e:	81 e0       	ldi	r24, 0x01	; 1
     230:	90 e0       	ldi	r25, 0x00	; 0
     232:	91 83       	std	Z+1, r25	; 0x01
     234:	80 83       	st	Z, r24
     236:	64 c0       	rjmp	.+200    	; 0x300 <lcd_set_4bit+0x154>
	else if (__tmp > 65535)
     238:	fe 01       	movw	r30, r28
     23a:	e7 59       	subi	r30, 0x97	; 151
     23c:	ff 4f       	sbci	r31, 0xFF	; 255
     23e:	60 81       	ld	r22, Z
     240:	71 81       	ldd	r23, Z+1	; 0x01
     242:	82 81       	ldd	r24, Z+2	; 0x02
     244:	93 81       	ldd	r25, Z+3	; 0x03
     246:	20 e0       	ldi	r18, 0x00	; 0
     248:	3f ef       	ldi	r19, 0xFF	; 255
     24a:	4f e7       	ldi	r20, 0x7F	; 127
     24c:	57 e4       	ldi	r21, 0x47	; 71
     24e:	0e 94 7a 18 	call	0x30f4	; 0x30f4 <__gtsf2>
     252:	18 16       	cp	r1, r24
     254:	0c f0       	brlt	.+2      	; 0x258 <lcd_set_4bit+0xac>
     256:	43 c0       	rjmp	.+134    	; 0x2de <lcd_set_4bit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     258:	fe 01       	movw	r30, r28
     25a:	e3 59       	subi	r30, 0x93	; 147
     25c:	ff 4f       	sbci	r31, 0xFF	; 255
     25e:	60 81       	ld	r22, Z
     260:	71 81       	ldd	r23, Z+1	; 0x01
     262:	82 81       	ldd	r24, Z+2	; 0x02
     264:	93 81       	ldd	r25, Z+3	; 0x03
     266:	20 e0       	ldi	r18, 0x00	; 0
     268:	30 e0       	ldi	r19, 0x00	; 0
     26a:	40 e2       	ldi	r20, 0x20	; 32
     26c:	51 e4       	ldi	r21, 0x41	; 65
     26e:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <__mulsf3>
     272:	dc 01       	movw	r26, r24
     274:	cb 01       	movw	r24, r22
     276:	8e 01       	movw	r16, r28
     278:	09 59       	subi	r16, 0x99	; 153
     27a:	1f 4f       	sbci	r17, 0xFF	; 255
     27c:	bc 01       	movw	r22, r24
     27e:	cd 01       	movw	r24, r26
     280:	0e 94 fe 14 	call	0x29fc	; 0x29fc <__fixunssfsi>
     284:	dc 01       	movw	r26, r24
     286:	cb 01       	movw	r24, r22
     288:	f8 01       	movw	r30, r16
     28a:	91 83       	std	Z+1, r25	; 0x01
     28c:	80 83       	st	Z, r24
     28e:	1f c0       	rjmp	.+62     	; 0x2ce <lcd_set_4bit+0x122>
     290:	fe 01       	movw	r30, r28
     292:	eb 59       	subi	r30, 0x9B	; 155
     294:	ff 4f       	sbci	r31, 0xFF	; 255
     296:	84 e1       	ldi	r24, 0x14	; 20
     298:	91 e0       	ldi	r25, 0x01	; 1
     29a:	91 83       	std	Z+1, r25	; 0x01
     29c:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     29e:	fe 01       	movw	r30, r28
     2a0:	eb 59       	subi	r30, 0x9B	; 155
     2a2:	ff 4f       	sbci	r31, 0xFF	; 255
     2a4:	80 81       	ld	r24, Z
     2a6:	91 81       	ldd	r25, Z+1	; 0x01
     2a8:	01 97       	sbiw	r24, 0x01	; 1
     2aa:	f1 f7       	brne	.-4      	; 0x2a8 <lcd_set_4bit+0xfc>
     2ac:	fe 01       	movw	r30, r28
     2ae:	eb 59       	subi	r30, 0x9B	; 155
     2b0:	ff 4f       	sbci	r31, 0xFF	; 255
     2b2:	91 83       	std	Z+1, r25	; 0x01
     2b4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     2b6:	de 01       	movw	r26, r28
     2b8:	a9 59       	subi	r26, 0x99	; 153
     2ba:	bf 4f       	sbci	r27, 0xFF	; 255
     2bc:	fe 01       	movw	r30, r28
     2be:	e9 59       	subi	r30, 0x99	; 153
     2c0:	ff 4f       	sbci	r31, 0xFF	; 255
     2c2:	80 81       	ld	r24, Z
     2c4:	91 81       	ldd	r25, Z+1	; 0x01
     2c6:	01 97       	sbiw	r24, 0x01	; 1
     2c8:	11 96       	adiw	r26, 0x01	; 1
     2ca:	9c 93       	st	X, r25
     2cc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     2ce:	fe 01       	movw	r30, r28
     2d0:	e9 59       	subi	r30, 0x99	; 153
     2d2:	ff 4f       	sbci	r31, 0xFF	; 255
     2d4:	80 81       	ld	r24, Z
     2d6:	91 81       	ldd	r25, Z+1	; 0x01
     2d8:	00 97       	sbiw	r24, 0x00	; 0
     2da:	d1 f6       	brne	.-76     	; 0x290 <lcd_set_4bit+0xe4>
     2dc:	27 c0       	rjmp	.+78     	; 0x32c <lcd_set_4bit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     2de:	8e 01       	movw	r16, r28
     2e0:	09 59       	subi	r16, 0x99	; 153
     2e2:	1f 4f       	sbci	r17, 0xFF	; 255
     2e4:	fe 01       	movw	r30, r28
     2e6:	e7 59       	subi	r30, 0x97	; 151
     2e8:	ff 4f       	sbci	r31, 0xFF	; 255
     2ea:	60 81       	ld	r22, Z
     2ec:	71 81       	ldd	r23, Z+1	; 0x01
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	0e 94 fe 14 	call	0x29fc	; 0x29fc <__fixunssfsi>
     2f6:	dc 01       	movw	r26, r24
     2f8:	cb 01       	movw	r24, r22
     2fa:	f8 01       	movw	r30, r16
     2fc:	91 83       	std	Z+1, r25	; 0x01
     2fe:	80 83       	st	Z, r24
     300:	de 01       	movw	r26, r28
     302:	ad 59       	subi	r26, 0x9D	; 157
     304:	bf 4f       	sbci	r27, 0xFF	; 255
     306:	fe 01       	movw	r30, r28
     308:	e9 59       	subi	r30, 0x99	; 153
     30a:	ff 4f       	sbci	r31, 0xFF	; 255
     30c:	80 81       	ld	r24, Z
     30e:	91 81       	ldd	r25, Z+1	; 0x01
     310:	8d 93       	st	X+, r24
     312:	9c 93       	st	X, r25
     314:	fe 01       	movw	r30, r28
     316:	ed 59       	subi	r30, 0x9D	; 157
     318:	ff 4f       	sbci	r31, 0xFF	; 255
     31a:	80 81       	ld	r24, Z
     31c:	91 81       	ldd	r25, Z+1	; 0x01
     31e:	01 97       	sbiw	r24, 0x01	; 1
     320:	f1 f7       	brne	.-4      	; 0x31e <lcd_set_4bit+0x172>
     322:	fe 01       	movw	r30, r28
     324:	ed 59       	subi	r30, 0x9D	; 157
     326:	ff 4f       	sbci	r31, 0xFF	; 255
     328:	91 83       	std	Z+1, r25	; 0x01
     32a:	80 83       	st	Z, r24
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     32c:	a8 e2       	ldi	r26, 0x28	; 40
     32e:	b0 e0       	ldi	r27, 0x00	; 0
     330:	e8 e2       	ldi	r30, 0x28	; 40
     332:	f0 e0       	ldi	r31, 0x00	; 0
     334:	80 81       	ld	r24, Z
     336:	8e 7f       	andi	r24, 0xFE	; 254
     338:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     33a:	a8 e2       	ldi	r26, 0x28	; 40
     33c:	b0 e0       	ldi	r27, 0x00	; 0
     33e:	e8 e2       	ldi	r30, 0x28	; 40
     340:	f0 e0       	ldi	r31, 0x00	; 0
     342:	80 81       	ld	r24, Z
     344:	8d 7f       	andi	r24, 0xFD	; 253
     346:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     348:	e8 e2       	ldi	r30, 0x28	; 40
     34a:	f0 e0       	ldi	r31, 0x00	; 0
     34c:	80 e3       	ldi	r24, 0x30	; 48
     34e:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     350:	a8 e2       	ldi	r26, 0x28	; 40
     352:	b0 e0       	ldi	r27, 0x00	; 0
     354:	e8 e2       	ldi	r30, 0x28	; 40
     356:	f0 e0       	ldi	r31, 0x00	; 0
     358:	80 81       	ld	r24, Z
     35a:	84 60       	ori	r24, 0x04	; 4
     35c:	8c 93       	st	X, r24
     35e:	fe 01       	movw	r30, r28
     360:	e1 5a       	subi	r30, 0xA1	; 161
     362:	ff 4f       	sbci	r31, 0xFF	; 255
     364:	80 e0       	ldi	r24, 0x00	; 0
     366:	90 e0       	ldi	r25, 0x00	; 0
     368:	a0 ea       	ldi	r26, 0xA0	; 160
     36a:	b0 e4       	ldi	r27, 0x40	; 64
     36c:	80 83       	st	Z, r24
     36e:	91 83       	std	Z+1, r25	; 0x01
     370:	a2 83       	std	Z+2, r26	; 0x02
     372:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     374:	8e 01       	movw	r16, r28
     376:	05 5a       	subi	r16, 0xA5	; 165
     378:	1f 4f       	sbci	r17, 0xFF	; 255
     37a:	fe 01       	movw	r30, r28
     37c:	e1 5a       	subi	r30, 0xA1	; 161
     37e:	ff 4f       	sbci	r31, 0xFF	; 255
     380:	60 81       	ld	r22, Z
     382:	71 81       	ldd	r23, Z+1	; 0x01
     384:	82 81       	ldd	r24, Z+2	; 0x02
     386:	93 81       	ldd	r25, Z+3	; 0x03
     388:	2d ec       	ldi	r18, 0xCD	; 205
     38a:	3c ec       	ldi	r19, 0xCC	; 204
     38c:	4c e2       	ldi	r20, 0x2C	; 44
     38e:	55 e4       	ldi	r21, 0x45	; 69
     390:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <__mulsf3>
     394:	dc 01       	movw	r26, r24
     396:	cb 01       	movw	r24, r22
     398:	f8 01       	movw	r30, r16
     39a:	80 83       	st	Z, r24
     39c:	91 83       	std	Z+1, r25	; 0x01
     39e:	a2 83       	std	Z+2, r26	; 0x02
     3a0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     3a2:	fe 01       	movw	r30, r28
     3a4:	e5 5a       	subi	r30, 0xA5	; 165
     3a6:	ff 4f       	sbci	r31, 0xFF	; 255
     3a8:	60 81       	ld	r22, Z
     3aa:	71 81       	ldd	r23, Z+1	; 0x01
     3ac:	82 81       	ldd	r24, Z+2	; 0x02
     3ae:	93 81       	ldd	r25, Z+3	; 0x03
     3b0:	20 e0       	ldi	r18, 0x00	; 0
     3b2:	30 e0       	ldi	r19, 0x00	; 0
     3b4:	40 e8       	ldi	r20, 0x80	; 128
     3b6:	5f e3       	ldi	r21, 0x3F	; 63
     3b8:	0e 94 da 18 	call	0x31b4	; 0x31b4 <__ltsf2>
     3bc:	88 23       	and	r24, r24
     3be:	44 f4       	brge	.+16     	; 0x3d0 <lcd_set_4bit+0x224>
		__ticks = 1;
     3c0:	fe 01       	movw	r30, r28
     3c2:	e7 5a       	subi	r30, 0xA7	; 167
     3c4:	ff 4f       	sbci	r31, 0xFF	; 255
     3c6:	81 e0       	ldi	r24, 0x01	; 1
     3c8:	90 e0       	ldi	r25, 0x00	; 0
     3ca:	91 83       	std	Z+1, r25	; 0x01
     3cc:	80 83       	st	Z, r24
     3ce:	64 c0       	rjmp	.+200    	; 0x498 <lcd_set_4bit+0x2ec>
	else if (__tmp > 65535)
     3d0:	fe 01       	movw	r30, r28
     3d2:	e5 5a       	subi	r30, 0xA5	; 165
     3d4:	ff 4f       	sbci	r31, 0xFF	; 255
     3d6:	60 81       	ld	r22, Z
     3d8:	71 81       	ldd	r23, Z+1	; 0x01
     3da:	82 81       	ldd	r24, Z+2	; 0x02
     3dc:	93 81       	ldd	r25, Z+3	; 0x03
     3de:	20 e0       	ldi	r18, 0x00	; 0
     3e0:	3f ef       	ldi	r19, 0xFF	; 255
     3e2:	4f e7       	ldi	r20, 0x7F	; 127
     3e4:	57 e4       	ldi	r21, 0x47	; 71
     3e6:	0e 94 7a 18 	call	0x30f4	; 0x30f4 <__gtsf2>
     3ea:	18 16       	cp	r1, r24
     3ec:	0c f0       	brlt	.+2      	; 0x3f0 <lcd_set_4bit+0x244>
     3ee:	43 c0       	rjmp	.+134    	; 0x476 <lcd_set_4bit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     3f0:	fe 01       	movw	r30, r28
     3f2:	e1 5a       	subi	r30, 0xA1	; 161
     3f4:	ff 4f       	sbci	r31, 0xFF	; 255
     3f6:	60 81       	ld	r22, Z
     3f8:	71 81       	ldd	r23, Z+1	; 0x01
     3fa:	82 81       	ldd	r24, Z+2	; 0x02
     3fc:	93 81       	ldd	r25, Z+3	; 0x03
     3fe:	20 e0       	ldi	r18, 0x00	; 0
     400:	30 e0       	ldi	r19, 0x00	; 0
     402:	40 e2       	ldi	r20, 0x20	; 32
     404:	51 e4       	ldi	r21, 0x41	; 65
     406:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <__mulsf3>
     40a:	dc 01       	movw	r26, r24
     40c:	cb 01       	movw	r24, r22
     40e:	8e 01       	movw	r16, r28
     410:	07 5a       	subi	r16, 0xA7	; 167
     412:	1f 4f       	sbci	r17, 0xFF	; 255
     414:	bc 01       	movw	r22, r24
     416:	cd 01       	movw	r24, r26
     418:	0e 94 fe 14 	call	0x29fc	; 0x29fc <__fixunssfsi>
     41c:	dc 01       	movw	r26, r24
     41e:	cb 01       	movw	r24, r22
     420:	f8 01       	movw	r30, r16
     422:	91 83       	std	Z+1, r25	; 0x01
     424:	80 83       	st	Z, r24
     426:	1f c0       	rjmp	.+62     	; 0x466 <lcd_set_4bit+0x2ba>
     428:	fe 01       	movw	r30, r28
     42a:	e9 5a       	subi	r30, 0xA9	; 169
     42c:	ff 4f       	sbci	r31, 0xFF	; 255
     42e:	84 e1       	ldi	r24, 0x14	; 20
     430:	91 e0       	ldi	r25, 0x01	; 1
     432:	91 83       	std	Z+1, r25	; 0x01
     434:	80 83       	st	Z, r24
     436:	fe 01       	movw	r30, r28
     438:	e9 5a       	subi	r30, 0xA9	; 169
     43a:	ff 4f       	sbci	r31, 0xFF	; 255
     43c:	80 81       	ld	r24, Z
     43e:	91 81       	ldd	r25, Z+1	; 0x01
     440:	01 97       	sbiw	r24, 0x01	; 1
     442:	f1 f7       	brne	.-4      	; 0x440 <lcd_set_4bit+0x294>
     444:	fe 01       	movw	r30, r28
     446:	e9 5a       	subi	r30, 0xA9	; 169
     448:	ff 4f       	sbci	r31, 0xFF	; 255
     44a:	91 83       	std	Z+1, r25	; 0x01
     44c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     44e:	de 01       	movw	r26, r28
     450:	a7 5a       	subi	r26, 0xA7	; 167
     452:	bf 4f       	sbci	r27, 0xFF	; 255
     454:	fe 01       	movw	r30, r28
     456:	e7 5a       	subi	r30, 0xA7	; 167
     458:	ff 4f       	sbci	r31, 0xFF	; 255
     45a:	80 81       	ld	r24, Z
     45c:	91 81       	ldd	r25, Z+1	; 0x01
     45e:	01 97       	sbiw	r24, 0x01	; 1
     460:	11 96       	adiw	r26, 0x01	; 1
     462:	9c 93       	st	X, r25
     464:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     466:	fe 01       	movw	r30, r28
     468:	e7 5a       	subi	r30, 0xA7	; 167
     46a:	ff 4f       	sbci	r31, 0xFF	; 255
     46c:	80 81       	ld	r24, Z
     46e:	91 81       	ldd	r25, Z+1	; 0x01
     470:	00 97       	sbiw	r24, 0x00	; 0
     472:	d1 f6       	brne	.-76     	; 0x428 <lcd_set_4bit+0x27c>
     474:	27 c0       	rjmp	.+78     	; 0x4c4 <lcd_set_4bit+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     476:	8e 01       	movw	r16, r28
     478:	07 5a       	subi	r16, 0xA7	; 167
     47a:	1f 4f       	sbci	r17, 0xFF	; 255
     47c:	fe 01       	movw	r30, r28
     47e:	e5 5a       	subi	r30, 0xA5	; 165
     480:	ff 4f       	sbci	r31, 0xFF	; 255
     482:	60 81       	ld	r22, Z
     484:	71 81       	ldd	r23, Z+1	; 0x01
     486:	82 81       	ldd	r24, Z+2	; 0x02
     488:	93 81       	ldd	r25, Z+3	; 0x03
     48a:	0e 94 fe 14 	call	0x29fc	; 0x29fc <__fixunssfsi>
     48e:	dc 01       	movw	r26, r24
     490:	cb 01       	movw	r24, r22
     492:	f8 01       	movw	r30, r16
     494:	91 83       	std	Z+1, r25	; 0x01
     496:	80 83       	st	Z, r24
     498:	de 01       	movw	r26, r28
     49a:	ab 5a       	subi	r26, 0xAB	; 171
     49c:	bf 4f       	sbci	r27, 0xFF	; 255
     49e:	fe 01       	movw	r30, r28
     4a0:	e7 5a       	subi	r30, 0xA7	; 167
     4a2:	ff 4f       	sbci	r31, 0xFF	; 255
     4a4:	80 81       	ld	r24, Z
     4a6:	91 81       	ldd	r25, Z+1	; 0x01
     4a8:	8d 93       	st	X+, r24
     4aa:	9c 93       	st	X, r25
     4ac:	fe 01       	movw	r30, r28
     4ae:	eb 5a       	subi	r30, 0xAB	; 171
     4b0:	ff 4f       	sbci	r31, 0xFF	; 255
     4b2:	80 81       	ld	r24, Z
     4b4:	91 81       	ldd	r25, Z+1	; 0x01
     4b6:	01 97       	sbiw	r24, 0x01	; 1
     4b8:	f1 f7       	brne	.-4      	; 0x4b6 <lcd_set_4bit+0x30a>
     4ba:	fe 01       	movw	r30, r28
     4bc:	eb 5a       	subi	r30, 0xAB	; 171
     4be:	ff 4f       	sbci	r31, 0xFF	; 255
     4c0:	91 83       	std	Z+1, r25	; 0x01
     4c2:	80 83       	st	Z, r24
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     4c4:	a8 e2       	ldi	r26, 0x28	; 40
     4c6:	b0 e0       	ldi	r27, 0x00	; 0
     4c8:	e8 e2       	ldi	r30, 0x28	; 40
     4ca:	f0 e0       	ldi	r31, 0x00	; 0
     4cc:	80 81       	ld	r24, Z
     4ce:	8b 7f       	andi	r24, 0xFB	; 251
     4d0:	8c 93       	st	X, r24
     4d2:	fe 01       	movw	r30, r28
     4d4:	ef 5a       	subi	r30, 0xAF	; 175
     4d6:	ff 4f       	sbci	r31, 0xFF	; 255
     4d8:	80 e0       	ldi	r24, 0x00	; 0
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	a0 e8       	ldi	r26, 0x80	; 128
     4de:	bf e3       	ldi	r27, 0x3F	; 63
     4e0:	80 83       	st	Z, r24
     4e2:	91 83       	std	Z+1, r25	; 0x01
     4e4:	a2 83       	std	Z+2, r26	; 0x02
     4e6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     4e8:	8e 01       	movw	r16, r28
     4ea:	03 5b       	subi	r16, 0xB3	; 179
     4ec:	1f 4f       	sbci	r17, 0xFF	; 255
     4ee:	fe 01       	movw	r30, r28
     4f0:	ef 5a       	subi	r30, 0xAF	; 175
     4f2:	ff 4f       	sbci	r31, 0xFF	; 255
     4f4:	60 81       	ld	r22, Z
     4f6:	71 81       	ldd	r23, Z+1	; 0x01
     4f8:	82 81       	ldd	r24, Z+2	; 0x02
     4fa:	93 81       	ldd	r25, Z+3	; 0x03
     4fc:	2d ec       	ldi	r18, 0xCD	; 205
     4fe:	3c ec       	ldi	r19, 0xCC	; 204
     500:	4c e2       	ldi	r20, 0x2C	; 44
     502:	55 e4       	ldi	r21, 0x45	; 69
     504:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <__mulsf3>
     508:	dc 01       	movw	r26, r24
     50a:	cb 01       	movw	r24, r22
     50c:	f8 01       	movw	r30, r16
     50e:	80 83       	st	Z, r24
     510:	91 83       	std	Z+1, r25	; 0x01
     512:	a2 83       	std	Z+2, r26	; 0x02
     514:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     516:	fe 01       	movw	r30, r28
     518:	e3 5b       	subi	r30, 0xB3	; 179
     51a:	ff 4f       	sbci	r31, 0xFF	; 255
     51c:	60 81       	ld	r22, Z
     51e:	71 81       	ldd	r23, Z+1	; 0x01
     520:	82 81       	ldd	r24, Z+2	; 0x02
     522:	93 81       	ldd	r25, Z+3	; 0x03
     524:	20 e0       	ldi	r18, 0x00	; 0
     526:	30 e0       	ldi	r19, 0x00	; 0
     528:	40 e8       	ldi	r20, 0x80	; 128
     52a:	5f e3       	ldi	r21, 0x3F	; 63
     52c:	0e 94 da 18 	call	0x31b4	; 0x31b4 <__ltsf2>
     530:	88 23       	and	r24, r24
     532:	44 f4       	brge	.+16     	; 0x544 <lcd_set_4bit+0x398>
		__ticks = 1;
     534:	fe 01       	movw	r30, r28
     536:	e5 5b       	subi	r30, 0xB5	; 181
     538:	ff 4f       	sbci	r31, 0xFF	; 255
     53a:	81 e0       	ldi	r24, 0x01	; 1
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	91 83       	std	Z+1, r25	; 0x01
     540:	80 83       	st	Z, r24
     542:	64 c0       	rjmp	.+200    	; 0x60c <lcd_set_4bit+0x460>
	else if (__tmp > 65535)
     544:	fe 01       	movw	r30, r28
     546:	e3 5b       	subi	r30, 0xB3	; 179
     548:	ff 4f       	sbci	r31, 0xFF	; 255
     54a:	60 81       	ld	r22, Z
     54c:	71 81       	ldd	r23, Z+1	; 0x01
     54e:	82 81       	ldd	r24, Z+2	; 0x02
     550:	93 81       	ldd	r25, Z+3	; 0x03
     552:	20 e0       	ldi	r18, 0x00	; 0
     554:	3f ef       	ldi	r19, 0xFF	; 255
     556:	4f e7       	ldi	r20, 0x7F	; 127
     558:	57 e4       	ldi	r21, 0x47	; 71
     55a:	0e 94 7a 18 	call	0x30f4	; 0x30f4 <__gtsf2>
     55e:	18 16       	cp	r1, r24
     560:	0c f0       	brlt	.+2      	; 0x564 <lcd_set_4bit+0x3b8>
     562:	43 c0       	rjmp	.+134    	; 0x5ea <lcd_set_4bit+0x43e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     564:	fe 01       	movw	r30, r28
     566:	ef 5a       	subi	r30, 0xAF	; 175
     568:	ff 4f       	sbci	r31, 0xFF	; 255
     56a:	60 81       	ld	r22, Z
     56c:	71 81       	ldd	r23, Z+1	; 0x01
     56e:	82 81       	ldd	r24, Z+2	; 0x02
     570:	93 81       	ldd	r25, Z+3	; 0x03
     572:	20 e0       	ldi	r18, 0x00	; 0
     574:	30 e0       	ldi	r19, 0x00	; 0
     576:	40 e2       	ldi	r20, 0x20	; 32
     578:	51 e4       	ldi	r21, 0x41	; 65
     57a:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <__mulsf3>
     57e:	dc 01       	movw	r26, r24
     580:	cb 01       	movw	r24, r22
     582:	8e 01       	movw	r16, r28
     584:	05 5b       	subi	r16, 0xB5	; 181
     586:	1f 4f       	sbci	r17, 0xFF	; 255
     588:	bc 01       	movw	r22, r24
     58a:	cd 01       	movw	r24, r26
     58c:	0e 94 fe 14 	call	0x29fc	; 0x29fc <__fixunssfsi>
     590:	dc 01       	movw	r26, r24
     592:	cb 01       	movw	r24, r22
     594:	f8 01       	movw	r30, r16
     596:	91 83       	std	Z+1, r25	; 0x01
     598:	80 83       	st	Z, r24
     59a:	1f c0       	rjmp	.+62     	; 0x5da <lcd_set_4bit+0x42e>
     59c:	fe 01       	movw	r30, r28
     59e:	e7 5b       	subi	r30, 0xB7	; 183
     5a0:	ff 4f       	sbci	r31, 0xFF	; 255
     5a2:	84 e1       	ldi	r24, 0x14	; 20
     5a4:	91 e0       	ldi	r25, 0x01	; 1
     5a6:	91 83       	std	Z+1, r25	; 0x01
     5a8:	80 83       	st	Z, r24
     5aa:	fe 01       	movw	r30, r28
     5ac:	e7 5b       	subi	r30, 0xB7	; 183
     5ae:	ff 4f       	sbci	r31, 0xFF	; 255
     5b0:	80 81       	ld	r24, Z
     5b2:	91 81       	ldd	r25, Z+1	; 0x01
     5b4:	01 97       	sbiw	r24, 0x01	; 1
     5b6:	f1 f7       	brne	.-4      	; 0x5b4 <lcd_set_4bit+0x408>
     5b8:	fe 01       	movw	r30, r28
     5ba:	e7 5b       	subi	r30, 0xB7	; 183
     5bc:	ff 4f       	sbci	r31, 0xFF	; 255
     5be:	91 83       	std	Z+1, r25	; 0x01
     5c0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5c2:	de 01       	movw	r26, r28
     5c4:	a5 5b       	subi	r26, 0xB5	; 181
     5c6:	bf 4f       	sbci	r27, 0xFF	; 255
     5c8:	fe 01       	movw	r30, r28
     5ca:	e5 5b       	subi	r30, 0xB5	; 181
     5cc:	ff 4f       	sbci	r31, 0xFF	; 255
     5ce:	80 81       	ld	r24, Z
     5d0:	91 81       	ldd	r25, Z+1	; 0x01
     5d2:	01 97       	sbiw	r24, 0x01	; 1
     5d4:	11 96       	adiw	r26, 0x01	; 1
     5d6:	9c 93       	st	X, r25
     5d8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5da:	fe 01       	movw	r30, r28
     5dc:	e5 5b       	subi	r30, 0xB5	; 181
     5de:	ff 4f       	sbci	r31, 0xFF	; 255
     5e0:	80 81       	ld	r24, Z
     5e2:	91 81       	ldd	r25, Z+1	; 0x01
     5e4:	00 97       	sbiw	r24, 0x00	; 0
     5e6:	d1 f6       	brne	.-76     	; 0x59c <lcd_set_4bit+0x3f0>
     5e8:	27 c0       	rjmp	.+78     	; 0x638 <lcd_set_4bit+0x48c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     5ea:	8e 01       	movw	r16, r28
     5ec:	05 5b       	subi	r16, 0xB5	; 181
     5ee:	1f 4f       	sbci	r17, 0xFF	; 255
     5f0:	fe 01       	movw	r30, r28
     5f2:	e3 5b       	subi	r30, 0xB3	; 179
     5f4:	ff 4f       	sbci	r31, 0xFF	; 255
     5f6:	60 81       	ld	r22, Z
     5f8:	71 81       	ldd	r23, Z+1	; 0x01
     5fa:	82 81       	ldd	r24, Z+2	; 0x02
     5fc:	93 81       	ldd	r25, Z+3	; 0x03
     5fe:	0e 94 fe 14 	call	0x29fc	; 0x29fc <__fixunssfsi>
     602:	dc 01       	movw	r26, r24
     604:	cb 01       	movw	r24, r22
     606:	f8 01       	movw	r30, r16
     608:	91 83       	std	Z+1, r25	; 0x01
     60a:	80 83       	st	Z, r24
     60c:	de 01       	movw	r26, r28
     60e:	a9 5b       	subi	r26, 0xB9	; 185
     610:	bf 4f       	sbci	r27, 0xFF	; 255
     612:	fe 01       	movw	r30, r28
     614:	e5 5b       	subi	r30, 0xB5	; 181
     616:	ff 4f       	sbci	r31, 0xFF	; 255
     618:	80 81       	ld	r24, Z
     61a:	91 81       	ldd	r25, Z+1	; 0x01
     61c:	8d 93       	st	X+, r24
     61e:	9c 93       	st	X, r25
     620:	fe 01       	movw	r30, r28
     622:	e9 5b       	subi	r30, 0xB9	; 185
     624:	ff 4f       	sbci	r31, 0xFF	; 255
     626:	80 81       	ld	r24, Z
     628:	91 81       	ldd	r25, Z+1	; 0x01
     62a:	01 97       	sbiw	r24, 0x01	; 1
     62c:	f1 f7       	brne	.-4      	; 0x62a <lcd_set_4bit+0x47e>
     62e:	fe 01       	movw	r30, r28
     630:	e9 5b       	subi	r30, 0xB9	; 185
     632:	ff 4f       	sbci	r31, 0xFF	; 255
     634:	91 83       	std	Z+1, r25	; 0x01
     636:	80 83       	st	Z, r24

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     638:	a8 e2       	ldi	r26, 0x28	; 40
     63a:	b0 e0       	ldi	r27, 0x00	; 0
     63c:	e8 e2       	ldi	r30, 0x28	; 40
     63e:	f0 e0       	ldi	r31, 0x00	; 0
     640:	80 81       	ld	r24, Z
     642:	8e 7f       	andi	r24, 0xFE	; 254
     644:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     646:	a8 e2       	ldi	r26, 0x28	; 40
     648:	b0 e0       	ldi	r27, 0x00	; 0
     64a:	e8 e2       	ldi	r30, 0x28	; 40
     64c:	f0 e0       	ldi	r31, 0x00	; 0
     64e:	80 81       	ld	r24, Z
     650:	8d 7f       	andi	r24, 0xFD	; 253
     652:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     654:	e8 e2       	ldi	r30, 0x28	; 40
     656:	f0 e0       	ldi	r31, 0x00	; 0
     658:	80 e3       	ldi	r24, 0x30	; 48
     65a:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     65c:	a8 e2       	ldi	r26, 0x28	; 40
     65e:	b0 e0       	ldi	r27, 0x00	; 0
     660:	e8 e2       	ldi	r30, 0x28	; 40
     662:	f0 e0       	ldi	r31, 0x00	; 0
     664:	80 81       	ld	r24, Z
     666:	84 60       	ori	r24, 0x04	; 4
     668:	8c 93       	st	X, r24
     66a:	fe 01       	movw	r30, r28
     66c:	ed 5b       	subi	r30, 0xBD	; 189
     66e:	ff 4f       	sbci	r31, 0xFF	; 255
     670:	80 e0       	ldi	r24, 0x00	; 0
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	a0 ea       	ldi	r26, 0xA0	; 160
     676:	b0 e4       	ldi	r27, 0x40	; 64
     678:	80 83       	st	Z, r24
     67a:	91 83       	std	Z+1, r25	; 0x01
     67c:	a2 83       	std	Z+2, r26	; 0x02
     67e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     680:	8e 01       	movw	r16, r28
     682:	01 5c       	subi	r16, 0xC1	; 193
     684:	1f 4f       	sbci	r17, 0xFF	; 255
     686:	fe 01       	movw	r30, r28
     688:	ed 5b       	subi	r30, 0xBD	; 189
     68a:	ff 4f       	sbci	r31, 0xFF	; 255
     68c:	60 81       	ld	r22, Z
     68e:	71 81       	ldd	r23, Z+1	; 0x01
     690:	82 81       	ldd	r24, Z+2	; 0x02
     692:	93 81       	ldd	r25, Z+3	; 0x03
     694:	2d ec       	ldi	r18, 0xCD	; 205
     696:	3c ec       	ldi	r19, 0xCC	; 204
     698:	4c e2       	ldi	r20, 0x2C	; 44
     69a:	55 e4       	ldi	r21, 0x45	; 69
     69c:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <__mulsf3>
     6a0:	dc 01       	movw	r26, r24
     6a2:	cb 01       	movw	r24, r22
     6a4:	f8 01       	movw	r30, r16
     6a6:	80 83       	st	Z, r24
     6a8:	91 83       	std	Z+1, r25	; 0x01
     6aa:	a2 83       	std	Z+2, r26	; 0x02
     6ac:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     6ae:	fe 01       	movw	r30, r28
     6b0:	ff 96       	adiw	r30, 0x3f	; 63
     6b2:	60 81       	ld	r22, Z
     6b4:	71 81       	ldd	r23, Z+1	; 0x01
     6b6:	82 81       	ldd	r24, Z+2	; 0x02
     6b8:	93 81       	ldd	r25, Z+3	; 0x03
     6ba:	20 e0       	ldi	r18, 0x00	; 0
     6bc:	30 e0       	ldi	r19, 0x00	; 0
     6be:	40 e8       	ldi	r20, 0x80	; 128
     6c0:	5f e3       	ldi	r21, 0x3F	; 63
     6c2:	0e 94 da 18 	call	0x31b4	; 0x31b4 <__ltsf2>
     6c6:	88 23       	and	r24, r24
     6c8:	2c f4       	brge	.+10     	; 0x6d4 <lcd_set_4bit+0x528>
		__ticks = 1;
     6ca:	81 e0       	ldi	r24, 0x01	; 1
     6cc:	90 e0       	ldi	r25, 0x00	; 0
     6ce:	9e af       	std	Y+62, r25	; 0x3e
     6d0:	8d af       	std	Y+61, r24	; 0x3d
     6d2:	46 c0       	rjmp	.+140    	; 0x760 <lcd_set_4bit+0x5b4>
	else if (__tmp > 65535)
     6d4:	fe 01       	movw	r30, r28
     6d6:	ff 96       	adiw	r30, 0x3f	; 63
     6d8:	60 81       	ld	r22, Z
     6da:	71 81       	ldd	r23, Z+1	; 0x01
     6dc:	82 81       	ldd	r24, Z+2	; 0x02
     6de:	93 81       	ldd	r25, Z+3	; 0x03
     6e0:	20 e0       	ldi	r18, 0x00	; 0
     6e2:	3f ef       	ldi	r19, 0xFF	; 255
     6e4:	4f e7       	ldi	r20, 0x7F	; 127
     6e6:	57 e4       	ldi	r21, 0x47	; 71
     6e8:	0e 94 7a 18 	call	0x30f4	; 0x30f4 <__gtsf2>
     6ec:	18 16       	cp	r1, r24
     6ee:	64 f5       	brge	.+88     	; 0x748 <lcd_set_4bit+0x59c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     6f0:	fe 01       	movw	r30, r28
     6f2:	ed 5b       	subi	r30, 0xBD	; 189
     6f4:	ff 4f       	sbci	r31, 0xFF	; 255
     6f6:	60 81       	ld	r22, Z
     6f8:	71 81       	ldd	r23, Z+1	; 0x01
     6fa:	82 81       	ldd	r24, Z+2	; 0x02
     6fc:	93 81       	ldd	r25, Z+3	; 0x03
     6fe:	20 e0       	ldi	r18, 0x00	; 0
     700:	30 e0       	ldi	r19, 0x00	; 0
     702:	40 e2       	ldi	r20, 0x20	; 32
     704:	51 e4       	ldi	r21, 0x41	; 65
     706:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <__mulsf3>
     70a:	dc 01       	movw	r26, r24
     70c:	cb 01       	movw	r24, r22
     70e:	bc 01       	movw	r22, r24
     710:	cd 01       	movw	r24, r26
     712:	0e 94 fe 14 	call	0x29fc	; 0x29fc <__fixunssfsi>
     716:	dc 01       	movw	r26, r24
     718:	cb 01       	movw	r24, r22
     71a:	9e af       	std	Y+62, r25	; 0x3e
     71c:	8d af       	std	Y+61, r24	; 0x3d
     71e:	0f c0       	rjmp	.+30     	; 0x73e <lcd_set_4bit+0x592>
     720:	84 e1       	ldi	r24, 0x14	; 20
     722:	91 e0       	ldi	r25, 0x01	; 1
     724:	9c af       	std	Y+60, r25	; 0x3c
     726:	8b af       	std	Y+59, r24	; 0x3b
     728:	8b ad       	ldd	r24, Y+59	; 0x3b
     72a:	9c ad       	ldd	r25, Y+60	; 0x3c
     72c:	01 97       	sbiw	r24, 0x01	; 1
     72e:	f1 f7       	brne	.-4      	; 0x72c <lcd_set_4bit+0x580>
     730:	9c af       	std	Y+60, r25	; 0x3c
     732:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     734:	8d ad       	ldd	r24, Y+61	; 0x3d
     736:	9e ad       	ldd	r25, Y+62	; 0x3e
     738:	01 97       	sbiw	r24, 0x01	; 1
     73a:	9e af       	std	Y+62, r25	; 0x3e
     73c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     73e:	8d ad       	ldd	r24, Y+61	; 0x3d
     740:	9e ad       	ldd	r25, Y+62	; 0x3e
     742:	00 97       	sbiw	r24, 0x00	; 0
     744:	69 f7       	brne	.-38     	; 0x720 <lcd_set_4bit+0x574>
     746:	16 c0       	rjmp	.+44     	; 0x774 <lcd_set_4bit+0x5c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     748:	fe 01       	movw	r30, r28
     74a:	ff 96       	adiw	r30, 0x3f	; 63
     74c:	60 81       	ld	r22, Z
     74e:	71 81       	ldd	r23, Z+1	; 0x01
     750:	82 81       	ldd	r24, Z+2	; 0x02
     752:	93 81       	ldd	r25, Z+3	; 0x03
     754:	0e 94 fe 14 	call	0x29fc	; 0x29fc <__fixunssfsi>
     758:	dc 01       	movw	r26, r24
     75a:	cb 01       	movw	r24, r22
     75c:	9e af       	std	Y+62, r25	; 0x3e
     75e:	8d af       	std	Y+61, r24	; 0x3d
     760:	8d ad       	ldd	r24, Y+61	; 0x3d
     762:	9e ad       	ldd	r25, Y+62	; 0x3e
     764:	9a af       	std	Y+58, r25	; 0x3a
     766:	89 af       	std	Y+57, r24	; 0x39
     768:	89 ad       	ldd	r24, Y+57	; 0x39
     76a:	9a ad       	ldd	r25, Y+58	; 0x3a
     76c:	01 97       	sbiw	r24, 0x01	; 1
     76e:	f1 f7       	brne	.-4      	; 0x76c <lcd_set_4bit+0x5c0>
     770:	9a af       	std	Y+58, r25	; 0x3a
     772:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     774:	a8 e2       	ldi	r26, 0x28	; 40
     776:	b0 e0       	ldi	r27, 0x00	; 0
     778:	e8 e2       	ldi	r30, 0x28	; 40
     77a:	f0 e0       	ldi	r31, 0x00	; 0
     77c:	80 81       	ld	r24, Z
     77e:	8b 7f       	andi	r24, 0xFB	; 251
     780:	8c 93       	st	X, r24
     782:	80 e0       	ldi	r24, 0x00	; 0
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	a0 e8       	ldi	r26, 0x80	; 128
     788:	bf e3       	ldi	r27, 0x3F	; 63
     78a:	8d ab       	std	Y+53, r24	; 0x35
     78c:	9e ab       	std	Y+54, r25	; 0x36
     78e:	af ab       	std	Y+55, r26	; 0x37
     790:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     792:	6d a9       	ldd	r22, Y+53	; 0x35
     794:	7e a9       	ldd	r23, Y+54	; 0x36
     796:	8f a9       	ldd	r24, Y+55	; 0x37
     798:	98 ad       	ldd	r25, Y+56	; 0x38
     79a:	2d ec       	ldi	r18, 0xCD	; 205
     79c:	3c ec       	ldi	r19, 0xCC	; 204
     79e:	4c e2       	ldi	r20, 0x2C	; 44
     7a0:	55 e4       	ldi	r21, 0x45	; 69
     7a2:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <__mulsf3>
     7a6:	dc 01       	movw	r26, r24
     7a8:	cb 01       	movw	r24, r22
     7aa:	89 ab       	std	Y+49, r24	; 0x31
     7ac:	9a ab       	std	Y+50, r25	; 0x32
     7ae:	ab ab       	std	Y+51, r26	; 0x33
     7b0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     7b2:	69 a9       	ldd	r22, Y+49	; 0x31
     7b4:	7a a9       	ldd	r23, Y+50	; 0x32
     7b6:	8b a9       	ldd	r24, Y+51	; 0x33
     7b8:	9c a9       	ldd	r25, Y+52	; 0x34
     7ba:	20 e0       	ldi	r18, 0x00	; 0
     7bc:	30 e0       	ldi	r19, 0x00	; 0
     7be:	40 e8       	ldi	r20, 0x80	; 128
     7c0:	5f e3       	ldi	r21, 0x3F	; 63
     7c2:	0e 94 da 18 	call	0x31b4	; 0x31b4 <__ltsf2>
     7c6:	88 23       	and	r24, r24
     7c8:	2c f4       	brge	.+10     	; 0x7d4 <lcd_set_4bit+0x628>
		__ticks = 1;
     7ca:	81 e0       	ldi	r24, 0x01	; 1
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	98 ab       	std	Y+48, r25	; 0x30
     7d0:	8f a7       	std	Y+47, r24	; 0x2f
     7d2:	3f c0       	rjmp	.+126    	; 0x852 <lcd_set_4bit+0x6a6>
	else if (__tmp > 65535)
     7d4:	69 a9       	ldd	r22, Y+49	; 0x31
     7d6:	7a a9       	ldd	r23, Y+50	; 0x32
     7d8:	8b a9       	ldd	r24, Y+51	; 0x33
     7da:	9c a9       	ldd	r25, Y+52	; 0x34
     7dc:	20 e0       	ldi	r18, 0x00	; 0
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f e7       	ldi	r20, 0x7F	; 127
     7e2:	57 e4       	ldi	r21, 0x47	; 71
     7e4:	0e 94 7a 18 	call	0x30f4	; 0x30f4 <__gtsf2>
     7e8:	18 16       	cp	r1, r24
     7ea:	4c f5       	brge	.+82     	; 0x83e <lcd_set_4bit+0x692>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     7ec:	6d a9       	ldd	r22, Y+53	; 0x35
     7ee:	7e a9       	ldd	r23, Y+54	; 0x36
     7f0:	8f a9       	ldd	r24, Y+55	; 0x37
     7f2:	98 ad       	ldd	r25, Y+56	; 0x38
     7f4:	20 e0       	ldi	r18, 0x00	; 0
     7f6:	30 e0       	ldi	r19, 0x00	; 0
     7f8:	40 e2       	ldi	r20, 0x20	; 32
     7fa:	51 e4       	ldi	r21, 0x41	; 65
     7fc:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <__mulsf3>
     800:	dc 01       	movw	r26, r24
     802:	cb 01       	movw	r24, r22
     804:	bc 01       	movw	r22, r24
     806:	cd 01       	movw	r24, r26
     808:	0e 94 fe 14 	call	0x29fc	; 0x29fc <__fixunssfsi>
     80c:	dc 01       	movw	r26, r24
     80e:	cb 01       	movw	r24, r22
     810:	98 ab       	std	Y+48, r25	; 0x30
     812:	8f a7       	std	Y+47, r24	; 0x2f
     814:	0f c0       	rjmp	.+30     	; 0x834 <lcd_set_4bit+0x688>
     816:	84 e1       	ldi	r24, 0x14	; 20
     818:	91 e0       	ldi	r25, 0x01	; 1
     81a:	9e a7       	std	Y+46, r25	; 0x2e
     81c:	8d a7       	std	Y+45, r24	; 0x2d
     81e:	8d a5       	ldd	r24, Y+45	; 0x2d
     820:	9e a5       	ldd	r25, Y+46	; 0x2e
     822:	01 97       	sbiw	r24, 0x01	; 1
     824:	f1 f7       	brne	.-4      	; 0x822 <lcd_set_4bit+0x676>
     826:	9e a7       	std	Y+46, r25	; 0x2e
     828:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     82a:	8f a5       	ldd	r24, Y+47	; 0x2f
     82c:	98 a9       	ldd	r25, Y+48	; 0x30
     82e:	01 97       	sbiw	r24, 0x01	; 1
     830:	98 ab       	std	Y+48, r25	; 0x30
     832:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     834:	8f a5       	ldd	r24, Y+47	; 0x2f
     836:	98 a9       	ldd	r25, Y+48	; 0x30
     838:	00 97       	sbiw	r24, 0x00	; 0
     83a:	69 f7       	brne	.-38     	; 0x816 <lcd_set_4bit+0x66a>
     83c:	14 c0       	rjmp	.+40     	; 0x866 <lcd_set_4bit+0x6ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     83e:	69 a9       	ldd	r22, Y+49	; 0x31
     840:	7a a9       	ldd	r23, Y+50	; 0x32
     842:	8b a9       	ldd	r24, Y+51	; 0x33
     844:	9c a9       	ldd	r25, Y+52	; 0x34
     846:	0e 94 fe 14 	call	0x29fc	; 0x29fc <__fixunssfsi>
     84a:	dc 01       	movw	r26, r24
     84c:	cb 01       	movw	r24, r22
     84e:	98 ab       	std	Y+48, r25	; 0x30
     850:	8f a7       	std	Y+47, r24	; 0x2f
     852:	8f a5       	ldd	r24, Y+47	; 0x2f
     854:	98 a9       	ldd	r25, Y+48	; 0x30
     856:	9c a7       	std	Y+44, r25	; 0x2c
     858:	8b a7       	std	Y+43, r24	; 0x2b
     85a:	8b a5       	ldd	r24, Y+43	; 0x2b
     85c:	9c a5       	ldd	r25, Y+44	; 0x2c
     85e:	01 97       	sbiw	r24, 0x01	; 1
     860:	f1 f7       	brne	.-4      	; 0x85e <lcd_set_4bit+0x6b2>
     862:	9c a7       	std	Y+44, r25	; 0x2c
     864:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     866:	a8 e2       	ldi	r26, 0x28	; 40
     868:	b0 e0       	ldi	r27, 0x00	; 0
     86a:	e8 e2       	ldi	r30, 0x28	; 40
     86c:	f0 e0       	ldi	r31, 0x00	; 0
     86e:	80 81       	ld	r24, Z
     870:	8e 7f       	andi	r24, 0xFE	; 254
     872:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     874:	a8 e2       	ldi	r26, 0x28	; 40
     876:	b0 e0       	ldi	r27, 0x00	; 0
     878:	e8 e2       	ldi	r30, 0x28	; 40
     87a:	f0 e0       	ldi	r31, 0x00	; 0
     87c:	80 81       	ld	r24, Z
     87e:	8d 7f       	andi	r24, 0xFD	; 253
     880:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     882:	e8 e2       	ldi	r30, 0x28	; 40
     884:	f0 e0       	ldi	r31, 0x00	; 0
     886:	80 e3       	ldi	r24, 0x30	; 48
     888:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     88a:	a8 e2       	ldi	r26, 0x28	; 40
     88c:	b0 e0       	ldi	r27, 0x00	; 0
     88e:	e8 e2       	ldi	r30, 0x28	; 40
     890:	f0 e0       	ldi	r31, 0x00	; 0
     892:	80 81       	ld	r24, Z
     894:	84 60       	ori	r24, 0x04	; 4
     896:	8c 93       	st	X, r24
     898:	80 e0       	ldi	r24, 0x00	; 0
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	a0 ea       	ldi	r26, 0xA0	; 160
     89e:	b0 e4       	ldi	r27, 0x40	; 64
     8a0:	8f a3       	std	Y+39, r24	; 0x27
     8a2:	98 a7       	std	Y+40, r25	; 0x28
     8a4:	a9 a7       	std	Y+41, r26	; 0x29
     8a6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     8a8:	6f a1       	ldd	r22, Y+39	; 0x27
     8aa:	78 a5       	ldd	r23, Y+40	; 0x28
     8ac:	89 a5       	ldd	r24, Y+41	; 0x29
     8ae:	9a a5       	ldd	r25, Y+42	; 0x2a
     8b0:	2d ec       	ldi	r18, 0xCD	; 205
     8b2:	3c ec       	ldi	r19, 0xCC	; 204
     8b4:	4c e2       	ldi	r20, 0x2C	; 44
     8b6:	55 e4       	ldi	r21, 0x45	; 69
     8b8:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <__mulsf3>
     8bc:	dc 01       	movw	r26, r24
     8be:	cb 01       	movw	r24, r22
     8c0:	8b a3       	std	Y+35, r24	; 0x23
     8c2:	9c a3       	std	Y+36, r25	; 0x24
     8c4:	ad a3       	std	Y+37, r26	; 0x25
     8c6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     8c8:	6b a1       	ldd	r22, Y+35	; 0x23
     8ca:	7c a1       	ldd	r23, Y+36	; 0x24
     8cc:	8d a1       	ldd	r24, Y+37	; 0x25
     8ce:	9e a1       	ldd	r25, Y+38	; 0x26
     8d0:	20 e0       	ldi	r18, 0x00	; 0
     8d2:	30 e0       	ldi	r19, 0x00	; 0
     8d4:	40 e8       	ldi	r20, 0x80	; 128
     8d6:	5f e3       	ldi	r21, 0x3F	; 63
     8d8:	0e 94 da 18 	call	0x31b4	; 0x31b4 <__ltsf2>
     8dc:	88 23       	and	r24, r24
     8de:	2c f4       	brge	.+10     	; 0x8ea <lcd_set_4bit+0x73e>
		__ticks = 1;
     8e0:	81 e0       	ldi	r24, 0x01	; 1
     8e2:	90 e0       	ldi	r25, 0x00	; 0
     8e4:	9a a3       	std	Y+34, r25	; 0x22
     8e6:	89 a3       	std	Y+33, r24	; 0x21
     8e8:	3f c0       	rjmp	.+126    	; 0x968 <lcd_set_4bit+0x7bc>
	else if (__tmp > 65535)
     8ea:	6b a1       	ldd	r22, Y+35	; 0x23
     8ec:	7c a1       	ldd	r23, Y+36	; 0x24
     8ee:	8d a1       	ldd	r24, Y+37	; 0x25
     8f0:	9e a1       	ldd	r25, Y+38	; 0x26
     8f2:	20 e0       	ldi	r18, 0x00	; 0
     8f4:	3f ef       	ldi	r19, 0xFF	; 255
     8f6:	4f e7       	ldi	r20, 0x7F	; 127
     8f8:	57 e4       	ldi	r21, 0x47	; 71
     8fa:	0e 94 7a 18 	call	0x30f4	; 0x30f4 <__gtsf2>
     8fe:	18 16       	cp	r1, r24
     900:	4c f5       	brge	.+82     	; 0x954 <lcd_set_4bit+0x7a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     902:	6f a1       	ldd	r22, Y+39	; 0x27
     904:	78 a5       	ldd	r23, Y+40	; 0x28
     906:	89 a5       	ldd	r24, Y+41	; 0x29
     908:	9a a5       	ldd	r25, Y+42	; 0x2a
     90a:	20 e0       	ldi	r18, 0x00	; 0
     90c:	30 e0       	ldi	r19, 0x00	; 0
     90e:	40 e2       	ldi	r20, 0x20	; 32
     910:	51 e4       	ldi	r21, 0x41	; 65
     912:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <__mulsf3>
     916:	dc 01       	movw	r26, r24
     918:	cb 01       	movw	r24, r22
     91a:	bc 01       	movw	r22, r24
     91c:	cd 01       	movw	r24, r26
     91e:	0e 94 fe 14 	call	0x29fc	; 0x29fc <__fixunssfsi>
     922:	dc 01       	movw	r26, r24
     924:	cb 01       	movw	r24, r22
     926:	9a a3       	std	Y+34, r25	; 0x22
     928:	89 a3       	std	Y+33, r24	; 0x21
     92a:	0f c0       	rjmp	.+30     	; 0x94a <lcd_set_4bit+0x79e>
     92c:	84 e1       	ldi	r24, 0x14	; 20
     92e:	91 e0       	ldi	r25, 0x01	; 1
     930:	98 a3       	std	Y+32, r25	; 0x20
     932:	8f 8f       	std	Y+31, r24	; 0x1f
     934:	8f 8d       	ldd	r24, Y+31	; 0x1f
     936:	98 a1       	ldd	r25, Y+32	; 0x20
     938:	01 97       	sbiw	r24, 0x01	; 1
     93a:	f1 f7       	brne	.-4      	; 0x938 <lcd_set_4bit+0x78c>
     93c:	98 a3       	std	Y+32, r25	; 0x20
     93e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     940:	89 a1       	ldd	r24, Y+33	; 0x21
     942:	9a a1       	ldd	r25, Y+34	; 0x22
     944:	01 97       	sbiw	r24, 0x01	; 1
     946:	9a a3       	std	Y+34, r25	; 0x22
     948:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     94a:	89 a1       	ldd	r24, Y+33	; 0x21
     94c:	9a a1       	ldd	r25, Y+34	; 0x22
     94e:	00 97       	sbiw	r24, 0x00	; 0
     950:	69 f7       	brne	.-38     	; 0x92c <lcd_set_4bit+0x780>
     952:	14 c0       	rjmp	.+40     	; 0x97c <lcd_set_4bit+0x7d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     954:	6b a1       	ldd	r22, Y+35	; 0x23
     956:	7c a1       	ldd	r23, Y+36	; 0x24
     958:	8d a1       	ldd	r24, Y+37	; 0x25
     95a:	9e a1       	ldd	r25, Y+38	; 0x26
     95c:	0e 94 fe 14 	call	0x29fc	; 0x29fc <__fixunssfsi>
     960:	dc 01       	movw	r26, r24
     962:	cb 01       	movw	r24, r22
     964:	9a a3       	std	Y+34, r25	; 0x22
     966:	89 a3       	std	Y+33, r24	; 0x21
     968:	89 a1       	ldd	r24, Y+33	; 0x21
     96a:	9a a1       	ldd	r25, Y+34	; 0x22
     96c:	9e 8f       	std	Y+30, r25	; 0x1e
     96e:	8d 8f       	std	Y+29, r24	; 0x1d
     970:	8d 8d       	ldd	r24, Y+29	; 0x1d
     972:	9e 8d       	ldd	r25, Y+30	; 0x1e
     974:	01 97       	sbiw	r24, 0x01	; 1
     976:	f1 f7       	brne	.-4      	; 0x974 <lcd_set_4bit+0x7c8>
     978:	9e 8f       	std	Y+30, r25	; 0x1e
     97a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     97c:	a8 e2       	ldi	r26, 0x28	; 40
     97e:	b0 e0       	ldi	r27, 0x00	; 0
     980:	e8 e2       	ldi	r30, 0x28	; 40
     982:	f0 e0       	ldi	r31, 0x00	; 0
     984:	80 81       	ld	r24, Z
     986:	8b 7f       	andi	r24, 0xFB	; 251
     988:	8c 93       	st	X, r24
     98a:	80 e0       	ldi	r24, 0x00	; 0
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	a0 e8       	ldi	r26, 0x80	; 128
     990:	bf e3       	ldi	r27, 0x3F	; 63
     992:	89 8f       	std	Y+25, r24	; 0x19
     994:	9a 8f       	std	Y+26, r25	; 0x1a
     996:	ab 8f       	std	Y+27, r26	; 0x1b
     998:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     99a:	69 8d       	ldd	r22, Y+25	; 0x19
     99c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     99e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     9a0:	9c 8d       	ldd	r25, Y+28	; 0x1c
     9a2:	2d ec       	ldi	r18, 0xCD	; 205
     9a4:	3c ec       	ldi	r19, 0xCC	; 204
     9a6:	4c e2       	ldi	r20, 0x2C	; 44
     9a8:	55 e4       	ldi	r21, 0x45	; 69
     9aa:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <__mulsf3>
     9ae:	dc 01       	movw	r26, r24
     9b0:	cb 01       	movw	r24, r22
     9b2:	8d 8b       	std	Y+21, r24	; 0x15
     9b4:	9e 8b       	std	Y+22, r25	; 0x16
     9b6:	af 8b       	std	Y+23, r26	; 0x17
     9b8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     9ba:	6d 89       	ldd	r22, Y+21	; 0x15
     9bc:	7e 89       	ldd	r23, Y+22	; 0x16
     9be:	8f 89       	ldd	r24, Y+23	; 0x17
     9c0:	98 8d       	ldd	r25, Y+24	; 0x18
     9c2:	20 e0       	ldi	r18, 0x00	; 0
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	40 e8       	ldi	r20, 0x80	; 128
     9c8:	5f e3       	ldi	r21, 0x3F	; 63
     9ca:	0e 94 da 18 	call	0x31b4	; 0x31b4 <__ltsf2>
     9ce:	88 23       	and	r24, r24
     9d0:	2c f4       	brge	.+10     	; 0x9dc <lcd_set_4bit+0x830>
		__ticks = 1;
     9d2:	81 e0       	ldi	r24, 0x01	; 1
     9d4:	90 e0       	ldi	r25, 0x00	; 0
     9d6:	9c 8b       	std	Y+20, r25	; 0x14
     9d8:	8b 8b       	std	Y+19, r24	; 0x13
     9da:	3f c0       	rjmp	.+126    	; 0xa5a <lcd_set_4bit+0x8ae>
	else if (__tmp > 65535)
     9dc:	6d 89       	ldd	r22, Y+21	; 0x15
     9de:	7e 89       	ldd	r23, Y+22	; 0x16
     9e0:	8f 89       	ldd	r24, Y+23	; 0x17
     9e2:	98 8d       	ldd	r25, Y+24	; 0x18
     9e4:	20 e0       	ldi	r18, 0x00	; 0
     9e6:	3f ef       	ldi	r19, 0xFF	; 255
     9e8:	4f e7       	ldi	r20, 0x7F	; 127
     9ea:	57 e4       	ldi	r21, 0x47	; 71
     9ec:	0e 94 7a 18 	call	0x30f4	; 0x30f4 <__gtsf2>
     9f0:	18 16       	cp	r1, r24
     9f2:	4c f5       	brge	.+82     	; 0xa46 <lcd_set_4bit+0x89a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     9f4:	69 8d       	ldd	r22, Y+25	; 0x19
     9f6:	7a 8d       	ldd	r23, Y+26	; 0x1a
     9f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     9fa:	9c 8d       	ldd	r25, Y+28	; 0x1c
     9fc:	20 e0       	ldi	r18, 0x00	; 0
     9fe:	30 e0       	ldi	r19, 0x00	; 0
     a00:	40 e2       	ldi	r20, 0x20	; 32
     a02:	51 e4       	ldi	r21, 0x41	; 65
     a04:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <__mulsf3>
     a08:	dc 01       	movw	r26, r24
     a0a:	cb 01       	movw	r24, r22
     a0c:	bc 01       	movw	r22, r24
     a0e:	cd 01       	movw	r24, r26
     a10:	0e 94 fe 14 	call	0x29fc	; 0x29fc <__fixunssfsi>
     a14:	dc 01       	movw	r26, r24
     a16:	cb 01       	movw	r24, r22
     a18:	9c 8b       	std	Y+20, r25	; 0x14
     a1a:	8b 8b       	std	Y+19, r24	; 0x13
     a1c:	0f c0       	rjmp	.+30     	; 0xa3c <lcd_set_4bit+0x890>
     a1e:	84 e1       	ldi	r24, 0x14	; 20
     a20:	91 e0       	ldi	r25, 0x01	; 1
     a22:	9a 8b       	std	Y+18, r25	; 0x12
     a24:	89 8b       	std	Y+17, r24	; 0x11
     a26:	89 89       	ldd	r24, Y+17	; 0x11
     a28:	9a 89       	ldd	r25, Y+18	; 0x12
     a2a:	01 97       	sbiw	r24, 0x01	; 1
     a2c:	f1 f7       	brne	.-4      	; 0xa2a <lcd_set_4bit+0x87e>
     a2e:	9a 8b       	std	Y+18, r25	; 0x12
     a30:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a32:	8b 89       	ldd	r24, Y+19	; 0x13
     a34:	9c 89       	ldd	r25, Y+20	; 0x14
     a36:	01 97       	sbiw	r24, 0x01	; 1
     a38:	9c 8b       	std	Y+20, r25	; 0x14
     a3a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a3c:	8b 89       	ldd	r24, Y+19	; 0x13
     a3e:	9c 89       	ldd	r25, Y+20	; 0x14
     a40:	00 97       	sbiw	r24, 0x00	; 0
     a42:	69 f7       	brne	.-38     	; 0xa1e <lcd_set_4bit+0x872>
     a44:	14 c0       	rjmp	.+40     	; 0xa6e <lcd_set_4bit+0x8c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a46:	6d 89       	ldd	r22, Y+21	; 0x15
     a48:	7e 89       	ldd	r23, Y+22	; 0x16
     a4a:	8f 89       	ldd	r24, Y+23	; 0x17
     a4c:	98 8d       	ldd	r25, Y+24	; 0x18
     a4e:	0e 94 fe 14 	call	0x29fc	; 0x29fc <__fixunssfsi>
     a52:	dc 01       	movw	r26, r24
     a54:	cb 01       	movw	r24, r22
     a56:	9c 8b       	std	Y+20, r25	; 0x14
     a58:	8b 8b       	std	Y+19, r24	; 0x13
     a5a:	8b 89       	ldd	r24, Y+19	; 0x13
     a5c:	9c 89       	ldd	r25, Y+20	; 0x14
     a5e:	98 8b       	std	Y+16, r25	; 0x10
     a60:	8f 87       	std	Y+15, r24	; 0x0f
     a62:	8f 85       	ldd	r24, Y+15	; 0x0f
     a64:	98 89       	ldd	r25, Y+16	; 0x10
     a66:	01 97       	sbiw	r24, 0x01	; 1
     a68:	f1 f7       	brne	.-4      	; 0xa66 <lcd_set_4bit+0x8ba>
     a6a:	98 8b       	std	Y+16, r25	; 0x10
     a6c:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     a6e:	a8 e2       	ldi	r26, 0x28	; 40
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	e8 e2       	ldi	r30, 0x28	; 40
     a74:	f0 e0       	ldi	r31, 0x00	; 0
     a76:	80 81       	ld	r24, Z
     a78:	8e 7f       	andi	r24, 0xFE	; 254
     a7a:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     a7c:	a8 e2       	ldi	r26, 0x28	; 40
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	e8 e2       	ldi	r30, 0x28	; 40
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	80 81       	ld	r24, Z
     a86:	8d 7f       	andi	r24, 0xFD	; 253
     a88:	8c 93       	st	X, r24
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
     a8a:	e8 e2       	ldi	r30, 0x28	; 40
     a8c:	f0 e0       	ldi	r31, 0x00	; 0
     a8e:	80 e2       	ldi	r24, 0x20	; 32
     a90:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     a92:	a8 e2       	ldi	r26, 0x28	; 40
     a94:	b0 e0       	ldi	r27, 0x00	; 0
     a96:	e8 e2       	ldi	r30, 0x28	; 40
     a98:	f0 e0       	ldi	r31, 0x00	; 0
     a9a:	80 81       	ld	r24, Z
     a9c:	84 60       	ori	r24, 0x04	; 4
     a9e:	8c 93       	st	X, r24
     aa0:	80 e0       	ldi	r24, 0x00	; 0
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 ea       	ldi	r26, 0xA0	; 160
     aa6:	b0 e4       	ldi	r27, 0x40	; 64
     aa8:	8b 87       	std	Y+11, r24	; 0x0b
     aaa:	9c 87       	std	Y+12, r25	; 0x0c
     aac:	ad 87       	std	Y+13, r26	; 0x0d
     aae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ab0:	6b 85       	ldd	r22, Y+11	; 0x0b
     ab2:	7c 85       	ldd	r23, Y+12	; 0x0c
     ab4:	8d 85       	ldd	r24, Y+13	; 0x0d
     ab6:	9e 85       	ldd	r25, Y+14	; 0x0e
     ab8:	2d ec       	ldi	r18, 0xCD	; 205
     aba:	3c ec       	ldi	r19, 0xCC	; 204
     abc:	4c e2       	ldi	r20, 0x2C	; 44
     abe:	55 e4       	ldi	r21, 0x45	; 69
     ac0:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <__mulsf3>
     ac4:	dc 01       	movw	r26, r24
     ac6:	cb 01       	movw	r24, r22
     ac8:	8f 83       	std	Y+7, r24	; 0x07
     aca:	98 87       	std	Y+8, r25	; 0x08
     acc:	a9 87       	std	Y+9, r26	; 0x09
     ace:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ad0:	6f 81       	ldd	r22, Y+7	; 0x07
     ad2:	78 85       	ldd	r23, Y+8	; 0x08
     ad4:	89 85       	ldd	r24, Y+9	; 0x09
     ad6:	9a 85       	ldd	r25, Y+10	; 0x0a
     ad8:	20 e0       	ldi	r18, 0x00	; 0
     ada:	30 e0       	ldi	r19, 0x00	; 0
     adc:	40 e8       	ldi	r20, 0x80	; 128
     ade:	5f e3       	ldi	r21, 0x3F	; 63
     ae0:	0e 94 da 18 	call	0x31b4	; 0x31b4 <__ltsf2>
     ae4:	88 23       	and	r24, r24
     ae6:	2c f4       	brge	.+10     	; 0xaf2 <lcd_set_4bit+0x946>
		__ticks = 1;
     ae8:	81 e0       	ldi	r24, 0x01	; 1
     aea:	90 e0       	ldi	r25, 0x00	; 0
     aec:	9e 83       	std	Y+6, r25	; 0x06
     aee:	8d 83       	std	Y+5, r24	; 0x05
     af0:	3f c0       	rjmp	.+126    	; 0xb70 <lcd_set_4bit+0x9c4>
	else if (__tmp > 65535)
     af2:	6f 81       	ldd	r22, Y+7	; 0x07
     af4:	78 85       	ldd	r23, Y+8	; 0x08
     af6:	89 85       	ldd	r24, Y+9	; 0x09
     af8:	9a 85       	ldd	r25, Y+10	; 0x0a
     afa:	20 e0       	ldi	r18, 0x00	; 0
     afc:	3f ef       	ldi	r19, 0xFF	; 255
     afe:	4f e7       	ldi	r20, 0x7F	; 127
     b00:	57 e4       	ldi	r21, 0x47	; 71
     b02:	0e 94 7a 18 	call	0x30f4	; 0x30f4 <__gtsf2>
     b06:	18 16       	cp	r1, r24
     b08:	4c f5       	brge	.+82     	; 0xb5c <lcd_set_4bit+0x9b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b0a:	6b 85       	ldd	r22, Y+11	; 0x0b
     b0c:	7c 85       	ldd	r23, Y+12	; 0x0c
     b0e:	8d 85       	ldd	r24, Y+13	; 0x0d
     b10:	9e 85       	ldd	r25, Y+14	; 0x0e
     b12:	20 e0       	ldi	r18, 0x00	; 0
     b14:	30 e0       	ldi	r19, 0x00	; 0
     b16:	40 e2       	ldi	r20, 0x20	; 32
     b18:	51 e4       	ldi	r21, 0x41	; 65
     b1a:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <__mulsf3>
     b1e:	dc 01       	movw	r26, r24
     b20:	cb 01       	movw	r24, r22
     b22:	bc 01       	movw	r22, r24
     b24:	cd 01       	movw	r24, r26
     b26:	0e 94 fe 14 	call	0x29fc	; 0x29fc <__fixunssfsi>
     b2a:	dc 01       	movw	r26, r24
     b2c:	cb 01       	movw	r24, r22
     b2e:	9e 83       	std	Y+6, r25	; 0x06
     b30:	8d 83       	std	Y+5, r24	; 0x05
     b32:	0f c0       	rjmp	.+30     	; 0xb52 <lcd_set_4bit+0x9a6>
     b34:	84 e1       	ldi	r24, 0x14	; 20
     b36:	91 e0       	ldi	r25, 0x01	; 1
     b38:	9c 83       	std	Y+4, r25	; 0x04
     b3a:	8b 83       	std	Y+3, r24	; 0x03
     b3c:	8b 81       	ldd	r24, Y+3	; 0x03
     b3e:	9c 81       	ldd	r25, Y+4	; 0x04
     b40:	01 97       	sbiw	r24, 0x01	; 1
     b42:	f1 f7       	brne	.-4      	; 0xb40 <lcd_set_4bit+0x994>
     b44:	9c 83       	std	Y+4, r25	; 0x04
     b46:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b48:	8d 81       	ldd	r24, Y+5	; 0x05
     b4a:	9e 81       	ldd	r25, Y+6	; 0x06
     b4c:	01 97       	sbiw	r24, 0x01	; 1
     b4e:	9e 83       	std	Y+6, r25	; 0x06
     b50:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b52:	8d 81       	ldd	r24, Y+5	; 0x05
     b54:	9e 81       	ldd	r25, Y+6	; 0x06
     b56:	00 97       	sbiw	r24, 0x00	; 0
     b58:	69 f7       	brne	.-38     	; 0xb34 <lcd_set_4bit+0x988>
     b5a:	14 c0       	rjmp	.+40     	; 0xb84 <lcd_set_4bit+0x9d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b5c:	6f 81       	ldd	r22, Y+7	; 0x07
     b5e:	78 85       	ldd	r23, Y+8	; 0x08
     b60:	89 85       	ldd	r24, Y+9	; 0x09
     b62:	9a 85       	ldd	r25, Y+10	; 0x0a
     b64:	0e 94 fe 14 	call	0x29fc	; 0x29fc <__fixunssfsi>
     b68:	dc 01       	movw	r26, r24
     b6a:	cb 01       	movw	r24, r22
     b6c:	9e 83       	std	Y+6, r25	; 0x06
     b6e:	8d 83       	std	Y+5, r24	; 0x05
     b70:	8d 81       	ldd	r24, Y+5	; 0x05
     b72:	9e 81       	ldd	r25, Y+6	; 0x06
     b74:	9a 83       	std	Y+2, r25	; 0x02
     b76:	89 83       	std	Y+1, r24	; 0x01
     b78:	89 81       	ldd	r24, Y+1	; 0x01
     b7a:	9a 81       	ldd	r25, Y+2	; 0x02
     b7c:	01 97       	sbiw	r24, 0x01	; 1
     b7e:	f1 f7       	brne	.-4      	; 0xb7c <lcd_set_4bit+0x9d0>
     b80:	9a 83       	std	Y+2, r25	; 0x02
     b82:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     b84:	a8 e2       	ldi	r26, 0x28	; 40
     b86:	b0 e0       	ldi	r27, 0x00	; 0
     b88:	e8 e2       	ldi	r30, 0x28	; 40
     b8a:	f0 e0       	ldi	r31, 0x00	; 0
     b8c:	80 81       	ld	r24, Z
     b8e:	8b 7f       	andi	r24, 0xFB	; 251
     b90:	8c 93       	st	X, r24

	
}
     b92:	c0 59       	subi	r28, 0x90	; 144
     b94:	df 4f       	sbci	r29, 0xFF	; 255
     b96:	0f b6       	in	r0, 0x3f	; 63
     b98:	f8 94       	cli
     b9a:	de bf       	out	0x3e, r29	; 62
     b9c:	0f be       	out	0x3f, r0	; 63
     b9e:	cd bf       	out	0x3d, r28	; 61
     ba0:	cf 91       	pop	r28
     ba2:	df 91       	pop	r29
     ba4:	1f 91       	pop	r17
     ba6:	0f 91       	pop	r16
     ba8:	08 95       	ret

00000baa <lcd_init>:

/*****Function to Initialize LCD*****/
void lcd_init()
{
     baa:	df 93       	push	r29
     bac:	cf 93       	push	r28
     bae:	cd b7       	in	r28, 0x3d	; 61
     bb0:	de b7       	in	r29, 0x3e	; 62
     bb2:	2e 97       	sbiw	r28, 0x0e	; 14
     bb4:	0f b6       	in	r0, 0x3f	; 63
     bb6:	f8 94       	cli
     bb8:	de bf       	out	0x3e, r29	; 62
     bba:	0f be       	out	0x3f, r0	; 63
     bbc:	cd bf       	out	0x3d, r28	; 61
     bbe:	80 e0       	ldi	r24, 0x00	; 0
     bc0:	90 e0       	ldi	r25, 0x00	; 0
     bc2:	a0 e8       	ldi	r26, 0x80	; 128
     bc4:	bf e3       	ldi	r27, 0x3F	; 63
     bc6:	8b 87       	std	Y+11, r24	; 0x0b
     bc8:	9c 87       	std	Y+12, r25	; 0x0c
     bca:	ad 87       	std	Y+13, r26	; 0x0d
     bcc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bce:	6b 85       	ldd	r22, Y+11	; 0x0b
     bd0:	7c 85       	ldd	r23, Y+12	; 0x0c
     bd2:	8d 85       	ldd	r24, Y+13	; 0x0d
     bd4:	9e 85       	ldd	r25, Y+14	; 0x0e
     bd6:	2d ec       	ldi	r18, 0xCD	; 205
     bd8:	3c ec       	ldi	r19, 0xCC	; 204
     bda:	4c e2       	ldi	r20, 0x2C	; 44
     bdc:	55 e4       	ldi	r21, 0x45	; 69
     bde:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <__mulsf3>
     be2:	dc 01       	movw	r26, r24
     be4:	cb 01       	movw	r24, r22
     be6:	8f 83       	std	Y+7, r24	; 0x07
     be8:	98 87       	std	Y+8, r25	; 0x08
     bea:	a9 87       	std	Y+9, r26	; 0x09
     bec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     bee:	6f 81       	ldd	r22, Y+7	; 0x07
     bf0:	78 85       	ldd	r23, Y+8	; 0x08
     bf2:	89 85       	ldd	r24, Y+9	; 0x09
     bf4:	9a 85       	ldd	r25, Y+10	; 0x0a
     bf6:	20 e0       	ldi	r18, 0x00	; 0
     bf8:	30 e0       	ldi	r19, 0x00	; 0
     bfa:	40 e8       	ldi	r20, 0x80	; 128
     bfc:	5f e3       	ldi	r21, 0x3F	; 63
     bfe:	0e 94 da 18 	call	0x31b4	; 0x31b4 <__ltsf2>
     c02:	88 23       	and	r24, r24
     c04:	2c f4       	brge	.+10     	; 0xc10 <lcd_init+0x66>
		__ticks = 1;
     c06:	81 e0       	ldi	r24, 0x01	; 1
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	9e 83       	std	Y+6, r25	; 0x06
     c0c:	8d 83       	std	Y+5, r24	; 0x05
     c0e:	3f c0       	rjmp	.+126    	; 0xc8e <lcd_init+0xe4>
	else if (__tmp > 65535)
     c10:	6f 81       	ldd	r22, Y+7	; 0x07
     c12:	78 85       	ldd	r23, Y+8	; 0x08
     c14:	89 85       	ldd	r24, Y+9	; 0x09
     c16:	9a 85       	ldd	r25, Y+10	; 0x0a
     c18:	20 e0       	ldi	r18, 0x00	; 0
     c1a:	3f ef       	ldi	r19, 0xFF	; 255
     c1c:	4f e7       	ldi	r20, 0x7F	; 127
     c1e:	57 e4       	ldi	r21, 0x47	; 71
     c20:	0e 94 7a 18 	call	0x30f4	; 0x30f4 <__gtsf2>
     c24:	18 16       	cp	r1, r24
     c26:	4c f5       	brge	.+82     	; 0xc7a <lcd_init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c28:	6b 85       	ldd	r22, Y+11	; 0x0b
     c2a:	7c 85       	ldd	r23, Y+12	; 0x0c
     c2c:	8d 85       	ldd	r24, Y+13	; 0x0d
     c2e:	9e 85       	ldd	r25, Y+14	; 0x0e
     c30:	20 e0       	ldi	r18, 0x00	; 0
     c32:	30 e0       	ldi	r19, 0x00	; 0
     c34:	40 e2       	ldi	r20, 0x20	; 32
     c36:	51 e4       	ldi	r21, 0x41	; 65
     c38:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <__mulsf3>
     c3c:	dc 01       	movw	r26, r24
     c3e:	cb 01       	movw	r24, r22
     c40:	bc 01       	movw	r22, r24
     c42:	cd 01       	movw	r24, r26
     c44:	0e 94 fe 14 	call	0x29fc	; 0x29fc <__fixunssfsi>
     c48:	dc 01       	movw	r26, r24
     c4a:	cb 01       	movw	r24, r22
     c4c:	9e 83       	std	Y+6, r25	; 0x06
     c4e:	8d 83       	std	Y+5, r24	; 0x05
     c50:	0f c0       	rjmp	.+30     	; 0xc70 <lcd_init+0xc6>
     c52:	84 e1       	ldi	r24, 0x14	; 20
     c54:	91 e0       	ldi	r25, 0x01	; 1
     c56:	9c 83       	std	Y+4, r25	; 0x04
     c58:	8b 83       	std	Y+3, r24	; 0x03
     c5a:	8b 81       	ldd	r24, Y+3	; 0x03
     c5c:	9c 81       	ldd	r25, Y+4	; 0x04
     c5e:	01 97       	sbiw	r24, 0x01	; 1
     c60:	f1 f7       	brne	.-4      	; 0xc5e <lcd_init+0xb4>
     c62:	9c 83       	std	Y+4, r25	; 0x04
     c64:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c66:	8d 81       	ldd	r24, Y+5	; 0x05
     c68:	9e 81       	ldd	r25, Y+6	; 0x06
     c6a:	01 97       	sbiw	r24, 0x01	; 1
     c6c:	9e 83       	std	Y+6, r25	; 0x06
     c6e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c70:	8d 81       	ldd	r24, Y+5	; 0x05
     c72:	9e 81       	ldd	r25, Y+6	; 0x06
     c74:	00 97       	sbiw	r24, 0x00	; 0
     c76:	69 f7       	brne	.-38     	; 0xc52 <lcd_init+0xa8>
     c78:	14 c0       	rjmp	.+40     	; 0xca2 <lcd_init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c7a:	6f 81       	ldd	r22, Y+7	; 0x07
     c7c:	78 85       	ldd	r23, Y+8	; 0x08
     c7e:	89 85       	ldd	r24, Y+9	; 0x09
     c80:	9a 85       	ldd	r25, Y+10	; 0x0a
     c82:	0e 94 fe 14 	call	0x29fc	; 0x29fc <__fixunssfsi>
     c86:	dc 01       	movw	r26, r24
     c88:	cb 01       	movw	r24, r22
     c8a:	9e 83       	std	Y+6, r25	; 0x06
     c8c:	8d 83       	std	Y+5, r24	; 0x05
     c8e:	8d 81       	ldd	r24, Y+5	; 0x05
     c90:	9e 81       	ldd	r25, Y+6	; 0x06
     c92:	9a 83       	std	Y+2, r25	; 0x02
     c94:	89 83       	std	Y+1, r24	; 0x01
     c96:	89 81       	ldd	r24, Y+1	; 0x01
     c98:	9a 81       	ldd	r25, Y+2	; 0x02
     c9a:	01 97       	sbiw	r24, 0x01	; 1
     c9c:	f1 f7       	brne	.-4      	; 0xc9a <lcd_init+0xf0>
     c9e:	9a 83       	std	Y+2, r25	; 0x02
     ca0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
     ca2:	88 e2       	ldi	r24, 0x28	; 40
     ca4:	0e 94 69 06 	call	0xcd2	; 0xcd2 <lcd_wr_command>
	lcd_wr_command(0x01);
     ca8:	81 e0       	ldi	r24, 0x01	; 1
     caa:	0e 94 69 06 	call	0xcd2	; 0xcd2 <lcd_wr_command>
	lcd_wr_command(0x06);
     cae:	86 e0       	ldi	r24, 0x06	; 6
     cb0:	0e 94 69 06 	call	0xcd2	; 0xcd2 <lcd_wr_command>
	lcd_wr_command(0x0E);
     cb4:	8e e0       	ldi	r24, 0x0E	; 14
     cb6:	0e 94 69 06 	call	0xcd2	; 0xcd2 <lcd_wr_command>
	lcd_wr_command(0x80);
     cba:	80 e8       	ldi	r24, 0x80	; 128
     cbc:	0e 94 69 06 	call	0xcd2	; 0xcd2 <lcd_wr_command>
		
}
     cc0:	2e 96       	adiw	r28, 0x0e	; 14
     cc2:	0f b6       	in	r0, 0x3f	; 63
     cc4:	f8 94       	cli
     cc6:	de bf       	out	0x3e, r29	; 62
     cc8:	0f be       	out	0x3f, r0	; 63
     cca:	cd bf       	out	0x3d, r28	; 61
     ccc:	cf 91       	pop	r28
     cce:	df 91       	pop	r29
     cd0:	08 95       	ret

00000cd2 <lcd_wr_command>:

	 
/*****Function to Write Command on LCD*****/
void lcd_wr_command(unsigned char cmd)
{
     cd2:	df 93       	push	r29
     cd4:	cf 93       	push	r28
     cd6:	cd b7       	in	r28, 0x3d	; 61
     cd8:	de b7       	in	r29, 0x3e	; 62
     cda:	6e 97       	sbiw	r28, 0x1e	; 30
     cdc:	0f b6       	in	r0, 0x3f	; 63
     cde:	f8 94       	cli
     ce0:	de bf       	out	0x3e, r29	; 62
     ce2:	0f be       	out	0x3f, r0	; 63
     ce4:	cd bf       	out	0x3d, r28	; 61
     ce6:	8e 8f       	std	Y+30, r24	; 0x1e
	unsigned char temp;
	temp = cmd;
     ce8:	8e 8d       	ldd	r24, Y+30	; 0x1e
     cea:	8d 8f       	std	Y+29, r24	; 0x1d
	temp = temp & 0xF0;
     cec:	8d 8d       	ldd	r24, Y+29	; 0x1d
     cee:	80 7f       	andi	r24, 0xF0	; 240
     cf0:	8d 8f       	std	Y+29, r24	; 0x1d
	lcd_port &= 0x0F;
     cf2:	a8 e2       	ldi	r26, 0x28	; 40
     cf4:	b0 e0       	ldi	r27, 0x00	; 0
     cf6:	e8 e2       	ldi	r30, 0x28	; 40
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	80 81       	ld	r24, Z
     cfc:	8f 70       	andi	r24, 0x0F	; 15
     cfe:	8c 93       	st	X, r24
	lcd_port |= temp;
     d00:	a8 e2       	ldi	r26, 0x28	; 40
     d02:	b0 e0       	ldi	r27, 0x00	; 0
     d04:	e8 e2       	ldi	r30, 0x28	; 40
     d06:	f0 e0       	ldi	r31, 0x00	; 0
     d08:	90 81       	ld	r25, Z
     d0a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d0c:	89 2b       	or	r24, r25
     d0e:	8c 93       	st	X, r24
	cbit(lcd_port,RS);
     d10:	a8 e2       	ldi	r26, 0x28	; 40
     d12:	b0 e0       	ldi	r27, 0x00	; 0
     d14:	e8 e2       	ldi	r30, 0x28	; 40
     d16:	f0 e0       	ldi	r31, 0x00	; 0
     d18:	80 81       	ld	r24, Z
     d1a:	8e 7f       	andi	r24, 0xFE	; 254
     d1c:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
     d1e:	a8 e2       	ldi	r26, 0x28	; 40
     d20:	b0 e0       	ldi	r27, 0x00	; 0
     d22:	e8 e2       	ldi	r30, 0x28	; 40
     d24:	f0 e0       	ldi	r31, 0x00	; 0
     d26:	80 81       	ld	r24, Z
     d28:	8d 7f       	andi	r24, 0xFD	; 253
     d2a:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
     d2c:	a8 e2       	ldi	r26, 0x28	; 40
     d2e:	b0 e0       	ldi	r27, 0x00	; 0
     d30:	e8 e2       	ldi	r30, 0x28	; 40
     d32:	f0 e0       	ldi	r31, 0x00	; 0
     d34:	80 81       	ld	r24, Z
     d36:	84 60       	ori	r24, 0x04	; 4
     d38:	8c 93       	st	X, r24
     d3a:	80 e0       	ldi	r24, 0x00	; 0
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	a0 ea       	ldi	r26, 0xA0	; 160
     d40:	b0 e4       	ldi	r27, 0x40	; 64
     d42:	89 8f       	std	Y+25, r24	; 0x19
     d44:	9a 8f       	std	Y+26, r25	; 0x1a
     d46:	ab 8f       	std	Y+27, r26	; 0x1b
     d48:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d4a:	69 8d       	ldd	r22, Y+25	; 0x19
     d4c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d4e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d50:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d52:	2d ec       	ldi	r18, 0xCD	; 205
     d54:	3c ec       	ldi	r19, 0xCC	; 204
     d56:	4c e2       	ldi	r20, 0x2C	; 44
     d58:	55 e4       	ldi	r21, 0x45	; 69
     d5a:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <__mulsf3>
     d5e:	dc 01       	movw	r26, r24
     d60:	cb 01       	movw	r24, r22
     d62:	8d 8b       	std	Y+21, r24	; 0x15
     d64:	9e 8b       	std	Y+22, r25	; 0x16
     d66:	af 8b       	std	Y+23, r26	; 0x17
     d68:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     d6a:	6d 89       	ldd	r22, Y+21	; 0x15
     d6c:	7e 89       	ldd	r23, Y+22	; 0x16
     d6e:	8f 89       	ldd	r24, Y+23	; 0x17
     d70:	98 8d       	ldd	r25, Y+24	; 0x18
     d72:	20 e0       	ldi	r18, 0x00	; 0
     d74:	30 e0       	ldi	r19, 0x00	; 0
     d76:	40 e8       	ldi	r20, 0x80	; 128
     d78:	5f e3       	ldi	r21, 0x3F	; 63
     d7a:	0e 94 da 18 	call	0x31b4	; 0x31b4 <__ltsf2>
     d7e:	88 23       	and	r24, r24
     d80:	2c f4       	brge	.+10     	; 0xd8c <lcd_wr_command+0xba>
		__ticks = 1;
     d82:	81 e0       	ldi	r24, 0x01	; 1
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	9c 8b       	std	Y+20, r25	; 0x14
     d88:	8b 8b       	std	Y+19, r24	; 0x13
     d8a:	3f c0       	rjmp	.+126    	; 0xe0a <lcd_wr_command+0x138>
	else if (__tmp > 65535)
     d8c:	6d 89       	ldd	r22, Y+21	; 0x15
     d8e:	7e 89       	ldd	r23, Y+22	; 0x16
     d90:	8f 89       	ldd	r24, Y+23	; 0x17
     d92:	98 8d       	ldd	r25, Y+24	; 0x18
     d94:	20 e0       	ldi	r18, 0x00	; 0
     d96:	3f ef       	ldi	r19, 0xFF	; 255
     d98:	4f e7       	ldi	r20, 0x7F	; 127
     d9a:	57 e4       	ldi	r21, 0x47	; 71
     d9c:	0e 94 7a 18 	call	0x30f4	; 0x30f4 <__gtsf2>
     da0:	18 16       	cp	r1, r24
     da2:	4c f5       	brge	.+82     	; 0xdf6 <lcd_wr_command+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     da4:	69 8d       	ldd	r22, Y+25	; 0x19
     da6:	7a 8d       	ldd	r23, Y+26	; 0x1a
     da8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     daa:	9c 8d       	ldd	r25, Y+28	; 0x1c
     dac:	20 e0       	ldi	r18, 0x00	; 0
     dae:	30 e0       	ldi	r19, 0x00	; 0
     db0:	40 e2       	ldi	r20, 0x20	; 32
     db2:	51 e4       	ldi	r21, 0x41	; 65
     db4:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <__mulsf3>
     db8:	dc 01       	movw	r26, r24
     dba:	cb 01       	movw	r24, r22
     dbc:	bc 01       	movw	r22, r24
     dbe:	cd 01       	movw	r24, r26
     dc0:	0e 94 fe 14 	call	0x29fc	; 0x29fc <__fixunssfsi>
     dc4:	dc 01       	movw	r26, r24
     dc6:	cb 01       	movw	r24, r22
     dc8:	9c 8b       	std	Y+20, r25	; 0x14
     dca:	8b 8b       	std	Y+19, r24	; 0x13
     dcc:	0f c0       	rjmp	.+30     	; 0xdec <lcd_wr_command+0x11a>
     dce:	84 e1       	ldi	r24, 0x14	; 20
     dd0:	91 e0       	ldi	r25, 0x01	; 1
     dd2:	9a 8b       	std	Y+18, r25	; 0x12
     dd4:	89 8b       	std	Y+17, r24	; 0x11
     dd6:	89 89       	ldd	r24, Y+17	; 0x11
     dd8:	9a 89       	ldd	r25, Y+18	; 0x12
     dda:	01 97       	sbiw	r24, 0x01	; 1
     ddc:	f1 f7       	brne	.-4      	; 0xdda <lcd_wr_command+0x108>
     dde:	9a 8b       	std	Y+18, r25	; 0x12
     de0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     de2:	8b 89       	ldd	r24, Y+19	; 0x13
     de4:	9c 89       	ldd	r25, Y+20	; 0x14
     de6:	01 97       	sbiw	r24, 0x01	; 1
     de8:	9c 8b       	std	Y+20, r25	; 0x14
     dea:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dec:	8b 89       	ldd	r24, Y+19	; 0x13
     dee:	9c 89       	ldd	r25, Y+20	; 0x14
     df0:	00 97       	sbiw	r24, 0x00	; 0
     df2:	69 f7       	brne	.-38     	; 0xdce <lcd_wr_command+0xfc>
     df4:	14 c0       	rjmp	.+40     	; 0xe1e <lcd_wr_command+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     df6:	6d 89       	ldd	r22, Y+21	; 0x15
     df8:	7e 89       	ldd	r23, Y+22	; 0x16
     dfa:	8f 89       	ldd	r24, Y+23	; 0x17
     dfc:	98 8d       	ldd	r25, Y+24	; 0x18
     dfe:	0e 94 fe 14 	call	0x29fc	; 0x29fc <__fixunssfsi>
     e02:	dc 01       	movw	r26, r24
     e04:	cb 01       	movw	r24, r22
     e06:	9c 8b       	std	Y+20, r25	; 0x14
     e08:	8b 8b       	std	Y+19, r24	; 0x13
     e0a:	8b 89       	ldd	r24, Y+19	; 0x13
     e0c:	9c 89       	ldd	r25, Y+20	; 0x14
     e0e:	98 8b       	std	Y+16, r25	; 0x10
     e10:	8f 87       	std	Y+15, r24	; 0x0f
     e12:	8f 85       	ldd	r24, Y+15	; 0x0f
     e14:	98 89       	ldd	r25, Y+16	; 0x10
     e16:	01 97       	sbiw	r24, 0x01	; 1
     e18:	f1 f7       	brne	.-4      	; 0xe16 <lcd_wr_command+0x144>
     e1a:	98 8b       	std	Y+16, r25	; 0x10
     e1c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	cbit(lcd_port,EN);
     e1e:	a8 e2       	ldi	r26, 0x28	; 40
     e20:	b0 e0       	ldi	r27, 0x00	; 0
     e22:	e8 e2       	ldi	r30, 0x28	; 40
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	80 81       	ld	r24, Z
     e28:	8b 7f       	andi	r24, 0xFB	; 251
     e2a:	8c 93       	st	X, r24
	
	cmd = cmd & 0x0F;
     e2c:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e2e:	8f 70       	andi	r24, 0x0F	; 15
     e30:	8e 8f       	std	Y+30, r24	; 0x1e
	cmd = cmd<<4;
     e32:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e34:	82 95       	swap	r24
     e36:	80 7f       	andi	r24, 0xF0	; 240
     e38:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
     e3a:	a8 e2       	ldi	r26, 0x28	; 40
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	e8 e2       	ldi	r30, 0x28	; 40
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	8f 70       	andi	r24, 0x0F	; 15
     e46:	8c 93       	st	X, r24
	lcd_port |= cmd;
     e48:	a8 e2       	ldi	r26, 0x28	; 40
     e4a:	b0 e0       	ldi	r27, 0x00	; 0
     e4c:	e8 e2       	ldi	r30, 0x28	; 40
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	90 81       	ld	r25, Z
     e52:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e54:	89 2b       	or	r24, r25
     e56:	8c 93       	st	X, r24
	cbit(lcd_port,RS);
     e58:	a8 e2       	ldi	r26, 0x28	; 40
     e5a:	b0 e0       	ldi	r27, 0x00	; 0
     e5c:	e8 e2       	ldi	r30, 0x28	; 40
     e5e:	f0 e0       	ldi	r31, 0x00	; 0
     e60:	80 81       	ld	r24, Z
     e62:	8e 7f       	andi	r24, 0xFE	; 254
     e64:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
     e66:	a8 e2       	ldi	r26, 0x28	; 40
     e68:	b0 e0       	ldi	r27, 0x00	; 0
     e6a:	e8 e2       	ldi	r30, 0x28	; 40
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	80 81       	ld	r24, Z
     e70:	8d 7f       	andi	r24, 0xFD	; 253
     e72:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
     e74:	a8 e2       	ldi	r26, 0x28	; 40
     e76:	b0 e0       	ldi	r27, 0x00	; 0
     e78:	e8 e2       	ldi	r30, 0x28	; 40
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	80 81       	ld	r24, Z
     e7e:	84 60       	ori	r24, 0x04	; 4
     e80:	8c 93       	st	X, r24
     e82:	80 e0       	ldi	r24, 0x00	; 0
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	a0 ea       	ldi	r26, 0xA0	; 160
     e88:	b0 e4       	ldi	r27, 0x40	; 64
     e8a:	8b 87       	std	Y+11, r24	; 0x0b
     e8c:	9c 87       	std	Y+12, r25	; 0x0c
     e8e:	ad 87       	std	Y+13, r26	; 0x0d
     e90:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e92:	6b 85       	ldd	r22, Y+11	; 0x0b
     e94:	7c 85       	ldd	r23, Y+12	; 0x0c
     e96:	8d 85       	ldd	r24, Y+13	; 0x0d
     e98:	9e 85       	ldd	r25, Y+14	; 0x0e
     e9a:	2d ec       	ldi	r18, 0xCD	; 205
     e9c:	3c ec       	ldi	r19, 0xCC	; 204
     e9e:	4c e2       	ldi	r20, 0x2C	; 44
     ea0:	55 e4       	ldi	r21, 0x45	; 69
     ea2:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <__mulsf3>
     ea6:	dc 01       	movw	r26, r24
     ea8:	cb 01       	movw	r24, r22
     eaa:	8f 83       	std	Y+7, r24	; 0x07
     eac:	98 87       	std	Y+8, r25	; 0x08
     eae:	a9 87       	std	Y+9, r26	; 0x09
     eb0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     eb2:	6f 81       	ldd	r22, Y+7	; 0x07
     eb4:	78 85       	ldd	r23, Y+8	; 0x08
     eb6:	89 85       	ldd	r24, Y+9	; 0x09
     eb8:	9a 85       	ldd	r25, Y+10	; 0x0a
     eba:	20 e0       	ldi	r18, 0x00	; 0
     ebc:	30 e0       	ldi	r19, 0x00	; 0
     ebe:	40 e8       	ldi	r20, 0x80	; 128
     ec0:	5f e3       	ldi	r21, 0x3F	; 63
     ec2:	0e 94 da 18 	call	0x31b4	; 0x31b4 <__ltsf2>
     ec6:	88 23       	and	r24, r24
     ec8:	2c f4       	brge	.+10     	; 0xed4 <lcd_wr_command+0x202>
		__ticks = 1;
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	9e 83       	std	Y+6, r25	; 0x06
     ed0:	8d 83       	std	Y+5, r24	; 0x05
     ed2:	3f c0       	rjmp	.+126    	; 0xf52 <lcd_wr_command+0x280>
	else if (__tmp > 65535)
     ed4:	6f 81       	ldd	r22, Y+7	; 0x07
     ed6:	78 85       	ldd	r23, Y+8	; 0x08
     ed8:	89 85       	ldd	r24, Y+9	; 0x09
     eda:	9a 85       	ldd	r25, Y+10	; 0x0a
     edc:	20 e0       	ldi	r18, 0x00	; 0
     ede:	3f ef       	ldi	r19, 0xFF	; 255
     ee0:	4f e7       	ldi	r20, 0x7F	; 127
     ee2:	57 e4       	ldi	r21, 0x47	; 71
     ee4:	0e 94 7a 18 	call	0x30f4	; 0x30f4 <__gtsf2>
     ee8:	18 16       	cp	r1, r24
     eea:	4c f5       	brge	.+82     	; 0xf3e <lcd_wr_command+0x26c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     eec:	6b 85       	ldd	r22, Y+11	; 0x0b
     eee:	7c 85       	ldd	r23, Y+12	; 0x0c
     ef0:	8d 85       	ldd	r24, Y+13	; 0x0d
     ef2:	9e 85       	ldd	r25, Y+14	; 0x0e
     ef4:	20 e0       	ldi	r18, 0x00	; 0
     ef6:	30 e0       	ldi	r19, 0x00	; 0
     ef8:	40 e2       	ldi	r20, 0x20	; 32
     efa:	51 e4       	ldi	r21, 0x41	; 65
     efc:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <__mulsf3>
     f00:	dc 01       	movw	r26, r24
     f02:	cb 01       	movw	r24, r22
     f04:	bc 01       	movw	r22, r24
     f06:	cd 01       	movw	r24, r26
     f08:	0e 94 fe 14 	call	0x29fc	; 0x29fc <__fixunssfsi>
     f0c:	dc 01       	movw	r26, r24
     f0e:	cb 01       	movw	r24, r22
     f10:	9e 83       	std	Y+6, r25	; 0x06
     f12:	8d 83       	std	Y+5, r24	; 0x05
     f14:	0f c0       	rjmp	.+30     	; 0xf34 <lcd_wr_command+0x262>
     f16:	84 e1       	ldi	r24, 0x14	; 20
     f18:	91 e0       	ldi	r25, 0x01	; 1
     f1a:	9c 83       	std	Y+4, r25	; 0x04
     f1c:	8b 83       	std	Y+3, r24	; 0x03
     f1e:	8b 81       	ldd	r24, Y+3	; 0x03
     f20:	9c 81       	ldd	r25, Y+4	; 0x04
     f22:	01 97       	sbiw	r24, 0x01	; 1
     f24:	f1 f7       	brne	.-4      	; 0xf22 <lcd_wr_command+0x250>
     f26:	9c 83       	std	Y+4, r25	; 0x04
     f28:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f2a:	8d 81       	ldd	r24, Y+5	; 0x05
     f2c:	9e 81       	ldd	r25, Y+6	; 0x06
     f2e:	01 97       	sbiw	r24, 0x01	; 1
     f30:	9e 83       	std	Y+6, r25	; 0x06
     f32:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f34:	8d 81       	ldd	r24, Y+5	; 0x05
     f36:	9e 81       	ldd	r25, Y+6	; 0x06
     f38:	00 97       	sbiw	r24, 0x00	; 0
     f3a:	69 f7       	brne	.-38     	; 0xf16 <lcd_wr_command+0x244>
     f3c:	14 c0       	rjmp	.+40     	; 0xf66 <lcd_wr_command+0x294>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f3e:	6f 81       	ldd	r22, Y+7	; 0x07
     f40:	78 85       	ldd	r23, Y+8	; 0x08
     f42:	89 85       	ldd	r24, Y+9	; 0x09
     f44:	9a 85       	ldd	r25, Y+10	; 0x0a
     f46:	0e 94 fe 14 	call	0x29fc	; 0x29fc <__fixunssfsi>
     f4a:	dc 01       	movw	r26, r24
     f4c:	cb 01       	movw	r24, r22
     f4e:	9e 83       	std	Y+6, r25	; 0x06
     f50:	8d 83       	std	Y+5, r24	; 0x05
     f52:	8d 81       	ldd	r24, Y+5	; 0x05
     f54:	9e 81       	ldd	r25, Y+6	; 0x06
     f56:	9a 83       	std	Y+2, r25	; 0x02
     f58:	89 83       	std	Y+1, r24	; 0x01
     f5a:	89 81       	ldd	r24, Y+1	; 0x01
     f5c:	9a 81       	ldd	r25, Y+2	; 0x02
     f5e:	01 97       	sbiw	r24, 0x01	; 1
     f60:	f1 f7       	brne	.-4      	; 0xf5e <lcd_wr_command+0x28c>
     f62:	9a 83       	std	Y+2, r25	; 0x02
     f64:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	cbit(lcd_port,EN);
     f66:	a8 e2       	ldi	r26, 0x28	; 40
     f68:	b0 e0       	ldi	r27, 0x00	; 0
     f6a:	e8 e2       	ldi	r30, 0x28	; 40
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	80 81       	ld	r24, Z
     f70:	8b 7f       	andi	r24, 0xFB	; 251
     f72:	8c 93       	st	X, r24
}
     f74:	6e 96       	adiw	r28, 0x1e	; 30
     f76:	0f b6       	in	r0, 0x3f	; 63
     f78:	f8 94       	cli
     f7a:	de bf       	out	0x3e, r29	; 62
     f7c:	0f be       	out	0x3f, r0	; 63
     f7e:	cd bf       	out	0x3d, r28	; 61
     f80:	cf 91       	pop	r28
     f82:	df 91       	pop	r29
     f84:	08 95       	ret

00000f86 <lcd_wr_char>:

/*****Function to Write Data on LCD*****/
void lcd_wr_char(char letter)
{
     f86:	df 93       	push	r29
     f88:	cf 93       	push	r28
     f8a:	cd b7       	in	r28, 0x3d	; 61
     f8c:	de b7       	in	r29, 0x3e	; 62
     f8e:	6e 97       	sbiw	r28, 0x1e	; 30
     f90:	0f b6       	in	r0, 0x3f	; 63
     f92:	f8 94       	cli
     f94:	de bf       	out	0x3e, r29	; 62
     f96:	0f be       	out	0x3f, r0	; 63
     f98:	cd bf       	out	0x3d, r28	; 61
     f9a:	8e 8f       	std	Y+30, r24	; 0x1e
	char temp;
	temp = letter;
     f9c:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f9e:	8d 8f       	std	Y+29, r24	; 0x1d
	temp = (temp & 0xF0);
     fa0:	8d 8d       	ldd	r24, Y+29	; 0x1d
     fa2:	80 7f       	andi	r24, 0xF0	; 240
     fa4:	8d 8f       	std	Y+29, r24	; 0x1d
	lcd_port &= 0x0F;
     fa6:	a8 e2       	ldi	r26, 0x28	; 40
     fa8:	b0 e0       	ldi	r27, 0x00	; 0
     faa:	e8 e2       	ldi	r30, 0x28	; 40
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	80 81       	ld	r24, Z
     fb0:	8f 70       	andi	r24, 0x0F	; 15
     fb2:	8c 93       	st	X, r24
	lcd_port |= temp;
     fb4:	a8 e2       	ldi	r26, 0x28	; 40
     fb6:	b0 e0       	ldi	r27, 0x00	; 0
     fb8:	e8 e2       	ldi	r30, 0x28	; 40
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	90 81       	ld	r25, Z
     fbe:	8d 8d       	ldd	r24, Y+29	; 0x1d
     fc0:	89 2b       	or	r24, r25
     fc2:	8c 93       	st	X, r24
	sbit(lcd_port,RS);
     fc4:	a8 e2       	ldi	r26, 0x28	; 40
     fc6:	b0 e0       	ldi	r27, 0x00	; 0
     fc8:	e8 e2       	ldi	r30, 0x28	; 40
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	80 81       	ld	r24, Z
     fce:	81 60       	ori	r24, 0x01	; 1
     fd0:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
     fd2:	a8 e2       	ldi	r26, 0x28	; 40
     fd4:	b0 e0       	ldi	r27, 0x00	; 0
     fd6:	e8 e2       	ldi	r30, 0x28	; 40
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	80 81       	ld	r24, Z
     fdc:	8d 7f       	andi	r24, 0xFD	; 253
     fde:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
     fe0:	a8 e2       	ldi	r26, 0x28	; 40
     fe2:	b0 e0       	ldi	r27, 0x00	; 0
     fe4:	e8 e2       	ldi	r30, 0x28	; 40
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
     fe8:	80 81       	ld	r24, Z
     fea:	84 60       	ori	r24, 0x04	; 4
     fec:	8c 93       	st	X, r24
     fee:	80 e0       	ldi	r24, 0x00	; 0
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	a0 ea       	ldi	r26, 0xA0	; 160
     ff4:	b0 e4       	ldi	r27, 0x40	; 64
     ff6:	89 8f       	std	Y+25, r24	; 0x19
     ff8:	9a 8f       	std	Y+26, r25	; 0x1a
     ffa:	ab 8f       	std	Y+27, r26	; 0x1b
     ffc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ffe:	69 8d       	ldd	r22, Y+25	; 0x19
    1000:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1002:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1004:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1006:	2d ec       	ldi	r18, 0xCD	; 205
    1008:	3c ec       	ldi	r19, 0xCC	; 204
    100a:	4c e2       	ldi	r20, 0x2C	; 44
    100c:	55 e4       	ldi	r21, 0x45	; 69
    100e:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <__mulsf3>
    1012:	dc 01       	movw	r26, r24
    1014:	cb 01       	movw	r24, r22
    1016:	8d 8b       	std	Y+21, r24	; 0x15
    1018:	9e 8b       	std	Y+22, r25	; 0x16
    101a:	af 8b       	std	Y+23, r26	; 0x17
    101c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    101e:	6d 89       	ldd	r22, Y+21	; 0x15
    1020:	7e 89       	ldd	r23, Y+22	; 0x16
    1022:	8f 89       	ldd	r24, Y+23	; 0x17
    1024:	98 8d       	ldd	r25, Y+24	; 0x18
    1026:	20 e0       	ldi	r18, 0x00	; 0
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	40 e8       	ldi	r20, 0x80	; 128
    102c:	5f e3       	ldi	r21, 0x3F	; 63
    102e:	0e 94 da 18 	call	0x31b4	; 0x31b4 <__ltsf2>
    1032:	88 23       	and	r24, r24
    1034:	2c f4       	brge	.+10     	; 0x1040 <lcd_wr_char+0xba>
		__ticks = 1;
    1036:	81 e0       	ldi	r24, 0x01	; 1
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	9c 8b       	std	Y+20, r25	; 0x14
    103c:	8b 8b       	std	Y+19, r24	; 0x13
    103e:	3f c0       	rjmp	.+126    	; 0x10be <lcd_wr_char+0x138>
	else if (__tmp > 65535)
    1040:	6d 89       	ldd	r22, Y+21	; 0x15
    1042:	7e 89       	ldd	r23, Y+22	; 0x16
    1044:	8f 89       	ldd	r24, Y+23	; 0x17
    1046:	98 8d       	ldd	r25, Y+24	; 0x18
    1048:	20 e0       	ldi	r18, 0x00	; 0
    104a:	3f ef       	ldi	r19, 0xFF	; 255
    104c:	4f e7       	ldi	r20, 0x7F	; 127
    104e:	57 e4       	ldi	r21, 0x47	; 71
    1050:	0e 94 7a 18 	call	0x30f4	; 0x30f4 <__gtsf2>
    1054:	18 16       	cp	r1, r24
    1056:	4c f5       	brge	.+82     	; 0x10aa <lcd_wr_char+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1058:	69 8d       	ldd	r22, Y+25	; 0x19
    105a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    105c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    105e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1060:	20 e0       	ldi	r18, 0x00	; 0
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	40 e2       	ldi	r20, 0x20	; 32
    1066:	51 e4       	ldi	r21, 0x41	; 65
    1068:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <__mulsf3>
    106c:	dc 01       	movw	r26, r24
    106e:	cb 01       	movw	r24, r22
    1070:	bc 01       	movw	r22, r24
    1072:	cd 01       	movw	r24, r26
    1074:	0e 94 fe 14 	call	0x29fc	; 0x29fc <__fixunssfsi>
    1078:	dc 01       	movw	r26, r24
    107a:	cb 01       	movw	r24, r22
    107c:	9c 8b       	std	Y+20, r25	; 0x14
    107e:	8b 8b       	std	Y+19, r24	; 0x13
    1080:	0f c0       	rjmp	.+30     	; 0x10a0 <lcd_wr_char+0x11a>
    1082:	84 e1       	ldi	r24, 0x14	; 20
    1084:	91 e0       	ldi	r25, 0x01	; 1
    1086:	9a 8b       	std	Y+18, r25	; 0x12
    1088:	89 8b       	std	Y+17, r24	; 0x11
    108a:	89 89       	ldd	r24, Y+17	; 0x11
    108c:	9a 89       	ldd	r25, Y+18	; 0x12
    108e:	01 97       	sbiw	r24, 0x01	; 1
    1090:	f1 f7       	brne	.-4      	; 0x108e <lcd_wr_char+0x108>
    1092:	9a 8b       	std	Y+18, r25	; 0x12
    1094:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1096:	8b 89       	ldd	r24, Y+19	; 0x13
    1098:	9c 89       	ldd	r25, Y+20	; 0x14
    109a:	01 97       	sbiw	r24, 0x01	; 1
    109c:	9c 8b       	std	Y+20, r25	; 0x14
    109e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10a0:	8b 89       	ldd	r24, Y+19	; 0x13
    10a2:	9c 89       	ldd	r25, Y+20	; 0x14
    10a4:	00 97       	sbiw	r24, 0x00	; 0
    10a6:	69 f7       	brne	.-38     	; 0x1082 <lcd_wr_char+0xfc>
    10a8:	14 c0       	rjmp	.+40     	; 0x10d2 <lcd_wr_char+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10aa:	6d 89       	ldd	r22, Y+21	; 0x15
    10ac:	7e 89       	ldd	r23, Y+22	; 0x16
    10ae:	8f 89       	ldd	r24, Y+23	; 0x17
    10b0:	98 8d       	ldd	r25, Y+24	; 0x18
    10b2:	0e 94 fe 14 	call	0x29fc	; 0x29fc <__fixunssfsi>
    10b6:	dc 01       	movw	r26, r24
    10b8:	cb 01       	movw	r24, r22
    10ba:	9c 8b       	std	Y+20, r25	; 0x14
    10bc:	8b 8b       	std	Y+19, r24	; 0x13
    10be:	8b 89       	ldd	r24, Y+19	; 0x13
    10c0:	9c 89       	ldd	r25, Y+20	; 0x14
    10c2:	98 8b       	std	Y+16, r25	; 0x10
    10c4:	8f 87       	std	Y+15, r24	; 0x0f
    10c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    10c8:	98 89       	ldd	r25, Y+16	; 0x10
    10ca:	01 97       	sbiw	r24, 0x01	; 1
    10cc:	f1 f7       	brne	.-4      	; 0x10ca <lcd_wr_char+0x144>
    10ce:	98 8b       	std	Y+16, r25	; 0x10
    10d0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	cbit(lcd_port,EN);
    10d2:	a8 e2       	ldi	r26, 0x28	; 40
    10d4:	b0 e0       	ldi	r27, 0x00	; 0
    10d6:	e8 e2       	ldi	r30, 0x28	; 40
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	80 81       	ld	r24, Z
    10dc:	8b 7f       	andi	r24, 0xFB	; 251
    10de:	8c 93       	st	X, r24

	letter = letter & 0x0F;
    10e0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    10e2:	8f 70       	andi	r24, 0x0F	; 15
    10e4:	8e 8f       	std	Y+30, r24	; 0x1e
	letter = letter<<4;
    10e6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    10e8:	82 95       	swap	r24
    10ea:	80 7f       	andi	r24, 0xF0	; 240
    10ec:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
    10ee:	a8 e2       	ldi	r26, 0x28	; 40
    10f0:	b0 e0       	ldi	r27, 0x00	; 0
    10f2:	e8 e2       	ldi	r30, 0x28	; 40
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	80 81       	ld	r24, Z
    10f8:	8f 70       	andi	r24, 0x0F	; 15
    10fa:	8c 93       	st	X, r24
	lcd_port |= letter;
    10fc:	a8 e2       	ldi	r26, 0x28	; 40
    10fe:	b0 e0       	ldi	r27, 0x00	; 0
    1100:	e8 e2       	ldi	r30, 0x28	; 40
    1102:	f0 e0       	ldi	r31, 0x00	; 0
    1104:	90 81       	ld	r25, Z
    1106:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1108:	89 2b       	or	r24, r25
    110a:	8c 93       	st	X, r24
	sbit(lcd_port,RS);
    110c:	a8 e2       	ldi	r26, 0x28	; 40
    110e:	b0 e0       	ldi	r27, 0x00	; 0
    1110:	e8 e2       	ldi	r30, 0x28	; 40
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	80 81       	ld	r24, Z
    1116:	81 60       	ori	r24, 0x01	; 1
    1118:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
    111a:	a8 e2       	ldi	r26, 0x28	; 40
    111c:	b0 e0       	ldi	r27, 0x00	; 0
    111e:	e8 e2       	ldi	r30, 0x28	; 40
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	80 81       	ld	r24, Z
    1124:	8d 7f       	andi	r24, 0xFD	; 253
    1126:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
    1128:	a8 e2       	ldi	r26, 0x28	; 40
    112a:	b0 e0       	ldi	r27, 0x00	; 0
    112c:	e8 e2       	ldi	r30, 0x28	; 40
    112e:	f0 e0       	ldi	r31, 0x00	; 0
    1130:	80 81       	ld	r24, Z
    1132:	84 60       	ori	r24, 0x04	; 4
    1134:	8c 93       	st	X, r24
    1136:	80 e0       	ldi	r24, 0x00	; 0
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	a0 ea       	ldi	r26, 0xA0	; 160
    113c:	b0 e4       	ldi	r27, 0x40	; 64
    113e:	8b 87       	std	Y+11, r24	; 0x0b
    1140:	9c 87       	std	Y+12, r25	; 0x0c
    1142:	ad 87       	std	Y+13, r26	; 0x0d
    1144:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1146:	6b 85       	ldd	r22, Y+11	; 0x0b
    1148:	7c 85       	ldd	r23, Y+12	; 0x0c
    114a:	8d 85       	ldd	r24, Y+13	; 0x0d
    114c:	9e 85       	ldd	r25, Y+14	; 0x0e
    114e:	2d ec       	ldi	r18, 0xCD	; 205
    1150:	3c ec       	ldi	r19, 0xCC	; 204
    1152:	4c e2       	ldi	r20, 0x2C	; 44
    1154:	55 e4       	ldi	r21, 0x45	; 69
    1156:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <__mulsf3>
    115a:	dc 01       	movw	r26, r24
    115c:	cb 01       	movw	r24, r22
    115e:	8f 83       	std	Y+7, r24	; 0x07
    1160:	98 87       	std	Y+8, r25	; 0x08
    1162:	a9 87       	std	Y+9, r26	; 0x09
    1164:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1166:	6f 81       	ldd	r22, Y+7	; 0x07
    1168:	78 85       	ldd	r23, Y+8	; 0x08
    116a:	89 85       	ldd	r24, Y+9	; 0x09
    116c:	9a 85       	ldd	r25, Y+10	; 0x0a
    116e:	20 e0       	ldi	r18, 0x00	; 0
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	40 e8       	ldi	r20, 0x80	; 128
    1174:	5f e3       	ldi	r21, 0x3F	; 63
    1176:	0e 94 da 18 	call	0x31b4	; 0x31b4 <__ltsf2>
    117a:	88 23       	and	r24, r24
    117c:	2c f4       	brge	.+10     	; 0x1188 <lcd_wr_char+0x202>
		__ticks = 1;
    117e:	81 e0       	ldi	r24, 0x01	; 1
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	9e 83       	std	Y+6, r25	; 0x06
    1184:	8d 83       	std	Y+5, r24	; 0x05
    1186:	3f c0       	rjmp	.+126    	; 0x1206 <lcd_wr_char+0x280>
	else if (__tmp > 65535)
    1188:	6f 81       	ldd	r22, Y+7	; 0x07
    118a:	78 85       	ldd	r23, Y+8	; 0x08
    118c:	89 85       	ldd	r24, Y+9	; 0x09
    118e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1190:	20 e0       	ldi	r18, 0x00	; 0
    1192:	3f ef       	ldi	r19, 0xFF	; 255
    1194:	4f e7       	ldi	r20, 0x7F	; 127
    1196:	57 e4       	ldi	r21, 0x47	; 71
    1198:	0e 94 7a 18 	call	0x30f4	; 0x30f4 <__gtsf2>
    119c:	18 16       	cp	r1, r24
    119e:	4c f5       	brge	.+82     	; 0x11f2 <lcd_wr_char+0x26c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    11a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    11a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    11a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    11a8:	20 e0       	ldi	r18, 0x00	; 0
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	40 e2       	ldi	r20, 0x20	; 32
    11ae:	51 e4       	ldi	r21, 0x41	; 65
    11b0:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <__mulsf3>
    11b4:	dc 01       	movw	r26, r24
    11b6:	cb 01       	movw	r24, r22
    11b8:	bc 01       	movw	r22, r24
    11ba:	cd 01       	movw	r24, r26
    11bc:	0e 94 fe 14 	call	0x29fc	; 0x29fc <__fixunssfsi>
    11c0:	dc 01       	movw	r26, r24
    11c2:	cb 01       	movw	r24, r22
    11c4:	9e 83       	std	Y+6, r25	; 0x06
    11c6:	8d 83       	std	Y+5, r24	; 0x05
    11c8:	0f c0       	rjmp	.+30     	; 0x11e8 <lcd_wr_char+0x262>
    11ca:	84 e1       	ldi	r24, 0x14	; 20
    11cc:	91 e0       	ldi	r25, 0x01	; 1
    11ce:	9c 83       	std	Y+4, r25	; 0x04
    11d0:	8b 83       	std	Y+3, r24	; 0x03
    11d2:	8b 81       	ldd	r24, Y+3	; 0x03
    11d4:	9c 81       	ldd	r25, Y+4	; 0x04
    11d6:	01 97       	sbiw	r24, 0x01	; 1
    11d8:	f1 f7       	brne	.-4      	; 0x11d6 <lcd_wr_char+0x250>
    11da:	9c 83       	std	Y+4, r25	; 0x04
    11dc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11de:	8d 81       	ldd	r24, Y+5	; 0x05
    11e0:	9e 81       	ldd	r25, Y+6	; 0x06
    11e2:	01 97       	sbiw	r24, 0x01	; 1
    11e4:	9e 83       	std	Y+6, r25	; 0x06
    11e6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11e8:	8d 81       	ldd	r24, Y+5	; 0x05
    11ea:	9e 81       	ldd	r25, Y+6	; 0x06
    11ec:	00 97       	sbiw	r24, 0x00	; 0
    11ee:	69 f7       	brne	.-38     	; 0x11ca <lcd_wr_char+0x244>
    11f0:	14 c0       	rjmp	.+40     	; 0x121a <lcd_wr_char+0x294>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11f2:	6f 81       	ldd	r22, Y+7	; 0x07
    11f4:	78 85       	ldd	r23, Y+8	; 0x08
    11f6:	89 85       	ldd	r24, Y+9	; 0x09
    11f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    11fa:	0e 94 fe 14 	call	0x29fc	; 0x29fc <__fixunssfsi>
    11fe:	dc 01       	movw	r26, r24
    1200:	cb 01       	movw	r24, r22
    1202:	9e 83       	std	Y+6, r25	; 0x06
    1204:	8d 83       	std	Y+5, r24	; 0x05
    1206:	8d 81       	ldd	r24, Y+5	; 0x05
    1208:	9e 81       	ldd	r25, Y+6	; 0x06
    120a:	9a 83       	std	Y+2, r25	; 0x02
    120c:	89 83       	std	Y+1, r24	; 0x01
    120e:	89 81       	ldd	r24, Y+1	; 0x01
    1210:	9a 81       	ldd	r25, Y+2	; 0x02
    1212:	01 97       	sbiw	r24, 0x01	; 1
    1214:	f1 f7       	brne	.-4      	; 0x1212 <lcd_wr_char+0x28c>
    1216:	9a 83       	std	Y+2, r25	; 0x02
    1218:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	cbit(lcd_port,EN);
    121a:	a8 e2       	ldi	r26, 0x28	; 40
    121c:	b0 e0       	ldi	r27, 0x00	; 0
    121e:	e8 e2       	ldi	r30, 0x28	; 40
    1220:	f0 e0       	ldi	r31, 0x00	; 0
    1222:	80 81       	ld	r24, Z
    1224:	8b 7f       	andi	r24, 0xFB	; 251
    1226:	8c 93       	st	X, r24
}
    1228:	6e 96       	adiw	r28, 0x1e	; 30
    122a:	0f b6       	in	r0, 0x3f	; 63
    122c:	f8 94       	cli
    122e:	de bf       	out	0x3e, r29	; 62
    1230:	0f be       	out	0x3f, r0	; 63
    1232:	cd bf       	out	0x3d, r28	; 61
    1234:	cf 91       	pop	r28
    1236:	df 91       	pop	r29
    1238:	08 95       	ret

0000123a <lcd_home>:


void lcd_home()
{
    123a:	df 93       	push	r29
    123c:	cf 93       	push	r28
    123e:	cd b7       	in	r28, 0x3d	; 61
    1240:	de b7       	in	r29, 0x3e	; 62
	lcd_wr_command(0x80);
    1242:	80 e8       	ldi	r24, 0x80	; 128
    1244:	0e 94 69 06 	call	0xcd2	; 0xcd2 <lcd_wr_command>
}
    1248:	cf 91       	pop	r28
    124a:	df 91       	pop	r29
    124c:	08 95       	ret

0000124e <lcd_string>:


/*****Function to Print String on LCD*****/
void lcd_string(char *str)
{
    124e:	df 93       	push	r29
    1250:	cf 93       	push	r28
    1252:	0f 92       	push	r0
    1254:	0f 92       	push	r0
    1256:	cd b7       	in	r28, 0x3d	; 61
    1258:	de b7       	in	r29, 0x3e	; 62
    125a:	9a 83       	std	Y+2, r25	; 0x02
    125c:	89 83       	std	Y+1, r24	; 0x01
    125e:	0a c0       	rjmp	.+20     	; 0x1274 <lcd_string+0x26>
	while(*str != '\0')
	{
		lcd_wr_char(*str);
    1260:	e9 81       	ldd	r30, Y+1	; 0x01
    1262:	fa 81       	ldd	r31, Y+2	; 0x02
    1264:	80 81       	ld	r24, Z
    1266:	0e 94 c3 07 	call	0xf86	; 0xf86 <lcd_wr_char>
		str++;
    126a:	89 81       	ldd	r24, Y+1	; 0x01
    126c:	9a 81       	ldd	r25, Y+2	; 0x02
    126e:	01 96       	adiw	r24, 0x01	; 1
    1270:	9a 83       	std	Y+2, r25	; 0x02
    1272:	89 83       	std	Y+1, r24	; 0x01


/*****Function to Print String on LCD*****/
void lcd_string(char *str)
{
	while(*str != '\0')
    1274:	e9 81       	ldd	r30, Y+1	; 0x01
    1276:	fa 81       	ldd	r31, Y+2	; 0x02
    1278:	80 81       	ld	r24, Z
    127a:	88 23       	and	r24, r24
    127c:	89 f7       	brne	.-30     	; 0x1260 <lcd_string+0x12>
	{
		lcd_wr_char(*str);
		str++;
	}
}
    127e:	0f 90       	pop	r0
    1280:	0f 90       	pop	r0
    1282:	cf 91       	pop	r28
    1284:	df 91       	pop	r29
    1286:	08 95       	ret

00001288 <lcd_cursor>:

/*** Position the LCD cursor at "row", "column". ***/

void lcd_cursor (char row, char column)
{
    1288:	df 93       	push	r29
    128a:	cf 93       	push	r28
    128c:	00 d0       	rcall	.+0      	; 0x128e <lcd_cursor+0x6>
    128e:	0f 92       	push	r0
    1290:	cd b7       	in	r28, 0x3d	; 61
    1292:	de b7       	in	r29, 0x3e	; 62
    1294:	89 83       	std	Y+1, r24	; 0x01
    1296:	6a 83       	std	Y+2, r22	; 0x02
	switch (row) {
    1298:	89 81       	ldd	r24, Y+1	; 0x01
    129a:	28 2f       	mov	r18, r24
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	3c 83       	std	Y+4, r19	; 0x04
    12a0:	2b 83       	std	Y+3, r18	; 0x03
    12a2:	8b 81       	ldd	r24, Y+3	; 0x03
    12a4:	9c 81       	ldd	r25, Y+4	; 0x04
    12a6:	82 30       	cpi	r24, 0x02	; 2
    12a8:	91 05       	cpc	r25, r1
    12aa:	d9 f0       	breq	.+54     	; 0x12e2 <lcd_cursor+0x5a>
    12ac:	2b 81       	ldd	r18, Y+3	; 0x03
    12ae:	3c 81       	ldd	r19, Y+4	; 0x04
    12b0:	23 30       	cpi	r18, 0x03	; 3
    12b2:	31 05       	cpc	r19, r1
    12b4:	34 f4       	brge	.+12     	; 0x12c2 <lcd_cursor+0x3a>
    12b6:	8b 81       	ldd	r24, Y+3	; 0x03
    12b8:	9c 81       	ldd	r25, Y+4	; 0x04
    12ba:	81 30       	cpi	r24, 0x01	; 1
    12bc:	91 05       	cpc	r25, r1
    12be:	61 f0       	breq	.+24     	; 0x12d8 <lcd_cursor+0x50>
    12c0:	1e c0       	rjmp	.+60     	; 0x12fe <lcd_cursor+0x76>
    12c2:	2b 81       	ldd	r18, Y+3	; 0x03
    12c4:	3c 81       	ldd	r19, Y+4	; 0x04
    12c6:	23 30       	cpi	r18, 0x03	; 3
    12c8:	31 05       	cpc	r19, r1
    12ca:	81 f0       	breq	.+32     	; 0x12ec <lcd_cursor+0x64>
    12cc:	8b 81       	ldd	r24, Y+3	; 0x03
    12ce:	9c 81       	ldd	r25, Y+4	; 0x04
    12d0:	84 30       	cpi	r24, 0x04	; 4
    12d2:	91 05       	cpc	r25, r1
    12d4:	81 f0       	breq	.+32     	; 0x12f6 <lcd_cursor+0x6e>
    12d6:	13 c0       	rjmp	.+38     	; 0x12fe <lcd_cursor+0x76>
		case 1: lcd_wr_command (0x80 + column - 1); break;
    12d8:	8a 81       	ldd	r24, Y+2	; 0x02
    12da:	81 58       	subi	r24, 0x81	; 129
    12dc:	0e 94 69 06 	call	0xcd2	; 0xcd2 <lcd_wr_command>
    12e0:	0e c0       	rjmp	.+28     	; 0x12fe <lcd_cursor+0x76>
		case 2: lcd_wr_command (0xc0 + column - 1); break;
    12e2:	8a 81       	ldd	r24, Y+2	; 0x02
    12e4:	81 54       	subi	r24, 0x41	; 65
    12e6:	0e 94 69 06 	call	0xcd2	; 0xcd2 <lcd_wr_command>
    12ea:	09 c0       	rjmp	.+18     	; 0x12fe <lcd_cursor+0x76>
		case 3: lcd_wr_command (0x94 + column - 1); break;
    12ec:	8a 81       	ldd	r24, Y+2	; 0x02
    12ee:	8d 56       	subi	r24, 0x6D	; 109
    12f0:	0e 94 69 06 	call	0xcd2	; 0xcd2 <lcd_wr_command>
    12f4:	04 c0       	rjmp	.+8      	; 0x12fe <lcd_cursor+0x76>
		case 4: lcd_wr_command (0xd4 + column - 1); break;
    12f6:	8a 81       	ldd	r24, Y+2	; 0x02
    12f8:	8d 52       	subi	r24, 0x2D	; 45
    12fa:	0e 94 69 06 	call	0xcd2	; 0xcd2 <lcd_wr_command>
		default: break;
	}
}
    12fe:	0f 90       	pop	r0
    1300:	0f 90       	pop	r0
    1302:	0f 90       	pop	r0
    1304:	0f 90       	pop	r0
    1306:	cf 91       	pop	r28
    1308:	df 91       	pop	r29
    130a:	08 95       	ret

0000130c <lcd_print>:

/***** Function To Print Any input value upto the desired digit on LCD *****/
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
    130c:	df 93       	push	r29
    130e:	cf 93       	push	r28
    1310:	cd b7       	in	r28, 0x3d	; 61
    1312:	de b7       	in	r29, 0x3e	; 62
    1314:	27 97       	sbiw	r28, 0x07	; 7
    1316:	0f b6       	in	r0, 0x3f	; 63
    1318:	f8 94       	cli
    131a:	de bf       	out	0x3e, r29	; 62
    131c:	0f be       	out	0x3f, r0	; 63
    131e:	cd bf       	out	0x3d, r28	; 61
    1320:	8a 83       	std	Y+2, r24	; 0x02
    1322:	6b 83       	std	Y+3, r22	; 0x03
    1324:	5d 83       	std	Y+5, r21	; 0x05
    1326:	4c 83       	std	Y+4, r20	; 0x04
    1328:	3f 83       	std	Y+7, r19	; 0x07
    132a:	2e 83       	std	Y+6, r18	; 0x06
	unsigned char flag=0;
    132c:	19 82       	std	Y+1, r1	; 0x01
	if(row==0||coloumn==0)
    132e:	8a 81       	ldd	r24, Y+2	; 0x02
    1330:	88 23       	and	r24, r24
    1332:	19 f0       	breq	.+6      	; 0x133a <lcd_print+0x2e>
    1334:	8b 81       	ldd	r24, Y+3	; 0x03
    1336:	88 23       	and	r24, r24
    1338:	19 f4       	brne	.+6      	; 0x1340 <lcd_print+0x34>
	{
		lcd_home();
    133a:	0e 94 1d 09 	call	0x123a	; 0x123a <lcd_home>
    133e:	04 c0       	rjmp	.+8      	; 0x1348 <lcd_print+0x3c>
	}
	else
	{
		lcd_cursor(row,coloumn);
    1340:	8a 81       	ldd	r24, Y+2	; 0x02
    1342:	6b 81       	ldd	r22, Y+3	; 0x03
    1344:	0e 94 44 09 	call	0x1288	; 0x1288 <lcd_cursor>
	}
	if(digits==5 || flag==1)
    1348:	8e 81       	ldd	r24, Y+6	; 0x06
    134a:	9f 81       	ldd	r25, Y+7	; 0x07
    134c:	85 30       	cpi	r24, 0x05	; 5
    134e:	91 05       	cpc	r25, r1
    1350:	19 f0       	breq	.+6      	; 0x1358 <lcd_print+0x4c>
    1352:	89 81       	ldd	r24, Y+1	; 0x01
    1354:	81 30       	cpi	r24, 0x01	; 1
    1356:	a9 f4       	brne	.+42     	; 0x1382 <lcd_print+0x76>
	{
		million=value/10000+48;
    1358:	8c 81       	ldd	r24, Y+4	; 0x04
    135a:	9d 81       	ldd	r25, Y+5	; 0x05
    135c:	20 e1       	ldi	r18, 0x10	; 16
    135e:	37 e2       	ldi	r19, 0x27	; 39
    1360:	b9 01       	movw	r22, r18
    1362:	0e 94 2a 1c 	call	0x3854	; 0x3854 <__udivmodhi4>
    1366:	cb 01       	movw	r24, r22
    1368:	c0 96       	adiw	r24, 0x30	; 48
    136a:	90 93 09 03 	sts	0x0309, r25
    136e:	80 93 08 03 	sts	0x0308, r24
		lcd_wr_char(million);
    1372:	80 91 08 03 	lds	r24, 0x0308
    1376:	90 91 09 03 	lds	r25, 0x0309
    137a:	0e 94 c3 07 	call	0xf86	; 0xf86 <lcd_wr_char>
		flag=1;
    137e:	81 e0       	ldi	r24, 0x01	; 1
    1380:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==4 || flag==1)
    1382:	8e 81       	ldd	r24, Y+6	; 0x06
    1384:	9f 81       	ldd	r25, Y+7	; 0x07
    1386:	84 30       	cpi	r24, 0x04	; 4
    1388:	91 05       	cpc	r25, r1
    138a:	19 f0       	breq	.+6      	; 0x1392 <lcd_print+0x86>
    138c:	89 81       	ldd	r24, Y+1	; 0x01
    138e:	81 30       	cpi	r24, 0x01	; 1
    1390:	11 f5       	brne	.+68     	; 0x13d6 <lcd_print+0xca>
	{
		temp = value/1000;
    1392:	8c 81       	ldd	r24, Y+4	; 0x04
    1394:	9d 81       	ldd	r25, Y+5	; 0x05
    1396:	28 ee       	ldi	r18, 0xE8	; 232
    1398:	33 e0       	ldi	r19, 0x03	; 3
    139a:	b9 01       	movw	r22, r18
    139c:	0e 94 2a 1c 	call	0x3854	; 0x3854 <__udivmodhi4>
    13a0:	cb 01       	movw	r24, r22
    13a2:	90 93 12 03 	sts	0x0312, r25
    13a6:	80 93 11 03 	sts	0x0311, r24
		thousand = temp%10 + 48;
    13aa:	80 91 11 03 	lds	r24, 0x0311
    13ae:	90 91 12 03 	lds	r25, 0x0312
    13b2:	2a e0       	ldi	r18, 0x0A	; 10
    13b4:	30 e0       	ldi	r19, 0x00	; 0
    13b6:	b9 01       	movw	r22, r18
    13b8:	0e 94 2a 1c 	call	0x3854	; 0x3854 <__udivmodhi4>
    13bc:	c0 96       	adiw	r24, 0x30	; 48
    13be:	90 93 26 03 	sts	0x0326, r25
    13c2:	80 93 25 03 	sts	0x0325, r24
		lcd_wr_char(thousand);
    13c6:	80 91 25 03 	lds	r24, 0x0325
    13ca:	90 91 26 03 	lds	r25, 0x0326
    13ce:	0e 94 c3 07 	call	0xf86	; 0xf86 <lcd_wr_char>
		flag=1;
    13d2:	81 e0       	ldi	r24, 0x01	; 1
    13d4:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==3 || flag==1)
    13d6:	8e 81       	ldd	r24, Y+6	; 0x06
    13d8:	9f 81       	ldd	r25, Y+7	; 0x07
    13da:	83 30       	cpi	r24, 0x03	; 3
    13dc:	91 05       	cpc	r25, r1
    13de:	19 f0       	breq	.+6      	; 0x13e6 <lcd_print+0xda>
    13e0:	89 81       	ldd	r24, Y+1	; 0x01
    13e2:	81 30       	cpi	r24, 0x01	; 1
    13e4:	11 f5       	brne	.+68     	; 0x142a <lcd_print+0x11e>
	{
		temp = value/100;
    13e6:	8c 81       	ldd	r24, Y+4	; 0x04
    13e8:	9d 81       	ldd	r25, Y+5	; 0x05
    13ea:	24 e6       	ldi	r18, 0x64	; 100
    13ec:	30 e0       	ldi	r19, 0x00	; 0
    13ee:	b9 01       	movw	r22, r18
    13f0:	0e 94 2a 1c 	call	0x3854	; 0x3854 <__udivmodhi4>
    13f4:	cb 01       	movw	r24, r22
    13f6:	90 93 12 03 	sts	0x0312, r25
    13fa:	80 93 11 03 	sts	0x0311, r24
		hundred = temp%10 + 48;
    13fe:	80 91 11 03 	lds	r24, 0x0311
    1402:	90 91 12 03 	lds	r25, 0x0312
    1406:	2a e0       	ldi	r18, 0x0A	; 10
    1408:	30 e0       	ldi	r19, 0x00	; 0
    140a:	b9 01       	movw	r22, r18
    140c:	0e 94 2a 1c 	call	0x3854	; 0x3854 <__udivmodhi4>
    1410:	c0 96       	adiw	r24, 0x30	; 48
    1412:	90 93 1f 03 	sts	0x031F, r25
    1416:	80 93 1e 03 	sts	0x031E, r24
		lcd_wr_char(hundred);
    141a:	80 91 1e 03 	lds	r24, 0x031E
    141e:	90 91 1f 03 	lds	r25, 0x031F
    1422:	0e 94 c3 07 	call	0xf86	; 0xf86 <lcd_wr_char>
		flag=1;
    1426:	81 e0       	ldi	r24, 0x01	; 1
    1428:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==2 || flag==1)
    142a:	8e 81       	ldd	r24, Y+6	; 0x06
    142c:	9f 81       	ldd	r25, Y+7	; 0x07
    142e:	82 30       	cpi	r24, 0x02	; 2
    1430:	91 05       	cpc	r25, r1
    1432:	19 f0       	breq	.+6      	; 0x143a <lcd_print+0x12e>
    1434:	89 81       	ldd	r24, Y+1	; 0x01
    1436:	81 30       	cpi	r24, 0x01	; 1
    1438:	11 f5       	brne	.+68     	; 0x147e <lcd_print+0x172>
	{
		temp = value/10;
    143a:	8c 81       	ldd	r24, Y+4	; 0x04
    143c:	9d 81       	ldd	r25, Y+5	; 0x05
    143e:	2a e0       	ldi	r18, 0x0A	; 10
    1440:	30 e0       	ldi	r19, 0x00	; 0
    1442:	b9 01       	movw	r22, r18
    1444:	0e 94 2a 1c 	call	0x3854	; 0x3854 <__udivmodhi4>
    1448:	cb 01       	movw	r24, r22
    144a:	90 93 12 03 	sts	0x0312, r25
    144e:	80 93 11 03 	sts	0x0311, r24
		tens = temp%10 + 48;
    1452:	80 91 11 03 	lds	r24, 0x0311
    1456:	90 91 12 03 	lds	r25, 0x0312
    145a:	2a e0       	ldi	r18, 0x0A	; 10
    145c:	30 e0       	ldi	r19, 0x00	; 0
    145e:	b9 01       	movw	r22, r18
    1460:	0e 94 2a 1c 	call	0x3854	; 0x3854 <__udivmodhi4>
    1464:	c0 96       	adiw	r24, 0x30	; 48
    1466:	90 93 1c 03 	sts	0x031C, r25
    146a:	80 93 1b 03 	sts	0x031B, r24
		lcd_wr_char(tens);
    146e:	80 91 1b 03 	lds	r24, 0x031B
    1472:	90 91 1c 03 	lds	r25, 0x031C
    1476:	0e 94 c3 07 	call	0xf86	; 0xf86 <lcd_wr_char>
		flag=1;
    147a:	81 e0       	ldi	r24, 0x01	; 1
    147c:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==1 || flag==1)
    147e:	8e 81       	ldd	r24, Y+6	; 0x06
    1480:	9f 81       	ldd	r25, Y+7	; 0x07
    1482:	81 30       	cpi	r24, 0x01	; 1
    1484:	91 05       	cpc	r25, r1
    1486:	19 f0       	breq	.+6      	; 0x148e <lcd_print+0x182>
    1488:	89 81       	ldd	r24, Y+1	; 0x01
    148a:	81 30       	cpi	r24, 0x01	; 1
    148c:	91 f4       	brne	.+36     	; 0x14b2 <lcd_print+0x1a6>
	{
		unit = value%10 + 48;
    148e:	8c 81       	ldd	r24, Y+4	; 0x04
    1490:	9d 81       	ldd	r25, Y+5	; 0x05
    1492:	2a e0       	ldi	r18, 0x0A	; 10
    1494:	30 e0       	ldi	r19, 0x00	; 0
    1496:	b9 01       	movw	r22, r18
    1498:	0e 94 2a 1c 	call	0x3854	; 0x3854 <__udivmodhi4>
    149c:	c0 96       	adiw	r24, 0x30	; 48
    149e:	90 93 24 03 	sts	0x0324, r25
    14a2:	80 93 23 03 	sts	0x0323, r24
		lcd_wr_char(unit);
    14a6:	80 91 23 03 	lds	r24, 0x0323
    14aa:	90 91 24 03 	lds	r25, 0x0324
    14ae:	0e 94 c3 07 	call	0xf86	; 0xf86 <lcd_wr_char>
	}
	if(digits>5)
    14b2:	8e 81       	ldd	r24, Y+6	; 0x06
    14b4:	9f 81       	ldd	r25, Y+7	; 0x07
    14b6:	86 30       	cpi	r24, 0x06	; 6
    14b8:	91 05       	cpc	r25, r1
    14ba:	1c f0       	brlt	.+6      	; 0x14c2 <lcd_print+0x1b6>
	{
		lcd_wr_char('E');
    14bc:	85 e4       	ldi	r24, 0x45	; 69
    14be:	0e 94 c3 07 	call	0xf86	; 0xf86 <lcd_wr_char>
	}
	
}
    14c2:	27 96       	adiw	r28, 0x07	; 7
    14c4:	0f b6       	in	r0, 0x3f	; 63
    14c6:	f8 94       	cli
    14c8:	de bf       	out	0x3e, r29	; 62
    14ca:	0f be       	out	0x3f, r0	; 63
    14cc:	cd bf       	out	0x3d, r28	; 61
    14ce:	cf 91       	pop	r28
    14d0:	df 91       	pop	r29
    14d2:	08 95       	ret

000014d4 <INIT_PORTS>:
//unsigned char data;

int scr,scl;

void INIT_PORTS()
{
    14d4:	df 93       	push	r29
    14d6:	cf 93       	push	r28
    14d8:	cd b7       	in	r28, 0x3d	; 61
    14da:	de b7       	in	r29, 0x3e	; 62
	DDRA=0x0F;
    14dc:	e1 e2       	ldi	r30, 0x21	; 33
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	8f e0       	ldi	r24, 0x0F	; 15
    14e2:	80 83       	st	Z, r24
	PORTA=0x00;//INITIALIZE
    14e4:	e2 e2       	ldi	r30, 0x22	; 34
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	10 82       	st	Z, r1
	DDRE=0xCF;
    14ea:	ed e2       	ldi	r30, 0x2D	; 45
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	8f ec       	ldi	r24, 0xCF	; 207
    14f0:	80 83       	st	Z, r24
	PORTE=0xFF;	
    14f2:	ee e2       	ldi	r30, 0x2E	; 46
    14f4:	f0 e0       	ldi	r31, 0x00	; 0
    14f6:	8f ef       	ldi	r24, 0xFF	; 255
    14f8:	80 83       	st	Z, r24
	DDRL=0x18;
    14fa:	ea e0       	ldi	r30, 0x0A	; 10
    14fc:	f1 e0       	ldi	r31, 0x01	; 1
    14fe:	88 e1       	ldi	r24, 0x18	; 24
    1500:	80 83       	st	Z, r24
	PORTL=0x18;
    1502:	eb e0       	ldi	r30, 0x0B	; 11
    1504:	f1 e0       	ldi	r31, 0x01	; 1
    1506:	88 e1       	ldi	r24, 0x18	; 24
    1508:	80 83       	st	Z, r24
	DDRC=0x00; // buzzer off
    150a:	e7 e2       	ldi	r30, 0x27	; 39
    150c:	f0 e0       	ldi	r31, 0x00	; 0
    150e:	10 82       	st	Z, r1
	PORTC =0x00;
    1510:	e8 e2       	ldi	r30, 0x28	; 40
    1512:	f0 e0       	ldi	r31, 0x00	; 0
    1514:	10 82       	st	Z, r1
	TCCR5B =0x00;
    1516:	e1 e2       	ldi	r30, 0x21	; 33
    1518:	f1 e0       	ldi	r31, 0x01	; 1
    151a:	10 82       	st	Z, r1
	TCCR5A = 0xA1;
    151c:	e0 e2       	ldi	r30, 0x20	; 32
    151e:	f1 e0       	ldi	r31, 0x01	; 1
    1520:	81 ea       	ldi	r24, 0xA1	; 161
    1522:	80 83       	st	Z, r24
	TCCR5B=0x0B;
    1524:	e1 e2       	ldi	r30, 0x21	; 33
    1526:	f1 e0       	ldi	r31, 0x01	; 1
    1528:	8b e0       	ldi	r24, 0x0B	; 11
    152a:	80 83       	st	Z, r24

	}
    152c:	cf 91       	pop	r28
    152e:	df 91       	pop	r29
    1530:	08 95       	ret

00001532 <INIT_PORTS_ROTATE>:


	void INIT_PORTS_ROTATE()
	{
    1532:	df 93       	push	r29
    1534:	cf 93       	push	r28
    1536:	cd b7       	in	r28, 0x3d	; 61
    1538:	de b7       	in	r29, 0x3e	; 62
	DDRA=0x0F;
    153a:	e1 e2       	ldi	r30, 0x21	; 33
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	8f e0       	ldi	r24, 0x0F	; 15
    1540:	80 83       	st	Z, r24
	PORTA=0x00;//INITIALIZE
    1542:	e2 e2       	ldi	r30, 0x22	; 34
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	10 82       	st	Z, r1
	DDRE=0xCF;
    1548:	ed e2       	ldi	r30, 0x2D	; 45
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	8f ec       	ldi	r24, 0xCF	; 207
    154e:	80 83       	st	Z, r24
	PORTE=0xFF;	
    1550:	ee e2       	ldi	r30, 0x2E	; 46
    1552:	f0 e0       	ldi	r31, 0x00	; 0
    1554:	8f ef       	ldi	r24, 0xFF	; 255
    1556:	80 83       	st	Z, r24
	DDRL=0x18;
    1558:	ea e0       	ldi	r30, 0x0A	; 10
    155a:	f1 e0       	ldi	r31, 0x01	; 1
    155c:	88 e1       	ldi	r24, 0x18	; 24
    155e:	80 83       	st	Z, r24
	PORTL=0x18;
    1560:	eb e0       	ldi	r30, 0x0B	; 11
    1562:	f1 e0       	ldi	r31, 0x01	; 1
    1564:	88 e1       	ldi	r24, 0x18	; 24
    1566:	80 83       	st	Z, r24



	}
    1568:	cf 91       	pop	r28
    156a:	df 91       	pop	r29
    156c:	08 95       	ret

0000156e <uart0_init>:
// desired baud rate:9600
// actual baud rate:9600 (0.0%)
// char size: 8 bit
// parity: Disabled
void uart0_init(void)
{
    156e:	df 93       	push	r29
    1570:	cf 93       	push	r28
    1572:	cd b7       	in	r28, 0x3d	; 61
    1574:	de b7       	in	r29, 0x3e	; 62
 UCSR0B = 0x00; //disable while setting baud rate
    1576:	e1 ec       	ldi	r30, 0xC1	; 193
    1578:	f0 e0       	ldi	r31, 0x00	; 0
    157a:	10 82       	st	Z, r1
 UCSR0A = 0x00;
    157c:	e0 ec       	ldi	r30, 0xC0	; 192
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	10 82       	st	Z, r1
 UCSR0C = 0x06;
    1582:	e2 ec       	ldi	r30, 0xC2	; 194
    1584:	f0 e0       	ldi	r31, 0x00	; 0
    1586:	86 e0       	ldi	r24, 0x06	; 6
    1588:	80 83       	st	Z, r24
 UBRR0L = 0x47; //set baud rate lo
    158a:	e4 ec       	ldi	r30, 0xC4	; 196
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	87 e4       	ldi	r24, 0x47	; 71
    1590:	80 83       	st	Z, r24
 UBRR0H = 0x00; //set baud rate hi
    1592:	e5 ec       	ldi	r30, 0xC5	; 197
    1594:	f0 e0       	ldi	r31, 0x00	; 0
    1596:	10 82       	st	Z, r1
 UCSR0B = 0x98;
    1598:	e1 ec       	ldi	r30, 0xC1	; 193
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	88 e9       	ldi	r24, 0x98	; 152
    159e:	80 83       	st	Z, r24
}
    15a0:	cf 91       	pop	r28
    15a2:	df 91       	pop	r29
    15a4:	08 95       	ret

000015a6 <__vector_25>:


SIGNAL(SIG_USART0_RECV)
{
    15a6:	1f 92       	push	r1
    15a8:	0f 92       	push	r0
    15aa:	0f b6       	in	r0, 0x3f	; 63
    15ac:	0f 92       	push	r0
    15ae:	00 90 5b 00 	lds	r0, 0x005B
    15b2:	0f 92       	push	r0
    15b4:	11 24       	eor	r1, r1
    15b6:	8f 93       	push	r24
    15b8:	ef 93       	push	r30
    15ba:	ff 93       	push	r31
    15bc:	df 93       	push	r29
    15be:	cf 93       	push	r28
    15c0:	cd b7       	in	r28, 0x3d	; 61
    15c2:	de b7       	in	r29, 0x3e	; 62

	data = UDR0; //making copy of data from UDR0 in data variable
    15c4:	e6 ec       	ldi	r30, 0xC6	; 198
    15c6:	f0 e0       	ldi	r31, 0x00	; 0
    15c8:	80 81       	ld	r24, Z
    15ca:	80 93 1d 03 	sts	0x031D, r24
		forward();
		velocity(0,90);
		}
		UDR0= data;
	*/
}
    15ce:	cf 91       	pop	r28
    15d0:	df 91       	pop	r29
    15d2:	ff 91       	pop	r31
    15d4:	ef 91       	pop	r30
    15d6:	8f 91       	pop	r24
    15d8:	0f 90       	pop	r0
    15da:	00 92 5b 00 	sts	0x005B, r0
    15de:	0f 90       	pop	r0
    15e0:	0f be       	out	0x3f, r0	; 63
    15e2:	0f 90       	pop	r0
    15e4:	1f 90       	pop	r1
    15e6:	18 95       	reti

000015e8 <__vector_27>:
SIGNAL(SIG_USART0_TRANS)
{
    15e8:	1f 92       	push	r1
    15ea:	0f 92       	push	r0
    15ec:	0f b6       	in	r0, 0x3f	; 63
    15ee:	0f 92       	push	r0
    15f0:	11 24       	eor	r1, r1
    15f2:	df 93       	push	r29
    15f4:	cf 93       	push	r28
    15f6:	cd b7       	in	r28, 0x3d	; 61
    15f8:	de b7       	in	r29, 0x3e	; 62
}
    15fa:	cf 91       	pop	r28
    15fc:	df 91       	pop	r29
    15fe:	0f 90       	pop	r0
    1600:	0f be       	out	0x3f, r0	; 63
    1602:	0f 90       	pop	r0
    1604:	1f 90       	pop	r1
    1606:	18 95       	reti

00001608 <timer5_init>:

void timer5_init()
{
    1608:	df 93       	push	r29
    160a:	cf 93       	push	r28
    160c:	cd b7       	in	r28, 0x3d	; 61
    160e:	de b7       	in	r29, 0x3e	; 62
	TCCR5B =0x00;
    1610:	e1 e2       	ldi	r30, 0x21	; 33
    1612:	f1 e0       	ldi	r31, 0x01	; 1
    1614:	10 82       	st	Z, r1
	TCCR5A = 0xA1;
    1616:	e0 e2       	ldi	r30, 0x20	; 32
    1618:	f1 e0       	ldi	r31, 0x01	; 1
    161a:	81 ea       	ldi	r24, 0xA1	; 161
    161c:	80 83       	st	Z, r24
	TCCR5B=0x0B;
    161e:	e1 e2       	ldi	r30, 0x21	; 33
    1620:	f1 e0       	ldi	r31, 0x01	; 1
    1622:	8b e0       	ldi	r24, 0x0B	; 11
    1624:	80 83       	st	Z, r24
}
    1626:	cf 91       	pop	r28
    1628:	df 91       	pop	r29
    162a:	08 95       	ret

0000162c <forward>:

void forward()
{
    162c:	df 93       	push	r29
    162e:	cf 93       	push	r28
    1630:	cd b7       	in	r28, 0x3d	; 61
    1632:	de b7       	in	r29, 0x3e	; 62

	PORTA=0x06;
    1634:	e2 e2       	ldi	r30, 0x22	; 34
    1636:	f0 e0       	ldi	r31, 0x00	; 0
    1638:	86 e0       	ldi	r24, 0x06	; 6
    163a:	80 83       	st	Z, r24

}
    163c:	cf 91       	pop	r28
    163e:	df 91       	pop	r29
    1640:	08 95       	ret

00001642 <right>:

void right() //function for moving right
{
    1642:	df 93       	push	r29
    1644:	cf 93       	push	r28
    1646:	cd b7       	in	r28, 0x3d	; 61
    1648:	de b7       	in	r29, 0x3e	; 62
	PORTA=0x02;
    164a:	e2 e2       	ldi	r30, 0x22	; 34
    164c:	f0 e0       	ldi	r31, 0x00	; 0
    164e:	82 e0       	ldi	r24, 0x02	; 2
    1650:	80 83       	st	Z, r24
}
    1652:	cf 91       	pop	r28
    1654:	df 91       	pop	r29
    1656:	08 95       	ret

00001658 <left>:
void left() //function for moving left
{
    1658:	df 93       	push	r29
    165a:	cf 93       	push	r28
    165c:	cd b7       	in	r28, 0x3d	; 61
    165e:	de b7       	in	r29, 0x3e	; 62
	PORTA=0x05;
    1660:	e2 e2       	ldi	r30, 0x22	; 34
    1662:	f0 e0       	ldi	r31, 0x00	; 0
    1664:	85 e0       	ldi	r24, 0x05	; 5
    1666:	80 83       	st	Z, r24
}
    1668:	cf 91       	pop	r28
    166a:	df 91       	pop	r29
    166c:	08 95       	ret

0000166e <back>:
void back() //function for moving backward
{
    166e:	df 93       	push	r29
    1670:	cf 93       	push	r28
    1672:	cd b7       	in	r28, 0x3d	; 61
    1674:	de b7       	in	r29, 0x3e	; 62
	PORTA=0x09;
    1676:	e2 e2       	ldi	r30, 0x22	; 34
    1678:	f0 e0       	ldi	r31, 0x00	; 0
    167a:	89 e0       	ldi	r24, 0x09	; 9
    167c:	80 83       	st	Z, r24
}
    167e:	cf 91       	pop	r28
    1680:	df 91       	pop	r29
    1682:	08 95       	ret

00001684 <stop>:
void stop() //function for moving stop
{
    1684:	df 93       	push	r29
    1686:	cf 93       	push	r28
    1688:	cd b7       	in	r28, 0x3d	; 61
    168a:	de b7       	in	r29, 0x3e	; 62
	PORTA=0x00;
    168c:	e2 e2       	ldi	r30, 0x22	; 34
    168e:	f0 e0       	ldi	r31, 0x00	; 0
    1690:	10 82       	st	Z, r1
}
    1692:	cf 91       	pop	r28
    1694:	df 91       	pop	r29
    1696:	08 95       	ret

00001698 <velocity>:

void velocity (unsigned char t1,unsigned char t2)
{
    1698:	df 93       	push	r29
    169a:	cf 93       	push	r28
    169c:	0f 92       	push	r0
    169e:	0f 92       	push	r0
    16a0:	cd b7       	in	r28, 0x3d	; 61
    16a2:	de b7       	in	r29, 0x3e	; 62
    16a4:	89 83       	std	Y+1, r24	; 0x01
    16a6:	6a 83       	std	Y+2, r22	; 0x02
	OCR5AL = t1;
    16a8:	e8 e2       	ldi	r30, 0x28	; 40
    16aa:	f1 e0       	ldi	r31, 0x01	; 1
    16ac:	89 81       	ldd	r24, Y+1	; 0x01
    16ae:	80 83       	st	Z, r24
	OCR5BL = t2;
    16b0:	ea e2       	ldi	r30, 0x2A	; 42
    16b2:	f1 e0       	ldi	r31, 0x01	; 1
    16b4:	8a 81       	ldd	r24, Y+2	; 0x02
    16b6:	80 83       	st	Z, r24
}
    16b8:	0f 90       	pop	r0
    16ba:	0f 90       	pop	r0
    16bc:	cf 91       	pop	r28
    16be:	df 91       	pop	r29
    16c0:	08 95       	ret

000016c2 <left_position_encoder_interrupt_init>:




void left_position_encoder_interrupt_init(void)
{
    16c2:	df 93       	push	r29
    16c4:	cf 93       	push	r28
    16c6:	cd b7       	in	r28, 0x3d	; 61
    16c8:	de b7       	in	r29, 0x3e	; 62
	cli();
    16ca:	f8 94       	cli
	EICRB=EICRB|0x02;
    16cc:	aa e6       	ldi	r26, 0x6A	; 106
    16ce:	b0 e0       	ldi	r27, 0x00	; 0
    16d0:	ea e6       	ldi	r30, 0x6A	; 106
    16d2:	f0 e0       	ldi	r31, 0x00	; 0
    16d4:	80 81       	ld	r24, Z
    16d6:	82 60       	ori	r24, 0x02	; 2
    16d8:	8c 93       	st	X, r24
	EIMSK=EIMSK|0x10;
    16da:	ad e3       	ldi	r26, 0x3D	; 61
    16dc:	b0 e0       	ldi	r27, 0x00	; 0
    16de:	ed e3       	ldi	r30, 0x3D	; 61
    16e0:	f0 e0       	ldi	r31, 0x00	; 0
    16e2:	80 81       	ld	r24, Z
    16e4:	80 61       	ori	r24, 0x10	; 16
    16e6:	8c 93       	st	X, r24
	sei();
    16e8:	78 94       	sei
}
    16ea:	cf 91       	pop	r28
    16ec:	df 91       	pop	r29
    16ee:	08 95       	ret

000016f0 <right_position_encoder_interrupt_init>:


void right_position_encoder_interrupt_init(void)
{
    16f0:	df 93       	push	r29
    16f2:	cf 93       	push	r28
    16f4:	cd b7       	in	r28, 0x3d	; 61
    16f6:	de b7       	in	r29, 0x3e	; 62
	cli();
    16f8:	f8 94       	cli
	EICRB=EICRB|0x08;
    16fa:	aa e6       	ldi	r26, 0x6A	; 106
    16fc:	b0 e0       	ldi	r27, 0x00	; 0
    16fe:	ea e6       	ldi	r30, 0x6A	; 106
    1700:	f0 e0       	ldi	r31, 0x00	; 0
    1702:	80 81       	ld	r24, Z
    1704:	88 60       	ori	r24, 0x08	; 8
    1706:	8c 93       	st	X, r24
	EIMSK=EIMSK|0x20;
    1708:	ad e3       	ldi	r26, 0x3D	; 61
    170a:	b0 e0       	ldi	r27, 0x00	; 0
    170c:	ed e3       	ldi	r30, 0x3D	; 61
    170e:	f0 e0       	ldi	r31, 0x00	; 0
    1710:	80 81       	ld	r24, Z
    1712:	80 62       	ori	r24, 0x20	; 32
    1714:	8c 93       	st	X, r24
	sei();
    1716:	78 94       	sei
}
    1718:	cf 91       	pop	r28
    171a:	df 91       	pop	r29
    171c:	08 95       	ret

0000171e <angle_rotate>:


void angle_rotate(unsigned int Degrees)
{
    171e:	df 93       	push	r29
    1720:	cf 93       	push	r28
    1722:	cd b7       	in	r28, 0x3d	; 61
    1724:	de b7       	in	r29, 0x3e	; 62
    1726:	2c 97       	sbiw	r28, 0x0c	; 12
    1728:	0f b6       	in	r0, 0x3f	; 63
    172a:	f8 94       	cli
    172c:	de bf       	out	0x3e, r29	; 62
    172e:	0f be       	out	0x3f, r0	; 63
    1730:	cd bf       	out	0x3d, r28	; 61
    1732:	9a 87       	std	Y+10, r25	; 0x0a
    1734:	89 87       	std	Y+9, r24	; 0x09

    float ReqdShaftCount = 0;
    1736:	80 e0       	ldi	r24, 0x00	; 0
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	a0 e0       	ldi	r26, 0x00	; 0
    173c:	b0 e0       	ldi	r27, 0x00	; 0
    173e:	8d 83       	std	Y+5, r24	; 0x05
    1740:	9e 83       	std	Y+6, r25	; 0x06
    1742:	af 83       	std	Y+7, r26	; 0x07
    1744:	b8 87       	std	Y+8, r27	; 0x08
	    unsigned long int ReqdShaftCountInt = 0;
    1746:	19 82       	std	Y+1, r1	; 0x01
    1748:	1a 82       	std	Y+2, r1	; 0x02
    174a:	1b 82       	std	Y+3, r1	; 0x03
    174c:	1c 82       	std	Y+4, r1	; 0x04
		    ReqdShaftCount = (float) Degrees/ 2.045; // division by resolution to get shaft count
    174e:	89 85       	ldd	r24, Y+9	; 0x09
    1750:	9a 85       	ldd	r25, Y+10	; 0x0a
    1752:	cc 01       	movw	r24, r24
    1754:	a0 e0       	ldi	r26, 0x00	; 0
    1756:	b0 e0       	ldi	r27, 0x00	; 0
    1758:	bc 01       	movw	r22, r24
    175a:	cd 01       	movw	r24, r26
    175c:	0e 94 bc 19 	call	0x3378	; 0x3378 <__floatunsisf>
    1760:	dc 01       	movw	r26, r24
    1762:	cb 01       	movw	r24, r22
    1764:	bc 01       	movw	r22, r24
    1766:	cd 01       	movw	r24, r26
    1768:	28 e4       	ldi	r18, 0x48	; 72
    176a:	31 ee       	ldi	r19, 0xE1	; 225
    176c:	42 e0       	ldi	r20, 0x02	; 2
    176e:	50 e4       	ldi	r21, 0x40	; 64
    1770:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <__divsf3>
    1774:	dc 01       	movw	r26, r24
    1776:	cb 01       	movw	r24, r22
    1778:	8d 83       	std	Y+5, r24	; 0x05
    177a:	9e 83       	std	Y+6, r25	; 0x06
    177c:	af 83       	std	Y+7, r26	; 0x07
    177e:	b8 87       	std	Y+8, r27	; 0x08
			ReqdShaftCountInt = (unsigned int) ReqdShaftCount;    
    1780:	6d 81       	ldd	r22, Y+5	; 0x05
    1782:	7e 81       	ldd	r23, Y+6	; 0x06
    1784:	8f 81       	ldd	r24, Y+7	; 0x07
    1786:	98 85       	ldd	r25, Y+8	; 0x08
    1788:	0e 94 fe 14 	call	0x29fc	; 0x29fc <__fixunssfsi>
    178c:	dc 01       	movw	r26, r24
    178e:	cb 01       	movw	r24, r22
    1790:	cc 01       	movw	r24, r24
    1792:	a0 e0       	ldi	r26, 0x00	; 0
    1794:	b0 e0       	ldi	r27, 0x00	; 0
    1796:	89 83       	std	Y+1, r24	; 0x01
    1798:	9a 83       	std	Y+2, r25	; 0x02
    179a:	ab 83       	std	Y+3, r26	; 0x03
    179c:	bc 83       	std	Y+4, r27	; 0x04
			scr = 0; 
    179e:	10 92 0b 03 	sts	0x030B, r1
    17a2:	10 92 0a 03 	sts	0x030A, r1
			scl = 0; 
    17a6:	10 92 21 03 	sts	0x0321, r1
    17aa:	10 92 20 03 	sts	0x0320, r1
			while (1)
			{
			     if((scr>= ReqdShaftCountInt) | (scl >= ReqdShaftCountInt))
    17ae:	80 91 0a 03 	lds	r24, 0x030A
    17b2:	90 91 0b 03 	lds	r25, 0x030B
    17b6:	9c 01       	movw	r18, r24
    17b8:	44 27       	eor	r20, r20
    17ba:	37 fd       	sbrc	r19, 7
    17bc:	40 95       	com	r20
    17be:	54 2f       	mov	r21, r20
    17c0:	1c 86       	std	Y+12, r1	; 0x0c
    17c2:	89 81       	ldd	r24, Y+1	; 0x01
    17c4:	9a 81       	ldd	r25, Y+2	; 0x02
    17c6:	ab 81       	ldd	r26, Y+3	; 0x03
    17c8:	bc 81       	ldd	r27, Y+4	; 0x04
    17ca:	28 17       	cp	r18, r24
    17cc:	39 07       	cpc	r19, r25
    17ce:	4a 07       	cpc	r20, r26
    17d0:	5b 07       	cpc	r21, r27
    17d2:	10 f0       	brcs	.+4      	; 0x17d8 <angle_rotate+0xba>
    17d4:	81 e0       	ldi	r24, 0x01	; 1
    17d6:	8c 87       	std	Y+12, r24	; 0x0c
    17d8:	80 91 20 03 	lds	r24, 0x0320
    17dc:	90 91 21 03 	lds	r25, 0x0321
    17e0:	9c 01       	movw	r18, r24
    17e2:	44 27       	eor	r20, r20
    17e4:	37 fd       	sbrc	r19, 7
    17e6:	40 95       	com	r20
    17e8:	54 2f       	mov	r21, r20
    17ea:	1b 86       	std	Y+11, r1	; 0x0b
    17ec:	89 81       	ldd	r24, Y+1	; 0x01
    17ee:	9a 81       	ldd	r25, Y+2	; 0x02
    17f0:	ab 81       	ldd	r26, Y+3	; 0x03
    17f2:	bc 81       	ldd	r27, Y+4	; 0x04
    17f4:	28 17       	cp	r18, r24
    17f6:	39 07       	cpc	r19, r25
    17f8:	4a 07       	cpc	r20, r26
    17fa:	5b 07       	cpc	r21, r27
    17fc:	10 f0       	brcs	.+4      	; 0x1802 <angle_rotate+0xe4>
    17fe:	91 e0       	ldi	r25, 0x01	; 1
    1800:	9b 87       	std	Y+11, r25	; 0x0b
    1802:	8c 85       	ldd	r24, Y+12	; 0x0c
    1804:	9b 85       	ldd	r25, Y+11	; 0x0b
    1806:	89 2b       	or	r24, r25
    1808:	88 23       	and	r24, r24
    180a:	19 f4       	brne	.+6      	; 0x1812 <angle_rotate+0xf4>
						  break;
				}
					else
					{
						
						right();
    180c:	0e 94 21 0b 	call	0x1642	; 0x1642 <right>
    1810:	ce cf       	rjmp	.-100    	; 0x17ae <angle_rotate+0x90>

					}
			 }
   			stop(); 
    1812:	0e 94 42 0b 	call	0x1684	; 0x1684 <stop>


}
    1816:	2c 96       	adiw	r28, 0x0c	; 12
    1818:	0f b6       	in	r0, 0x3f	; 63
    181a:	f8 94       	cli
    181c:	de bf       	out	0x3e, r29	; 62
    181e:	0f be       	out	0x3f, r0	; 63
    1820:	cd bf       	out	0x3d, r28	; 61
    1822:	cf 91       	pop	r28
    1824:	df 91       	pop	r29
    1826:	08 95       	ret

00001828 <__vector_5>:

ISR(INT4_vect)
{
    1828:	1f 92       	push	r1
    182a:	0f 92       	push	r0
    182c:	0f b6       	in	r0, 0x3f	; 63
    182e:	0f 92       	push	r0
    1830:	11 24       	eor	r1, r1
    1832:	8f 93       	push	r24
    1834:	9f 93       	push	r25
    1836:	df 93       	push	r29
    1838:	cf 93       	push	r28
    183a:	cd b7       	in	r28, 0x3d	; 61
    183c:	de b7       	in	r29, 0x3e	; 62

	scl++;
    183e:	80 91 20 03 	lds	r24, 0x0320
    1842:	90 91 21 03 	lds	r25, 0x0321
    1846:	01 96       	adiw	r24, 0x01	; 1
    1848:	90 93 21 03 	sts	0x0321, r25
    184c:	80 93 20 03 	sts	0x0320, r24
}
    1850:	cf 91       	pop	r28
    1852:	df 91       	pop	r29
    1854:	9f 91       	pop	r25
    1856:	8f 91       	pop	r24
    1858:	0f 90       	pop	r0
    185a:	0f be       	out	0x3f, r0	; 63
    185c:	0f 90       	pop	r0
    185e:	1f 90       	pop	r1
    1860:	18 95       	reti

00001862 <__vector_6>:
//void abc()
ISR(INT5_vect)
{
    1862:	1f 92       	push	r1
    1864:	0f 92       	push	r0
    1866:	0f b6       	in	r0, 0x3f	; 63
    1868:	0f 92       	push	r0
    186a:	11 24       	eor	r1, r1
    186c:	8f 93       	push	r24
    186e:	9f 93       	push	r25
    1870:	df 93       	push	r29
    1872:	cf 93       	push	r28
    1874:	cd b7       	in	r28, 0x3d	; 61
    1876:	de b7       	in	r29, 0x3e	; 62
	scr++;
    1878:	80 91 0a 03 	lds	r24, 0x030A
    187c:	90 91 0b 03 	lds	r25, 0x030B
    1880:	01 96       	adiw	r24, 0x01	; 1
    1882:	90 93 0b 03 	sts	0x030B, r25
    1886:	80 93 0a 03 	sts	0x030A, r24

}
    188a:	cf 91       	pop	r28
    188c:	df 91       	pop	r29
    188e:	9f 91       	pop	r25
    1890:	8f 91       	pop	r24
    1892:	0f 90       	pop	r0
    1894:	0f be       	out	0x3f, r0	; 63
    1896:	0f 90       	pop	r0
    1898:	1f 90       	pop	r1
    189a:	18 95       	reti

0000189c <linear_distance_mm>:




void linear_distance_mm(unsigned int DistanceInMM)
{ 	
    189c:	df 93       	push	r29
    189e:	cf 93       	push	r28
    18a0:	cd b7       	in	r28, 0x3d	; 61
    18a2:	de b7       	in	r29, 0x3e	; 62
    18a4:	2a 97       	sbiw	r28, 0x0a	; 10
    18a6:	0f b6       	in	r0, 0x3f	; 63
    18a8:	f8 94       	cli
    18aa:	de bf       	out	0x3e, r29	; 62
    18ac:	0f be       	out	0x3f, r0	; 63
    18ae:	cd bf       	out	0x3d, r28	; 61
    18b0:	9a 87       	std	Y+10, r25	; 0x0a
    18b2:	89 87       	std	Y+9, r24	; 0x09
	float ReqdShaftCount = 0;
    18b4:	80 e0       	ldi	r24, 0x00	; 0
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	a0 e0       	ldi	r26, 0x00	; 0
    18ba:	b0 e0       	ldi	r27, 0x00	; 0
    18bc:	8d 83       	std	Y+5, r24	; 0x05
    18be:	9e 83       	std	Y+6, r25	; 0x06
    18c0:	af 83       	std	Y+7, r26	; 0x07
    18c2:	b8 87       	std	Y+8, r27	; 0x08
		 unsigned long int ReqdShaftCountInt = 0;
    18c4:	19 82       	std	Y+1, r1	; 0x01
    18c6:	1a 82       	std	Y+2, r1	; 0x02
    18c8:	1b 82       	std	Y+3, r1	; 0x03
    18ca:	1c 82       	std	Y+4, r1	; 0x04
		  	ReqdShaftCount = DistanceInMM / 5.338; 	// division by resolution to get shaft count
    18cc:	89 85       	ldd	r24, Y+9	; 0x09
    18ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    18d0:	cc 01       	movw	r24, r24
    18d2:	a0 e0       	ldi	r26, 0x00	; 0
    18d4:	b0 e0       	ldi	r27, 0x00	; 0
    18d6:	bc 01       	movw	r22, r24
    18d8:	cd 01       	movw	r24, r26
    18da:	0e 94 bc 19 	call	0x3378	; 0x3378 <__floatunsisf>
    18de:	dc 01       	movw	r26, r24
    18e0:	cb 01       	movw	r24, r22
    18e2:	bc 01       	movw	r22, r24
    18e4:	cd 01       	movw	r24, r26
    18e6:	25 ee       	ldi	r18, 0xE5	; 229
    18e8:	30 ed       	ldi	r19, 0xD0	; 208
    18ea:	4a ea       	ldi	r20, 0xAA	; 170
    18ec:	50 e4       	ldi	r21, 0x40	; 64
    18ee:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <__divsf3>
    18f2:	dc 01       	movw	r26, r24
    18f4:	cb 01       	movw	r24, r22
    18f6:	8d 83       	std	Y+5, r24	; 0x05
    18f8:	9e 83       	std	Y+6, r25	; 0x06
    18fa:	af 83       	std	Y+7, r26	; 0x07
    18fc:	b8 87       	std	Y+8, r27	; 0x08
				 ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
    18fe:	6d 81       	ldd	r22, Y+5	; 0x05
    1900:	7e 81       	ldd	r23, Y+6	; 0x06
    1902:	8f 81       	ldd	r24, Y+7	; 0x07
    1904:	98 85       	ldd	r25, Y+8	; 0x08
    1906:	0e 94 fe 14 	call	0x29fc	; 0x29fc <__fixunssfsi>
    190a:	dc 01       	movw	r26, r24
    190c:	cb 01       	movw	r24, r22
    190e:	89 83       	std	Y+1, r24	; 0x01
    1910:	9a 83       	std	Y+2, r25	; 0x02
    1912:	ab 83       	std	Y+3, r26	; 0x03
    1914:	bc 83       	std	Y+4, r27	; 0x04
				  	scr = 0; 	
    1916:	10 92 0b 03 	sts	0x030B, r1
    191a:	10 92 0a 03 	sts	0x030A, r1
					while(1) 	
					{
					  		
							if(scr > ReqdShaftCountInt)
    191e:	80 91 0a 03 	lds	r24, 0x030A
    1922:	90 91 0b 03 	lds	r25, 0x030B
    1926:	9c 01       	movw	r18, r24
    1928:	44 27       	eor	r20, r20
    192a:	37 fd       	sbrc	r19, 7
    192c:	40 95       	com	r20
    192e:	54 2f       	mov	r21, r20
    1930:	89 81       	ldd	r24, Y+1	; 0x01
    1932:	9a 81       	ldd	r25, Y+2	; 0x02
    1934:	ab 81       	ldd	r26, Y+3	; 0x03
    1936:	bc 81       	ldd	r27, Y+4	; 0x04
    1938:	82 17       	cp	r24, r18
    193a:	93 07       	cpc	r25, r19
    193c:	a4 07       	cpc	r26, r20
    193e:	b5 07       	cpc	r27, r21
    1940:	18 f0       	brcs	.+6      	; 0x1948 <linear_distance_mm+0xac>
							 		 {
									   		break;
									}
									else
									{
										forward();
    1942:	0e 94 16 0b 	call	0x162c	; 0x162c <forward>
    1946:	eb cf       	rjmp	.-42     	; 0x191e <linear_distance_mm+0x82>
									}	
					  } 
					  stop(); //Stop action
    1948:	0e 94 42 0b 	call	0x1684	; 0x1684 <stop>
}
    194c:	2a 96       	adiw	r28, 0x0a	; 10
    194e:	0f b6       	in	r0, 0x3f	; 63
    1950:	f8 94       	cli
    1952:	de bf       	out	0x3e, r29	; 62
    1954:	0f be       	out	0x3f, r0	; 63
    1956:	cd bf       	out	0x3d, r28	; 61
    1958:	cf 91       	pop	r28
    195a:	df 91       	pop	r29
    195c:	08 95       	ret

0000195e <lcd_port_config>:


/* code for distance calculation using IR sensor  */

void lcd_port_config (void)
	{
    195e:	df 93       	push	r29
    1960:	cf 93       	push	r28
    1962:	cd b7       	in	r28, 0x3d	; 61
    1964:	de b7       	in	r29, 0x3e	; 62
	DDRC = DDRC | 0xF7; 	//all the LCD pin's direction set as output
    1966:	a7 e2       	ldi	r26, 0x27	; 39
    1968:	b0 e0       	ldi	r27, 0x00	; 0
    196a:	e7 e2       	ldi	r30, 0x27	; 39
    196c:	f0 e0       	ldi	r31, 0x00	; 0
    196e:	80 81       	ld	r24, Z
    1970:	87 6f       	ori	r24, 0xF7	; 247
    1972:	8c 93       	st	X, r24
	PORTC = PORTC & 0x80; 	// all the LCD pins are set to logic 0 except PORTC 7
    1974:	a8 e2       	ldi	r26, 0x28	; 40
    1976:	b0 e0       	ldi	r27, 0x00	; 0
    1978:	e8 e2       	ldi	r30, 0x28	; 40
    197a:	f0 e0       	ldi	r31, 0x00	; 0
    197c:	80 81       	ld	r24, Z
    197e:	80 78       	andi	r24, 0x80	; 128
    1980:	8c 93       	st	X, r24
	}
    1982:	cf 91       	pop	r28
    1984:	df 91       	pop	r29
    1986:	08 95       	ret

00001988 <adc_pin_config>:

//ADC pin configuration
void adc_pin_config (void)
	{
    1988:	df 93       	push	r29
    198a:	cf 93       	push	r28
    198c:	cd b7       	in	r28, 0x3d	; 61
    198e:	de b7       	in	r29, 0x3e	; 62
	DDRF = 0x00; 
    1990:	e0 e3       	ldi	r30, 0x30	; 48
    1992:	f0 e0       	ldi	r31, 0x00	; 0
    1994:	10 82       	st	Z, r1
	PORTF = 0x00;
    1996:	e1 e3       	ldi	r30, 0x31	; 49
    1998:	f0 e0       	ldi	r31, 0x00	; 0
    199a:	10 82       	st	Z, r1
	DDRK = 0x00;
    199c:	e7 e0       	ldi	r30, 0x07	; 7
    199e:	f1 e0       	ldi	r31, 0x01	; 1
    19a0:	10 82       	st	Z, r1
	PORTK = 0x00;
    19a2:	e8 e0       	ldi	r30, 0x08	; 8
    19a4:	f1 e0       	ldi	r31, 0x01	; 1
    19a6:	10 82       	st	Z, r1
	}
    19a8:	cf 91       	pop	r28
    19aa:	df 91       	pop	r29
    19ac:	08 95       	ret

000019ae <port_init>:

void port_init()
	{
    19ae:	df 93       	push	r29
    19b0:	cf 93       	push	r28
    19b2:	cd b7       	in	r28, 0x3d	; 61
    19b4:	de b7       	in	r29, 0x3e	; 62
	lcd_port_config();
    19b6:	0e 94 af 0c 	call	0x195e	; 0x195e <lcd_port_config>
	adc_pin_config();	
    19ba:	0e 94 c4 0c 	call	0x1988	; 0x1988 <adc_pin_config>
	}
    19be:	cf 91       	pop	r28
    19c0:	df 91       	pop	r29
    19c2:	08 95       	ret

000019c4 <adc_init>:
	
void adc_init()
	{
    19c4:	df 93       	push	r29
    19c6:	cf 93       	push	r28
    19c8:	cd b7       	in	r28, 0x3d	; 61
    19ca:	de b7       	in	r29, 0x3e	; 62
	ADCSRA = 0x00;
    19cc:	ea e7       	ldi	r30, 0x7A	; 122
    19ce:	f0 e0       	ldi	r31, 0x00	; 0
    19d0:	10 82       	st	Z, r1
	ADCSRB = 0x00;		//MUX5 = 0
    19d2:	eb e7       	ldi	r30, 0x7B	; 123
    19d4:	f0 e0       	ldi	r31, 0x00	; 0
    19d6:	10 82       	st	Z, r1
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
    19d8:	ec e7       	ldi	r30, 0x7C	; 124
    19da:	f0 e0       	ldi	r31, 0x00	; 0
    19dc:	80 e2       	ldi	r24, 0x20	; 32
    19de:	80 83       	st	Z, r24
	ACSR = 0x80;
    19e0:	e0 e5       	ldi	r30, 0x50	; 80
    19e2:	f0 e0       	ldi	r31, 0x00	; 0
    19e4:	80 e8       	ldi	r24, 0x80	; 128
    19e6:	80 83       	st	Z, r24
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
    19e8:	ea e7       	ldi	r30, 0x7A	; 122
    19ea:	f0 e0       	ldi	r31, 0x00	; 0
    19ec:	86 e8       	ldi	r24, 0x86	; 134
    19ee:	80 83       	st	Z, r24
	}
    19f0:	cf 91       	pop	r28
    19f2:	df 91       	pop	r29
    19f4:	08 95       	ret

000019f6 <init_devices>:

void init_devices (void)
	{
    19f6:	df 93       	push	r29
    19f8:	cf 93       	push	r28
    19fa:	cd b7       	in	r28, 0x3d	; 61
    19fc:	de b7       	in	r29, 0x3e	; 62
	cli(); //Clears the global interrupts
    19fe:	f8 94       	cli
	port_init();
    1a00:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <port_init>
	adc_init();
    1a04:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <adc_init>
	sei(); //Enables the global interrupts
    1a08:	78 94       	sei
	}
    1a0a:	cf 91       	pop	r28
    1a0c:	df 91       	pop	r29
    1a0e:	08 95       	ret

00001a10 <ADC_Conversion>:
	
unsigned char ADC_Conversion(unsigned char Ch)
	{
    1a10:	df 93       	push	r29
    1a12:	cf 93       	push	r28
    1a14:	0f 92       	push	r0
    1a16:	0f 92       	push	r0
    1a18:	cd b7       	in	r28, 0x3d	; 61
    1a1a:	de b7       	in	r29, 0x3e	; 62
    1a1c:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char a;
	if(Ch>7)
    1a1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a20:	88 30       	cpi	r24, 0x08	; 8
    1a22:	20 f0       	brcs	.+8      	; 0x1a2c <ADC_Conversion+0x1c>
		{
		ADCSRB = 0x08;			// select the ch. > 7
    1a24:	eb e7       	ldi	r30, 0x7B	; 123
    1a26:	f0 e0       	ldi	r31, 0x00	; 0
    1a28:	88 e0       	ldi	r24, 0x08	; 8
    1a2a:	80 83       	st	Z, r24
		}
	Ch = Ch & 0x07;  			
    1a2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a2e:	87 70       	andi	r24, 0x07	; 7
    1a30:	8a 83       	std	Y+2, r24	; 0x02
	ADMUX= 0x20| Ch;	   		//do not disturb the left adjustment
    1a32:	ec e7       	ldi	r30, 0x7C	; 124
    1a34:	f0 e0       	ldi	r31, 0x00	; 0
    1a36:	8a 81       	ldd	r24, Y+2	; 0x02
    1a38:	80 62       	ori	r24, 0x20	; 32
    1a3a:	80 83       	st	Z, r24
	ADCSRA = ADCSRA | 0x40;		//Set start conversion bit
    1a3c:	aa e7       	ldi	r26, 0x7A	; 122
    1a3e:	b0 e0       	ldi	r27, 0x00	; 0
    1a40:	ea e7       	ldi	r30, 0x7A	; 122
    1a42:	f0 e0       	ldi	r31, 0x00	; 0
    1a44:	80 81       	ld	r24, Z
    1a46:	80 64       	ori	r24, 0x40	; 64
    1a48:	8c 93       	st	X, r24
	while((ADCSRA&0x10)==0);	//Wait for ADC conversion to complete
    1a4a:	ea e7       	ldi	r30, 0x7A	; 122
    1a4c:	f0 e0       	ldi	r31, 0x00	; 0
    1a4e:	80 81       	ld	r24, Z
    1a50:	88 2f       	mov	r24, r24
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	80 71       	andi	r24, 0x10	; 16
    1a56:	90 70       	andi	r25, 0x00	; 0
    1a58:	00 97       	sbiw	r24, 0x00	; 0
    1a5a:	b9 f3       	breq	.-18     	; 0x1a4a <ADC_Conversion+0x3a>
	a=ADCH;
    1a5c:	e9 e7       	ldi	r30, 0x79	; 121
    1a5e:	f0 e0       	ldi	r31, 0x00	; 0
    1a60:	80 81       	ld	r24, Z
    1a62:	89 83       	std	Y+1, r24	; 0x01
	ADCSRA = ADCSRA|0x10; 		//clear ADIF (ADC Interrupt Flag) by writing 1 to it
    1a64:	aa e7       	ldi	r26, 0x7A	; 122
    1a66:	b0 e0       	ldi	r27, 0x00	; 0
    1a68:	ea e7       	ldi	r30, 0x7A	; 122
    1a6a:	f0 e0       	ldi	r31, 0x00	; 0
    1a6c:	80 81       	ld	r24, Z
    1a6e:	80 61       	ori	r24, 0x10	; 16
    1a70:	8c 93       	st	X, r24
	ADCSRB = 0x00;
    1a72:	eb e7       	ldi	r30, 0x7B	; 123
    1a74:	f0 e0       	ldi	r31, 0x00	; 0
    1a76:	10 82       	st	Z, r1
	return a;
    1a78:	89 81       	ldd	r24, Y+1	; 0x01
	}
    1a7a:	0f 90       	pop	r0
    1a7c:	0f 90       	pop	r0
    1a7e:	cf 91       	pop	r28
    1a80:	df 91       	pop	r29
    1a82:	08 95       	ret

00001a84 <Sharp_GP2D12_estimation>:
	
unsigned int Sharp_GP2D12_estimation(unsigned char adc_reading)
	{
    1a84:	df 93       	push	r29
    1a86:	cf 93       	push	r28
    1a88:	cd b7       	in	r28, 0x3d	; 61
    1a8a:	de b7       	in	r29, 0x3e	; 62
    1a8c:	27 97       	sbiw	r28, 0x07	; 7
    1a8e:	0f b6       	in	r0, 0x3f	; 63
    1a90:	f8 94       	cli
    1a92:	de bf       	out	0x3e, r29	; 62
    1a94:	0f be       	out	0x3f, r0	; 63
    1a96:	cd bf       	out	0x3d, r28	; 61
    1a98:	8f 83       	std	Y+7, r24	; 0x07
	float distance;
	unsigned int distanceInt;
	distance = (int)(10.00*(2799.6*(1.00/(pow(adc_reading,1.1546)))));
    1a9a:	8f 81       	ldd	r24, Y+7	; 0x07
    1a9c:	88 2f       	mov	r24, r24
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	a0 e0       	ldi	r26, 0x00	; 0
    1aa2:	b0 e0       	ldi	r27, 0x00	; 0
    1aa4:	bc 01       	movw	r22, r24
    1aa6:	cd 01       	movw	r24, r26
    1aa8:	0e 94 bc 19 	call	0x3378	; 0x3378 <__floatunsisf>
    1aac:	dc 01       	movw	r26, r24
    1aae:	cb 01       	movw	r24, r22
    1ab0:	bc 01       	movw	r22, r24
    1ab2:	cd 01       	movw	r24, r26
    1ab4:	2f ee       	ldi	r18, 0xEF	; 239
    1ab6:	39 ec       	ldi	r19, 0xC9	; 201
    1ab8:	43 e9       	ldi	r20, 0x93	; 147
    1aba:	5f e3       	ldi	r21, 0x3F	; 63
    1abc:	0e 94 75 1c 	call	0x38ea	; 0x38ea <pow>
    1ac0:	dc 01       	movw	r26, r24
    1ac2:	cb 01       	movw	r24, r22
    1ac4:	9c 01       	movw	r18, r24
    1ac6:	ad 01       	movw	r20, r26
    1ac8:	60 e0       	ldi	r22, 0x00	; 0
    1aca:	70 e0       	ldi	r23, 0x00	; 0
    1acc:	80 e8       	ldi	r24, 0x80	; 128
    1ace:	9f e3       	ldi	r25, 0x3F	; 63
    1ad0:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <__divsf3>
    1ad4:	dc 01       	movw	r26, r24
    1ad6:	cb 01       	movw	r24, r22
    1ad8:	bc 01       	movw	r22, r24
    1ada:	cd 01       	movw	r24, r26
    1adc:	2a e9       	ldi	r18, 0x9A	; 154
    1ade:	39 ef       	ldi	r19, 0xF9	; 249
    1ae0:	4e e2       	ldi	r20, 0x2E	; 46
    1ae2:	55 e4       	ldi	r21, 0x45	; 69
    1ae4:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <__mulsf3>
    1ae8:	dc 01       	movw	r26, r24
    1aea:	cb 01       	movw	r24, r22
    1aec:	bc 01       	movw	r22, r24
    1aee:	cd 01       	movw	r24, r26
    1af0:	20 e0       	ldi	r18, 0x00	; 0
    1af2:	30 e0       	ldi	r19, 0x00	; 0
    1af4:	40 e2       	ldi	r20, 0x20	; 32
    1af6:	51 e4       	ldi	r21, 0x41	; 65
    1af8:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <__mulsf3>
    1afc:	dc 01       	movw	r26, r24
    1afe:	cb 01       	movw	r24, r22
    1b00:	bc 01       	movw	r22, r24
    1b02:	cd 01       	movw	r24, r26
    1b04:	0e 94 68 19 	call	0x32d0	; 0x32d0 <__fixsfsi>
    1b08:	dc 01       	movw	r26, r24
    1b0a:	cb 01       	movw	r24, r22
    1b0c:	aa 27       	eor	r26, r26
    1b0e:	97 fd       	sbrc	r25, 7
    1b10:	a0 95       	com	r26
    1b12:	ba 2f       	mov	r27, r26
    1b14:	bc 01       	movw	r22, r24
    1b16:	cd 01       	movw	r24, r26
    1b18:	0e 94 0a 19 	call	0x3214	; 0x3214 <__floatsisf>
    1b1c:	dc 01       	movw	r26, r24
    1b1e:	cb 01       	movw	r24, r22
    1b20:	8b 83       	std	Y+3, r24	; 0x03
    1b22:	9c 83       	std	Y+4, r25	; 0x04
    1b24:	ad 83       	std	Y+5, r26	; 0x05
    1b26:	be 83       	std	Y+6, r27	; 0x06
	distanceInt = (int)distance;
    1b28:	6b 81       	ldd	r22, Y+3	; 0x03
    1b2a:	7c 81       	ldd	r23, Y+4	; 0x04
    1b2c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b2e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b30:	0e 94 68 19 	call	0x32d0	; 0x32d0 <__fixsfsi>
    1b34:	dc 01       	movw	r26, r24
    1b36:	cb 01       	movw	r24, r22
    1b38:	9a 83       	std	Y+2, r25	; 0x02
    1b3a:	89 83       	std	Y+1, r24	; 0x01
	if(distanceInt>800)
    1b3c:	89 81       	ldd	r24, Y+1	; 0x01
    1b3e:	9a 81       	ldd	r25, Y+2	; 0x02
    1b40:	23 e0       	ldi	r18, 0x03	; 3
    1b42:	81 32       	cpi	r24, 0x21	; 33
    1b44:	92 07       	cpc	r25, r18
    1b46:	20 f0       	brcs	.+8      	; 0x1b50 <Sharp_GP2D12_estimation+0xcc>
		{
		distanceInt=800;
    1b48:	80 e2       	ldi	r24, 0x20	; 32
    1b4a:	93 e0       	ldi	r25, 0x03	; 3
    1b4c:	9a 83       	std	Y+2, r25	; 0x02
    1b4e:	89 83       	std	Y+1, r24	; 0x01
		}
	return distanceInt;
    1b50:	89 81       	ldd	r24, Y+1	; 0x01
    1b52:	9a 81       	ldd	r25, Y+2	; 0x02
	}
    1b54:	27 96       	adiw	r28, 0x07	; 7
    1b56:	0f b6       	in	r0, 0x3f	; 63
    1b58:	f8 94       	cli
    1b5a:	de bf       	out	0x3e, r29	; 62
    1b5c:	0f be       	out	0x3f, r0	; 63
    1b5e:	cd bf       	out	0x3d, r28	; 61
    1b60:	cf 91       	pop	r28
    1b62:	df 91       	pop	r29
    1b64:	08 95       	ret

00001b66 <delnms>:


void delnms(unsigned int n)
{
    1b66:	df 93       	push	r29
    1b68:	cf 93       	push	r28
    1b6a:	00 d0       	rcall	.+0      	; 0x1b6c <delnms+0x6>
    1b6c:	00 d0       	rcall	.+0      	; 0x1b6e <delnms+0x8>
    1b6e:	cd b7       	in	r28, 0x3d	; 61
    1b70:	de b7       	in	r29, 0x3e	; 62
    1b72:	9c 83       	std	Y+4, r25	; 0x04
    1b74:	8b 83       	std	Y+3, r24	; 0x03
    1b76:	13 c0       	rjmp	.+38     	; 0x1b9e <delnms+0x38>
	unsigned int x;
	while(n--)
	{
		x=2600;
    1b78:	88 e2       	ldi	r24, 0x28	; 40
    1b7a:	9a e0       	ldi	r25, 0x0A	; 10
    1b7c:	9a 83       	std	Y+2, r25	; 0x02
    1b7e:	89 83       	std	Y+1, r24	; 0x01
		while(x--);
    1b80:	1e 82       	std	Y+6, r1	; 0x06
    1b82:	89 81       	ldd	r24, Y+1	; 0x01
    1b84:	9a 81       	ldd	r25, Y+2	; 0x02
    1b86:	00 97       	sbiw	r24, 0x00	; 0
    1b88:	11 f0       	breq	.+4      	; 0x1b8e <delnms+0x28>
    1b8a:	81 e0       	ldi	r24, 0x01	; 1
    1b8c:	8e 83       	std	Y+6, r24	; 0x06
    1b8e:	89 81       	ldd	r24, Y+1	; 0x01
    1b90:	9a 81       	ldd	r25, Y+2	; 0x02
    1b92:	01 97       	sbiw	r24, 0x01	; 1
    1b94:	9a 83       	std	Y+2, r25	; 0x02
    1b96:	89 83       	std	Y+1, r24	; 0x01
    1b98:	8e 81       	ldd	r24, Y+6	; 0x06
    1b9a:	88 23       	and	r24, r24
    1b9c:	89 f7       	brne	.-30     	; 0x1b80 <delnms+0x1a>


void delnms(unsigned int n)
{
	unsigned int x;
	while(n--)
    1b9e:	1d 82       	std	Y+5, r1	; 0x05
    1ba0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ba4:	00 97       	sbiw	r24, 0x00	; 0
    1ba6:	11 f0       	breq	.+4      	; 0x1bac <delnms+0x46>
    1ba8:	81 e0       	ldi	r24, 0x01	; 1
    1baa:	8d 83       	std	Y+5, r24	; 0x05
    1bac:	8b 81       	ldd	r24, Y+3	; 0x03
    1bae:	9c 81       	ldd	r25, Y+4	; 0x04
    1bb0:	01 97       	sbiw	r24, 0x01	; 1
    1bb2:	9c 83       	std	Y+4, r25	; 0x04
    1bb4:	8b 83       	std	Y+3, r24	; 0x03
    1bb6:	8d 81       	ldd	r24, Y+5	; 0x05
    1bb8:	88 23       	and	r24, r24
    1bba:	f1 f6       	brne	.-68     	; 0x1b78 <delnms+0x12>
	{
		x=2600;
		while(x--);
	}

}
    1bbc:	26 96       	adiw	r28, 0x06	; 6
    1bbe:	0f b6       	in	r0, 0x3f	; 63
    1bc0:	f8 94       	cli
    1bc2:	de bf       	out	0x3e, r29	; 62
    1bc4:	0f be       	out	0x3f, r0	; 63
    1bc6:	cd bf       	out	0x3d, r28	; 61
    1bc8:	cf 91       	pop	r28
    1bca:	df 91       	pop	r29
    1bcc:	08 95       	ret

00001bce <servo3_pin_config>:



//Configure PORTB 7 pin for servo motor 3 operation
void servo3_pin_config (void)
{
    1bce:	df 93       	push	r29
    1bd0:	cf 93       	push	r28
    1bd2:	cd b7       	in	r28, 0x3d	; 61
    1bd4:	de b7       	in	r29, 0x3e	; 62
 DDRB  = DDRB | 0x80;  //making PORTB 7 pin output
    1bd6:	a4 e2       	ldi	r26, 0x24	; 36
    1bd8:	b0 e0       	ldi	r27, 0x00	; 0
    1bda:	e4 e2       	ldi	r30, 0x24	; 36
    1bdc:	f0 e0       	ldi	r31, 0x00	; 0
    1bde:	80 81       	ld	r24, Z
    1be0:	80 68       	ori	r24, 0x80	; 128
    1be2:	8c 93       	st	X, r24
 PORTB = PORTB | 0x80; //setting PORTB 7 pin to logic 1
    1be4:	a5 e2       	ldi	r26, 0x25	; 37
    1be6:	b0 e0       	ldi	r27, 0x00	; 0
    1be8:	e5 e2       	ldi	r30, 0x25	; 37
    1bea:	f0 e0       	ldi	r31, 0x00	; 0
    1bec:	80 81       	ld	r24, Z
    1bee:	80 68       	ori	r24, 0x80	; 128
    1bf0:	8c 93       	st	X, r24
}
    1bf2:	cf 91       	pop	r28
    1bf4:	df 91       	pop	r29
    1bf6:	08 95       	ret

00001bf8 <port_init_servo>:

//Initialize the ports
void port_init_servo(void)
{ 
    1bf8:	df 93       	push	r29
    1bfa:	cf 93       	push	r28
    1bfc:	cd b7       	in	r28, 0x3d	; 61
    1bfe:	de b7       	in	r29, 0x3e	; 62
 servo3_pin_config(); //Configure PORTB 7 pin for servo motor 3 operation  
    1c00:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <servo3_pin_config>
}
    1c04:	cf 91       	pop	r28
    1c06:	df 91       	pop	r29
    1c08:	08 95       	ret

00001c0a <timer1_init>:
//TIMER1 initialization in 10 bit fast PWM mode  
//prescale:256
// WGM: 7) PWM 10bit fast, TOP=0x03FF
// actual value: 42.187Hz 
void timer1_init(void)
{
    1c0a:	df 93       	push	r29
    1c0c:	cf 93       	push	r28
    1c0e:	cd b7       	in	r28, 0x3d	; 61
    1c10:	de b7       	in	r29, 0x3e	; 62
 TCCR1B = 0x00; //stop
    1c12:	e1 e8       	ldi	r30, 0x81	; 129
    1c14:	f0 e0       	ldi	r31, 0x00	; 0
    1c16:	10 82       	st	Z, r1
 TCNT1H = 0xFC; //Counter high value to which OCR1xH value is to be compared with
    1c18:	e5 e8       	ldi	r30, 0x85	; 133
    1c1a:	f0 e0       	ldi	r31, 0x00	; 0
    1c1c:	8c ef       	ldi	r24, 0xFC	; 252
    1c1e:	80 83       	st	Z, r24
 TCNT1L = 0x01;	//Counter low value to which OCR1xH value is to be compared with
    1c20:	e4 e8       	ldi	r30, 0x84	; 132
    1c22:	f0 e0       	ldi	r31, 0x00	; 0
    1c24:	81 e0       	ldi	r24, 0x01	; 1
    1c26:	80 83       	st	Z, r24
 OCR1AH = 0x03;	//Output compare eegister high value for servo 1
    1c28:	e9 e8       	ldi	r30, 0x89	; 137
    1c2a:	f0 e0       	ldi	r31, 0x00	; 0
    1c2c:	83 e0       	ldi	r24, 0x03	; 3
    1c2e:	80 83       	st	Z, r24
 OCR1AL = 0xFF;	//Output Compare Register low Value For servo 1
    1c30:	e8 e8       	ldi	r30, 0x88	; 136
    1c32:	f0 e0       	ldi	r31, 0x00	; 0
    1c34:	8f ef       	ldi	r24, 0xFF	; 255
    1c36:	80 83       	st	Z, r24
 OCR1BH = 0x03;	//Output compare eegister high value for servo 2
    1c38:	eb e8       	ldi	r30, 0x8B	; 139
    1c3a:	f0 e0       	ldi	r31, 0x00	; 0
    1c3c:	83 e0       	ldi	r24, 0x03	; 3
    1c3e:	80 83       	st	Z, r24
 OCR1BL = 0xFF;	//Output Compare Register low Value For servo 2
    1c40:	ea e8       	ldi	r30, 0x8A	; 138
    1c42:	f0 e0       	ldi	r31, 0x00	; 0
    1c44:	8f ef       	ldi	r24, 0xFF	; 255
    1c46:	80 83       	st	Z, r24
 OCR1CH = 0x03;	///Output compare eegister high value for servo 3
    1c48:	ed e8       	ldi	r30, 0x8D	; 141
    1c4a:	f0 e0       	ldi	r31, 0x00	; 0
    1c4c:	83 e0       	ldi	r24, 0x03	; 3
    1c4e:	80 83       	st	Z, r24
 OCR1CL = 0xFF;	//Output Compare Register low Value For servo 3
    1c50:	ec e8       	ldi	r30, 0x8C	; 140
    1c52:	f0 e0       	ldi	r31, 0x00	; 0
    1c54:	8f ef       	ldi	r24, 0xFF	; 255
    1c56:	80 83       	st	Z, r24
 ICR1H  = 0x03;	
    1c58:	e7 e8       	ldi	r30, 0x87	; 135
    1c5a:	f0 e0       	ldi	r31, 0x00	; 0
    1c5c:	83 e0       	ldi	r24, 0x03	; 3
    1c5e:	80 83       	st	Z, r24
 ICR1L  = 0xFF;
    1c60:	e6 e8       	ldi	r30, 0x86	; 134
    1c62:	f0 e0       	ldi	r31, 0x00	; 0
    1c64:	8f ef       	ldi	r24, 0xFF	; 255
    1c66:	80 83       	st	Z, r24
 TCCR1A = 0xAB; /*{COM1A1=1, COM1A0=0; COM1B1=1, COM1B0=0; COM1C1=1 COM1C0=0}
    1c68:	e0 e8       	ldi	r30, 0x80	; 128
    1c6a:	f0 e0       	ldi	r31, 0x00	; 0
    1c6c:	8b ea       	ldi	r24, 0xAB	; 171
    1c6e:	80 83       	st	Z, r24
 					For Overriding normal port functionalit to OCRnA outputs.
				  {WGM11=1, WGM10=1} Along With WGM12 in TCCR1B for Selecting FAST PWM Mode*/
 TCCR1C = 0x00;
    1c70:	e2 e8       	ldi	r30, 0x82	; 130
    1c72:	f0 e0       	ldi	r31, 0x00	; 0
    1c74:	10 82       	st	Z, r1
 TCCR1B = 0x0C; //WGM12=1; CS12=1, CS11=0, CS10=0 (Prescaler=256)
    1c76:	e1 e8       	ldi	r30, 0x81	; 129
    1c78:	f0 e0       	ldi	r31, 0x00	; 0
    1c7a:	8c e0       	ldi	r24, 0x0C	; 12
    1c7c:	80 83       	st	Z, r24
}
    1c7e:	cf 91       	pop	r28
    1c80:	df 91       	pop	r29
    1c82:	08 95       	ret

00001c84 <init_devices_servo>:


//Function to initialize all the peripherals
void init_devices_servo(void)
{
    1c84:	df 93       	push	r29
    1c86:	cf 93       	push	r28
    1c88:	cd b7       	in	r28, 0x3d	; 61
    1c8a:	de b7       	in	r29, 0x3e	; 62
 cli(); //disable all interrupts
    1c8c:	f8 94       	cli
 port_init_servo();
    1c8e:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <port_init_servo>
 timer1_init();
    1c92:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <timer1_init>
 sei(); //re-enable interrupts 
    1c96:	78 94       	sei
}
    1c98:	cf 91       	pop	r28
    1c9a:	df 91       	pop	r29
    1c9c:	08 95       	ret

00001c9e <servo_3>:


//Function to rotate Servo 3 by a specified angle in the multiples of 2.25 degrees
void servo_3(unsigned char degrees)
{
    1c9e:	0f 93       	push	r16
    1ca0:	1f 93       	push	r17
    1ca2:	df 93       	push	r29
    1ca4:	cf 93       	push	r28
    1ca6:	00 d0       	rcall	.+0      	; 0x1ca8 <servo_3+0xa>
    1ca8:	0f 92       	push	r0
    1caa:	0f 92       	push	r0
    1cac:	cd b7       	in	r28, 0x3d	; 61
    1cae:	de b7       	in	r29, 0x3e	; 62
    1cb0:	8d 83       	std	Y+5, r24	; 0x05
 float PositionTiltServo = 0;
    1cb2:	80 e0       	ldi	r24, 0x00	; 0
    1cb4:	90 e0       	ldi	r25, 0x00	; 0
    1cb6:	a0 e0       	ldi	r26, 0x00	; 0
    1cb8:	b0 e0       	ldi	r27, 0x00	; 0
    1cba:	89 83       	std	Y+1, r24	; 0x01
    1cbc:	9a 83       	std	Y+2, r25	; 0x02
    1cbe:	ab 83       	std	Y+3, r26	; 0x03
    1cc0:	bc 83       	std	Y+4, r27	; 0x04
 PositionTiltServo = ((float)degrees / 2.25) + 21.0;
    1cc2:	8d 81       	ldd	r24, Y+5	; 0x05
    1cc4:	88 2f       	mov	r24, r24
    1cc6:	90 e0       	ldi	r25, 0x00	; 0
    1cc8:	a0 e0       	ldi	r26, 0x00	; 0
    1cca:	b0 e0       	ldi	r27, 0x00	; 0
    1ccc:	bc 01       	movw	r22, r24
    1cce:	cd 01       	movw	r24, r26
    1cd0:	0e 94 bc 19 	call	0x3378	; 0x3378 <__floatunsisf>
    1cd4:	dc 01       	movw	r26, r24
    1cd6:	cb 01       	movw	r24, r22
    1cd8:	bc 01       	movw	r22, r24
    1cda:	cd 01       	movw	r24, r26
    1cdc:	20 e0       	ldi	r18, 0x00	; 0
    1cde:	30 e0       	ldi	r19, 0x00	; 0
    1ce0:	40 e1       	ldi	r20, 0x10	; 16
    1ce2:	50 e4       	ldi	r21, 0x40	; 64
    1ce4:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <__divsf3>
    1ce8:	dc 01       	movw	r26, r24
    1cea:	cb 01       	movw	r24, r22
    1cec:	bc 01       	movw	r22, r24
    1cee:	cd 01       	movw	r24, r26
    1cf0:	20 e0       	ldi	r18, 0x00	; 0
    1cf2:	30 e0       	ldi	r19, 0x00	; 0
    1cf4:	48 ea       	ldi	r20, 0xA8	; 168
    1cf6:	51 e4       	ldi	r21, 0x41	; 65
    1cf8:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <__addsf3>
    1cfc:	dc 01       	movw	r26, r24
    1cfe:	cb 01       	movw	r24, r22
    1d00:	89 83       	std	Y+1, r24	; 0x01
    1d02:	9a 83       	std	Y+2, r25	; 0x02
    1d04:	ab 83       	std	Y+3, r26	; 0x03
    1d06:	bc 83       	std	Y+4, r27	; 0x04
 OCR1CH = 0x00;
    1d08:	ed e8       	ldi	r30, 0x8D	; 141
    1d0a:	f0 e0       	ldi	r31, 0x00	; 0
    1d0c:	10 82       	st	Z, r1
 OCR1CL = (unsigned char) PositionTiltServo;
    1d0e:	0c e8       	ldi	r16, 0x8C	; 140
    1d10:	10 e0       	ldi	r17, 0x00	; 0
    1d12:	69 81       	ldd	r22, Y+1	; 0x01
    1d14:	7a 81       	ldd	r23, Y+2	; 0x02
    1d16:	8b 81       	ldd	r24, Y+3	; 0x03
    1d18:	9c 81       	ldd	r25, Y+4	; 0x04
    1d1a:	0e 94 fe 14 	call	0x29fc	; 0x29fc <__fixunssfsi>
    1d1e:	dc 01       	movw	r26, r24
    1d20:	cb 01       	movw	r24, r22
    1d22:	f8 01       	movw	r30, r16
    1d24:	80 83       	st	Z, r24
}
    1d26:	0f 90       	pop	r0
    1d28:	0f 90       	pop	r0
    1d2a:	0f 90       	pop	r0
    1d2c:	0f 90       	pop	r0
    1d2e:	0f 90       	pop	r0
    1d30:	cf 91       	pop	r28
    1d32:	df 91       	pop	r29
    1d34:	1f 91       	pop	r17
    1d36:	0f 91       	pop	r16
    1d38:	08 95       	ret

00001d3a <servo_3_free>:
//and make them free by giving 100% duty cycle at the PWM. This function can be used to 
//reduce the power consumption of the motor if it is holding load against the gravity.


void servo_3_free (void) //makes servo 3 free rotating
{
    1d3a:	df 93       	push	r29
    1d3c:	cf 93       	push	r28
    1d3e:	cd b7       	in	r28, 0x3d	; 61
    1d40:	de b7       	in	r29, 0x3e	; 62
 OCR1CH = 0x03;
    1d42:	ed e8       	ldi	r30, 0x8D	; 141
    1d44:	f0 e0       	ldi	r31, 0x00	; 0
    1d46:	83 e0       	ldi	r24, 0x03	; 3
    1d48:	80 83       	st	Z, r24
 OCR1CL = 0xFF; //Servo 3 off
    1d4a:	ec e8       	ldi	r30, 0x8C	; 140
    1d4c:	f0 e0       	ldi	r31, 0x00	; 0
    1d4e:	8f ef       	ldi	r24, 0xFF	; 255
    1d50:	80 83       	st	Z, r24
} 
    1d52:	cf 91       	pop	r28
    1d54:	df 91       	pop	r29
    1d56:	08 95       	ret

00001d58 <main>:


//Main function

void main()
{
    1d58:	0f 93       	push	r16
    1d5a:	1f 93       	push	r17
    1d5c:	df 93       	push	r29
    1d5e:	cf 93       	push	r28
    1d60:	cd b7       	in	r28, 0x3d	; 61
    1d62:	de b7       	in	r29, 0x3e	; 62
    1d64:	c5 58       	subi	r28, 0x85	; 133
    1d66:	d0 40       	sbci	r29, 0x00	; 0
    1d68:	0f b6       	in	r0, 0x3f	; 63
    1d6a:	f8 94       	cli
    1d6c:	de bf       	out	0x3e, r29	; 62
    1d6e:	0f be       	out	0x3f, r0	; 63
    1d70:	cd bf       	out	0x3d, r28	; 61
	unsigned int value;
	int a=0,b=0;
    1d72:	fe 01       	movw	r30, r28
    1d74:	ee 57       	subi	r30, 0x7E	; 126
    1d76:	ff 4f       	sbci	r31, 0xFF	; 255
    1d78:	11 82       	std	Z+1, r1	; 0x01
    1d7a:	10 82       	st	Z, r1
    1d7c:	fe 01       	movw	r30, r28
    1d7e:	e0 58       	subi	r30, 0x80	; 128
    1d80:	ff 4f       	sbci	r31, 0xFF	; 255
    1d82:	11 82       	std	Z+1, r1	; 0x01
    1d84:	10 82       	st	Z, r1
	cli();
    1d86:	f8 94       	cli
	INIT_PORTS();
    1d88:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <INIT_PORTS>
	uart0_init();
    1d8c:	0e 94 b7 0a 	call	0x156e	; 0x156e <uart0_init>
	timer5_init();
    1d90:	0e 94 04 0b 	call	0x1608	; 0x1608 <timer5_init>
	sei();
    1d94:	78 94       	sei

	INIT_PORTS_ROTATE();
    1d96:	0e 94 99 0a 	call	0x1532	; 0x1532 <INIT_PORTS_ROTATE>
	right_position_encoder_interrupt_init();
    1d9a:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <right_position_encoder_interrupt_init>
	left_position_encoder_interrupt_init();
    1d9e:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <left_position_encoder_interrupt_init>
			
	init_devices();
    1da2:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <init_devices>
	lcd_set_4bit();
    1da6:	0e 94 d6 00 	call	0x1ac	; 0x1ac <lcd_set_4bit>
	lcd_init();
    1daa:	0e 94 d5 05 	call	0xbaa	; 0xbaa <lcd_init>

	unsigned char angle = 0;
    1dae:	fe 01       	movw	r30, r28
    1db0:	e1 58       	subi	r30, 0x81	; 129
    1db2:	ff 4f       	sbci	r31, 0xFF	; 255
    1db4:	10 82       	st	Z, r1
 	init_devices_servo();
    1db6:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <init_devices_servo>

	data='0';
    1dba:	80 e3       	ldi	r24, 0x30	; 48
    1dbc:	80 93 1d 03 	sts	0x031D, r24
	sharp = ADC_Conversion(11);						//Stores the Analog value of front sharp connected to ADC channel 11 into variable "sharp"
    1dc0:	8b e0       	ldi	r24, 0x0B	; 11
    1dc2:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <ADC_Conversion>
    1dc6:	80 93 22 03 	sts	0x0322, r24
	value = Sharp_GP2D12_estimation(sharp);				//Stores Distance calsulated in a variable "value".
    1dca:	80 91 22 03 	lds	r24, 0x0322
    1dce:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <Sharp_GP2D12_estimation>
    1dd2:	fe 01       	movw	r30, r28
    1dd4:	ec 57       	subi	r30, 0x7C	; 124
    1dd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd8:	91 83       	std	Z+1, r25	; 0x01
    1dda:	80 83       	st	Z, r24
	lcd_print(1,1,value,3);
    1ddc:	fe 01       	movw	r30, r28
    1dde:	ec 57       	subi	r30, 0x7C	; 124
    1de0:	ff 4f       	sbci	r31, 0xFF	; 255
    1de2:	20 81       	ld	r18, Z
    1de4:	31 81       	ldd	r19, Z+1	; 0x01
    1de6:	81 e0       	ldi	r24, 0x01	; 1
    1de8:	61 e0       	ldi	r22, 0x01	; 1
    1dea:	a9 01       	movw	r20, r18
    1dec:	23 e0       	ldi	r18, 0x03	; 3
    1dee:	30 e0       	ldi	r19, 0x00	; 0
    1df0:	0e 94 86 09 	call	0x130c	; 0x130c <lcd_print>
		//lcd_print(1,1,BATT_Voltage,4);
		



		if(data=='0')
    1df4:	80 91 1d 03 	lds	r24, 0x031D
    1df8:	80 33       	cpi	r24, 0x30	; 48
    1dfa:	09 f0       	breq	.+2      	; 0x1dfe <main+0xa6>
    1dfc:	bf c0       	rjmp	.+382    	; 0x1f7c <main+0x224>
		{
			//forward();
			//velocity(0,90);

			velocity(100,100);
    1dfe:	84 e6       	ldi	r24, 0x64	; 100
    1e00:	64 e6       	ldi	r22, 0x64	; 100
    1e02:	0e 94 4c 0b 	call	0x1698	; 0x1698 <velocity>
			angle_rotate(3);
    1e06:	83 e0       	ldi	r24, 0x03	; 3
    1e08:	90 e0       	ldi	r25, 0x00	; 0
    1e0a:	0e 94 8f 0b 	call	0x171e	; 0x171e <angle_rotate>
			//for(int i=0;i<10000;i++)
			//{
				stop();
    1e0e:	0e 94 42 0b 	call	0x1684	; 0x1684 <stop>
    1e12:	fe 01       	movw	r30, r28
    1e14:	e5 58       	subi	r30, 0x85	; 133
    1e16:	ff 4f       	sbci	r31, 0xFF	; 255
    1e18:	80 e0       	ldi	r24, 0x00	; 0
    1e1a:	90 e0       	ldi	r25, 0x00	; 0
    1e1c:	aa ef       	ldi	r26, 0xFA	; 250
    1e1e:	b3 e4       	ldi	r27, 0x43	; 67
    1e20:	80 83       	st	Z, r24
    1e22:	91 83       	std	Z+1, r25	; 0x01
    1e24:	a2 83       	std	Z+2, r26	; 0x02
    1e26:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e28:	8e 01       	movw	r16, r28
    1e2a:	09 58       	subi	r16, 0x89	; 137
    1e2c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e2e:	fe 01       	movw	r30, r28
    1e30:	e5 58       	subi	r30, 0x85	; 133
    1e32:	ff 4f       	sbci	r31, 0xFF	; 255
    1e34:	60 81       	ld	r22, Z
    1e36:	71 81       	ldd	r23, Z+1	; 0x01
    1e38:	82 81       	ldd	r24, Z+2	; 0x02
    1e3a:	93 81       	ldd	r25, Z+3	; 0x03
    1e3c:	2d ec       	ldi	r18, 0xCD	; 205
    1e3e:	3c ec       	ldi	r19, 0xCC	; 204
    1e40:	4c e2       	ldi	r20, 0x2C	; 44
    1e42:	55 e4       	ldi	r21, 0x45	; 69
    1e44:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <__mulsf3>
    1e48:	dc 01       	movw	r26, r24
    1e4a:	cb 01       	movw	r24, r22
    1e4c:	f8 01       	movw	r30, r16
    1e4e:	80 83       	st	Z, r24
    1e50:	91 83       	std	Z+1, r25	; 0x01
    1e52:	a2 83       	std	Z+2, r26	; 0x02
    1e54:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e56:	fe 01       	movw	r30, r28
    1e58:	e9 58       	subi	r30, 0x89	; 137
    1e5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e5c:	60 81       	ld	r22, Z
    1e5e:	71 81       	ldd	r23, Z+1	; 0x01
    1e60:	82 81       	ldd	r24, Z+2	; 0x02
    1e62:	93 81       	ldd	r25, Z+3	; 0x03
    1e64:	20 e0       	ldi	r18, 0x00	; 0
    1e66:	30 e0       	ldi	r19, 0x00	; 0
    1e68:	40 e8       	ldi	r20, 0x80	; 128
    1e6a:	5f e3       	ldi	r21, 0x3F	; 63
    1e6c:	0e 94 da 18 	call	0x31b4	; 0x31b4 <__ltsf2>
    1e70:	88 23       	and	r24, r24
    1e72:	44 f4       	brge	.+16     	; 0x1e84 <main+0x12c>
		__ticks = 1;
    1e74:	fe 01       	movw	r30, r28
    1e76:	eb 58       	subi	r30, 0x8B	; 139
    1e78:	ff 4f       	sbci	r31, 0xFF	; 255
    1e7a:	81 e0       	ldi	r24, 0x01	; 1
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	91 83       	std	Z+1, r25	; 0x01
    1e80:	80 83       	st	Z, r24
    1e82:	64 c0       	rjmp	.+200    	; 0x1f4c <main+0x1f4>
	else if (__tmp > 65535)
    1e84:	fe 01       	movw	r30, r28
    1e86:	e9 58       	subi	r30, 0x89	; 137
    1e88:	ff 4f       	sbci	r31, 0xFF	; 255
    1e8a:	60 81       	ld	r22, Z
    1e8c:	71 81       	ldd	r23, Z+1	; 0x01
    1e8e:	82 81       	ldd	r24, Z+2	; 0x02
    1e90:	93 81       	ldd	r25, Z+3	; 0x03
    1e92:	20 e0       	ldi	r18, 0x00	; 0
    1e94:	3f ef       	ldi	r19, 0xFF	; 255
    1e96:	4f e7       	ldi	r20, 0x7F	; 127
    1e98:	57 e4       	ldi	r21, 0x47	; 71
    1e9a:	0e 94 7a 18 	call	0x30f4	; 0x30f4 <__gtsf2>
    1e9e:	18 16       	cp	r1, r24
    1ea0:	0c f0       	brlt	.+2      	; 0x1ea4 <main+0x14c>
    1ea2:	43 c0       	rjmp	.+134    	; 0x1f2a <main+0x1d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ea4:	fe 01       	movw	r30, r28
    1ea6:	e5 58       	subi	r30, 0x85	; 133
    1ea8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eaa:	60 81       	ld	r22, Z
    1eac:	71 81       	ldd	r23, Z+1	; 0x01
    1eae:	82 81       	ldd	r24, Z+2	; 0x02
    1eb0:	93 81       	ldd	r25, Z+3	; 0x03
    1eb2:	20 e0       	ldi	r18, 0x00	; 0
    1eb4:	30 e0       	ldi	r19, 0x00	; 0
    1eb6:	40 e2       	ldi	r20, 0x20	; 32
    1eb8:	51 e4       	ldi	r21, 0x41	; 65
    1eba:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <__mulsf3>
    1ebe:	dc 01       	movw	r26, r24
    1ec0:	cb 01       	movw	r24, r22
    1ec2:	8e 01       	movw	r16, r28
    1ec4:	0b 58       	subi	r16, 0x8B	; 139
    1ec6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ec8:	bc 01       	movw	r22, r24
    1eca:	cd 01       	movw	r24, r26
    1ecc:	0e 94 fe 14 	call	0x29fc	; 0x29fc <__fixunssfsi>
    1ed0:	dc 01       	movw	r26, r24
    1ed2:	cb 01       	movw	r24, r22
    1ed4:	f8 01       	movw	r30, r16
    1ed6:	91 83       	std	Z+1, r25	; 0x01
    1ed8:	80 83       	st	Z, r24
    1eda:	1f c0       	rjmp	.+62     	; 0x1f1a <main+0x1c2>
    1edc:	fe 01       	movw	r30, r28
    1ede:	ed 58       	subi	r30, 0x8D	; 141
    1ee0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee2:	84 e1       	ldi	r24, 0x14	; 20
    1ee4:	91 e0       	ldi	r25, 0x01	; 1
    1ee6:	91 83       	std	Z+1, r25	; 0x01
    1ee8:	80 83       	st	Z, r24
    1eea:	fe 01       	movw	r30, r28
    1eec:	ed 58       	subi	r30, 0x8D	; 141
    1eee:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef0:	80 81       	ld	r24, Z
    1ef2:	91 81       	ldd	r25, Z+1	; 0x01
    1ef4:	01 97       	sbiw	r24, 0x01	; 1
    1ef6:	f1 f7       	brne	.-4      	; 0x1ef4 <main+0x19c>
    1ef8:	fe 01       	movw	r30, r28
    1efa:	ed 58       	subi	r30, 0x8D	; 141
    1efc:	ff 4f       	sbci	r31, 0xFF	; 255
    1efe:	91 83       	std	Z+1, r25	; 0x01
    1f00:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f02:	de 01       	movw	r26, r28
    1f04:	ab 58       	subi	r26, 0x8B	; 139
    1f06:	bf 4f       	sbci	r27, 0xFF	; 255
    1f08:	fe 01       	movw	r30, r28
    1f0a:	eb 58       	subi	r30, 0x8B	; 139
    1f0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f0e:	80 81       	ld	r24, Z
    1f10:	91 81       	ldd	r25, Z+1	; 0x01
    1f12:	01 97       	sbiw	r24, 0x01	; 1
    1f14:	11 96       	adiw	r26, 0x01	; 1
    1f16:	9c 93       	st	X, r25
    1f18:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f1a:	fe 01       	movw	r30, r28
    1f1c:	eb 58       	subi	r30, 0x8B	; 139
    1f1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f20:	80 81       	ld	r24, Z
    1f22:	91 81       	ldd	r25, Z+1	; 0x01
    1f24:	00 97       	sbiw	r24, 0x00	; 0
    1f26:	d1 f6       	brne	.-76     	; 0x1edc <main+0x184>
    1f28:	4e c5       	rjmp	.+2716   	; 0x29c6 <__stack+0x7c7>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f2a:	8e 01       	movw	r16, r28
    1f2c:	0b 58       	subi	r16, 0x8B	; 139
    1f2e:	1f 4f       	sbci	r17, 0xFF	; 255
    1f30:	fe 01       	movw	r30, r28
    1f32:	e9 58       	subi	r30, 0x89	; 137
    1f34:	ff 4f       	sbci	r31, 0xFF	; 255
    1f36:	60 81       	ld	r22, Z
    1f38:	71 81       	ldd	r23, Z+1	; 0x01
    1f3a:	82 81       	ldd	r24, Z+2	; 0x02
    1f3c:	93 81       	ldd	r25, Z+3	; 0x03
    1f3e:	0e 94 fe 14 	call	0x29fc	; 0x29fc <__fixunssfsi>
    1f42:	dc 01       	movw	r26, r24
    1f44:	cb 01       	movw	r24, r22
    1f46:	f8 01       	movw	r30, r16
    1f48:	91 83       	std	Z+1, r25	; 0x01
    1f4a:	80 83       	st	Z, r24
    1f4c:	de 01       	movw	r26, r28
    1f4e:	af 58       	subi	r26, 0x8F	; 143
    1f50:	bf 4f       	sbci	r27, 0xFF	; 255
    1f52:	fe 01       	movw	r30, r28
    1f54:	eb 58       	subi	r30, 0x8B	; 139
    1f56:	ff 4f       	sbci	r31, 0xFF	; 255
    1f58:	80 81       	ld	r24, Z
    1f5a:	91 81       	ldd	r25, Z+1	; 0x01
    1f5c:	11 96       	adiw	r26, 0x01	; 1
    1f5e:	9c 93       	st	X, r25
    1f60:	8e 93       	st	-X, r24
    1f62:	fe 01       	movw	r30, r28
    1f64:	ef 58       	subi	r30, 0x8F	; 143
    1f66:	ff 4f       	sbci	r31, 0xFF	; 255
    1f68:	80 81       	ld	r24, Z
    1f6a:	91 81       	ldd	r25, Z+1	; 0x01
    1f6c:	01 97       	sbiw	r24, 0x01	; 1
    1f6e:	f1 f7       	brne	.-4      	; 0x1f6c <main+0x214>
    1f70:	fe 01       	movw	r30, r28
    1f72:	ef 58       	subi	r30, 0x8F	; 143
    1f74:	ff 4f       	sbci	r31, 0xFF	; 255
    1f76:	91 83       	std	Z+1, r25	; 0x01
    1f78:	80 83       	st	Z, r24
    1f7a:	25 c5       	rjmp	.+2634   	; 0x29c6 <__stack+0x7c7>
			_delay_ms(500);
		
			//data='5';

		}
		else if(data=='5')
    1f7c:	80 91 1d 03 	lds	r24, 0x031D
    1f80:	85 33       	cpi	r24, 0x35	; 53
    1f82:	09 f0       	breq	.+2      	; 0x1f86 <main+0x22e>
    1f84:	20 c5       	rjmp	.+2624   	; 0x29c6 <__stack+0x7c7>
		{
			
			//UCSR0B = 0x88;

			velocity(200,200);
    1f86:	88 ec       	ldi	r24, 0xC8	; 200
    1f88:	68 ec       	ldi	r22, 0xC8	; 200
    1f8a:	0e 94 4c 0b 	call	0x1698	; 0x1698 <velocity>
    1f8e:	1c c0       	rjmp	.+56     	; 0x1fc8 <main+0x270>

			//v1=value;
			while(value>120)
			{
				sharp = ADC_Conversion(11);						//Stores the Analog value of front sharp connected to ADC channel 11 into variable "sharp"
    1f90:	8b e0       	ldi	r24, 0x0B	; 11
    1f92:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <ADC_Conversion>
    1f96:	80 93 22 03 	sts	0x0322, r24
				value = Sharp_GP2D12_estimation(sharp);				//Stores Distance calsulated in a variable "value".
    1f9a:	80 91 22 03 	lds	r24, 0x0322
    1f9e:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <Sharp_GP2D12_estimation>
    1fa2:	fe 01       	movw	r30, r28
    1fa4:	ec 57       	subi	r30, 0x7C	; 124
    1fa6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa8:	91 83       	std	Z+1, r25	; 0x01
    1faa:	80 83       	st	Z, r24
				lcd_print(1,1,value,3);
    1fac:	fe 01       	movw	r30, r28
    1fae:	ec 57       	subi	r30, 0x7C	; 124
    1fb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb2:	20 81       	ld	r18, Z
    1fb4:	31 81       	ldd	r19, Z+1	; 0x01
    1fb6:	81 e0       	ldi	r24, 0x01	; 1
    1fb8:	61 e0       	ldi	r22, 0x01	; 1
    1fba:	a9 01       	movw	r20, r18
    1fbc:	23 e0       	ldi	r18, 0x03	; 3
    1fbe:	30 e0       	ldi	r19, 0x00	; 0
    1fc0:	0e 94 86 09 	call	0x130c	; 0x130c <lcd_print>
				forward();
    1fc4:	0e 94 16 0b 	call	0x162c	; 0x162c <forward>
			//UCSR0B = 0x88;

			velocity(200,200);

			//v1=value;
			while(value>120)
    1fc8:	fe 01       	movw	r30, r28
    1fca:	ec 57       	subi	r30, 0x7C	; 124
    1fcc:	ff 4f       	sbci	r31, 0xFF	; 255
    1fce:	80 81       	ld	r24, Z
    1fd0:	91 81       	ldd	r25, Z+1	; 0x01
    1fd2:	89 37       	cpi	r24, 0x79	; 121
    1fd4:	91 05       	cpc	r25, r1
    1fd6:	e0 f6       	brcc	.-72     	; 0x1f90 <main+0x238>
				lcd_print(1,1,value,3);
				forward();
			}

			//linear_distance_mm(value);
			stop();
    1fd8:	0e 94 42 0b 	call	0x1684	; 0x1684 <stop>
    1fdc:	fe 01       	movw	r30, r28
    1fde:	e3 59       	subi	r30, 0x93	; 147
    1fe0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe2:	80 e0       	ldi	r24, 0x00	; 0
    1fe4:	90 e0       	ldi	r25, 0x00	; 0
    1fe6:	aa ef       	ldi	r26, 0xFA	; 250
    1fe8:	b4 e4       	ldi	r27, 0x44	; 68
    1fea:	80 83       	st	Z, r24
    1fec:	91 83       	std	Z+1, r25	; 0x01
    1fee:	a2 83       	std	Z+2, r26	; 0x02
    1ff0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ff2:	8e 01       	movw	r16, r28
    1ff4:	07 59       	subi	r16, 0x97	; 151
    1ff6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ff8:	fe 01       	movw	r30, r28
    1ffa:	e3 59       	subi	r30, 0x93	; 147
    1ffc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ffe:	60 81       	ld	r22, Z
    2000:	71 81       	ldd	r23, Z+1	; 0x01
    2002:	82 81       	ldd	r24, Z+2	; 0x02
    2004:	93 81       	ldd	r25, Z+3	; 0x03
    2006:	2d ec       	ldi	r18, 0xCD	; 205
    2008:	3c ec       	ldi	r19, 0xCC	; 204
    200a:	4c e2       	ldi	r20, 0x2C	; 44
    200c:	55 e4       	ldi	r21, 0x45	; 69
    200e:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <__mulsf3>
    2012:	dc 01       	movw	r26, r24
    2014:	cb 01       	movw	r24, r22
    2016:	f8 01       	movw	r30, r16
    2018:	80 83       	st	Z, r24
    201a:	91 83       	std	Z+1, r25	; 0x01
    201c:	a2 83       	std	Z+2, r26	; 0x02
    201e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2020:	fe 01       	movw	r30, r28
    2022:	e7 59       	subi	r30, 0x97	; 151
    2024:	ff 4f       	sbci	r31, 0xFF	; 255
    2026:	60 81       	ld	r22, Z
    2028:	71 81       	ldd	r23, Z+1	; 0x01
    202a:	82 81       	ldd	r24, Z+2	; 0x02
    202c:	93 81       	ldd	r25, Z+3	; 0x03
    202e:	20 e0       	ldi	r18, 0x00	; 0
    2030:	30 e0       	ldi	r19, 0x00	; 0
    2032:	40 e8       	ldi	r20, 0x80	; 128
    2034:	5f e3       	ldi	r21, 0x3F	; 63
    2036:	0e 94 da 18 	call	0x31b4	; 0x31b4 <__ltsf2>
    203a:	88 23       	and	r24, r24
    203c:	44 f4       	brge	.+16     	; 0x204e <main+0x2f6>
		__ticks = 1;
    203e:	fe 01       	movw	r30, r28
    2040:	e9 59       	subi	r30, 0x99	; 153
    2042:	ff 4f       	sbci	r31, 0xFF	; 255
    2044:	81 e0       	ldi	r24, 0x01	; 1
    2046:	90 e0       	ldi	r25, 0x00	; 0
    2048:	91 83       	std	Z+1, r25	; 0x01
    204a:	80 83       	st	Z, r24
    204c:	64 c0       	rjmp	.+200    	; 0x2116 <main+0x3be>
	else if (__tmp > 65535)
    204e:	fe 01       	movw	r30, r28
    2050:	e7 59       	subi	r30, 0x97	; 151
    2052:	ff 4f       	sbci	r31, 0xFF	; 255
    2054:	60 81       	ld	r22, Z
    2056:	71 81       	ldd	r23, Z+1	; 0x01
    2058:	82 81       	ldd	r24, Z+2	; 0x02
    205a:	93 81       	ldd	r25, Z+3	; 0x03
    205c:	20 e0       	ldi	r18, 0x00	; 0
    205e:	3f ef       	ldi	r19, 0xFF	; 255
    2060:	4f e7       	ldi	r20, 0x7F	; 127
    2062:	57 e4       	ldi	r21, 0x47	; 71
    2064:	0e 94 7a 18 	call	0x30f4	; 0x30f4 <__gtsf2>
    2068:	18 16       	cp	r1, r24
    206a:	0c f0       	brlt	.+2      	; 0x206e <main+0x316>
    206c:	43 c0       	rjmp	.+134    	; 0x20f4 <main+0x39c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    206e:	fe 01       	movw	r30, r28
    2070:	e3 59       	subi	r30, 0x93	; 147
    2072:	ff 4f       	sbci	r31, 0xFF	; 255
    2074:	60 81       	ld	r22, Z
    2076:	71 81       	ldd	r23, Z+1	; 0x01
    2078:	82 81       	ldd	r24, Z+2	; 0x02
    207a:	93 81       	ldd	r25, Z+3	; 0x03
    207c:	20 e0       	ldi	r18, 0x00	; 0
    207e:	30 e0       	ldi	r19, 0x00	; 0
    2080:	40 e2       	ldi	r20, 0x20	; 32
    2082:	51 e4       	ldi	r21, 0x41	; 65
    2084:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <__mulsf3>
    2088:	dc 01       	movw	r26, r24
    208a:	cb 01       	movw	r24, r22
    208c:	8e 01       	movw	r16, r28
    208e:	09 59       	subi	r16, 0x99	; 153
    2090:	1f 4f       	sbci	r17, 0xFF	; 255
    2092:	bc 01       	movw	r22, r24
    2094:	cd 01       	movw	r24, r26
    2096:	0e 94 fe 14 	call	0x29fc	; 0x29fc <__fixunssfsi>
    209a:	dc 01       	movw	r26, r24
    209c:	cb 01       	movw	r24, r22
    209e:	f8 01       	movw	r30, r16
    20a0:	91 83       	std	Z+1, r25	; 0x01
    20a2:	80 83       	st	Z, r24
    20a4:	1f c0       	rjmp	.+62     	; 0x20e4 <main+0x38c>
    20a6:	fe 01       	movw	r30, r28
    20a8:	eb 59       	subi	r30, 0x9B	; 155
    20aa:	ff 4f       	sbci	r31, 0xFF	; 255
    20ac:	84 e1       	ldi	r24, 0x14	; 20
    20ae:	91 e0       	ldi	r25, 0x01	; 1
    20b0:	91 83       	std	Z+1, r25	; 0x01
    20b2:	80 83       	st	Z, r24
    20b4:	fe 01       	movw	r30, r28
    20b6:	eb 59       	subi	r30, 0x9B	; 155
    20b8:	ff 4f       	sbci	r31, 0xFF	; 255
    20ba:	80 81       	ld	r24, Z
    20bc:	91 81       	ldd	r25, Z+1	; 0x01
    20be:	01 97       	sbiw	r24, 0x01	; 1
    20c0:	f1 f7       	brne	.-4      	; 0x20be <main+0x366>
    20c2:	fe 01       	movw	r30, r28
    20c4:	eb 59       	subi	r30, 0x9B	; 155
    20c6:	ff 4f       	sbci	r31, 0xFF	; 255
    20c8:	91 83       	std	Z+1, r25	; 0x01
    20ca:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20cc:	de 01       	movw	r26, r28
    20ce:	a9 59       	subi	r26, 0x99	; 153
    20d0:	bf 4f       	sbci	r27, 0xFF	; 255
    20d2:	fe 01       	movw	r30, r28
    20d4:	e9 59       	subi	r30, 0x99	; 153
    20d6:	ff 4f       	sbci	r31, 0xFF	; 255
    20d8:	80 81       	ld	r24, Z
    20da:	91 81       	ldd	r25, Z+1	; 0x01
    20dc:	01 97       	sbiw	r24, 0x01	; 1
    20de:	11 96       	adiw	r26, 0x01	; 1
    20e0:	9c 93       	st	X, r25
    20e2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20e4:	fe 01       	movw	r30, r28
    20e6:	e9 59       	subi	r30, 0x99	; 153
    20e8:	ff 4f       	sbci	r31, 0xFF	; 255
    20ea:	80 81       	ld	r24, Z
    20ec:	91 81       	ldd	r25, Z+1	; 0x01
    20ee:	00 97       	sbiw	r24, 0x00	; 0
    20f0:	d1 f6       	brne	.-76     	; 0x20a6 <main+0x34e>
    20f2:	28 c0       	rjmp	.+80     	; 0x2144 <main+0x3ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20f4:	8e 01       	movw	r16, r28
    20f6:	09 59       	subi	r16, 0x99	; 153
    20f8:	1f 4f       	sbci	r17, 0xFF	; 255
    20fa:	fe 01       	movw	r30, r28
    20fc:	e7 59       	subi	r30, 0x97	; 151
    20fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2100:	60 81       	ld	r22, Z
    2102:	71 81       	ldd	r23, Z+1	; 0x01
    2104:	82 81       	ldd	r24, Z+2	; 0x02
    2106:	93 81       	ldd	r25, Z+3	; 0x03
    2108:	0e 94 fe 14 	call	0x29fc	; 0x29fc <__fixunssfsi>
    210c:	dc 01       	movw	r26, r24
    210e:	cb 01       	movw	r24, r22
    2110:	f8 01       	movw	r30, r16
    2112:	91 83       	std	Z+1, r25	; 0x01
    2114:	80 83       	st	Z, r24
    2116:	de 01       	movw	r26, r28
    2118:	ad 59       	subi	r26, 0x9D	; 157
    211a:	bf 4f       	sbci	r27, 0xFF	; 255
    211c:	fe 01       	movw	r30, r28
    211e:	e9 59       	subi	r30, 0x99	; 153
    2120:	ff 4f       	sbci	r31, 0xFF	; 255
    2122:	80 81       	ld	r24, Z
    2124:	91 81       	ldd	r25, Z+1	; 0x01
    2126:	11 96       	adiw	r26, 0x01	; 1
    2128:	9c 93       	st	X, r25
    212a:	8e 93       	st	-X, r24
    212c:	fe 01       	movw	r30, r28
    212e:	ed 59       	subi	r30, 0x9D	; 157
    2130:	ff 4f       	sbci	r31, 0xFF	; 255
    2132:	80 81       	ld	r24, Z
    2134:	91 81       	ldd	r25, Z+1	; 0x01
    2136:	01 97       	sbiw	r24, 0x01	; 1
    2138:	f1 f7       	brne	.-4      	; 0x2136 <main+0x3de>
    213a:	fe 01       	movw	r30, r28
    213c:	ed 59       	subi	r30, 0x9D	; 157
    213e:	ff 4f       	sbci	r31, 0xFF	; 255
    2140:	91 83       	std	Z+1, r25	; 0x01
    2142:	80 83       	st	Z, r24
			_delay_ms(2000);
			for (angle = 0; angle <120; angle++)
    2144:	fe 01       	movw	r30, r28
    2146:	e1 58       	subi	r30, 0x81	; 129
    2148:	ff 4f       	sbci	r31, 0xFF	; 255
    214a:	10 82       	st	Z, r1
    214c:	c2 c0       	rjmp	.+388    	; 0x22d2 <__stack+0xd3>
 			{
  				servo_3(angle);
    214e:	fe 01       	movw	r30, r28
    2150:	e1 58       	subi	r30, 0x81	; 129
    2152:	ff 4f       	sbci	r31, 0xFF	; 255
    2154:	80 81       	ld	r24, Z
    2156:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <servo_3>
    215a:	fe 01       	movw	r30, r28
    215c:	e1 5a       	subi	r30, 0xA1	; 161
    215e:	ff 4f       	sbci	r31, 0xFF	; 255
    2160:	80 e0       	ldi	r24, 0x00	; 0
    2162:	90 e0       	ldi	r25, 0x00	; 0
    2164:	a0 e2       	ldi	r26, 0x20	; 32
    2166:	b1 e4       	ldi	r27, 0x41	; 65
    2168:	80 83       	st	Z, r24
    216a:	91 83       	std	Z+1, r25	; 0x01
    216c:	a2 83       	std	Z+2, r26	; 0x02
    216e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2170:	8e 01       	movw	r16, r28
    2172:	05 5a       	subi	r16, 0xA5	; 165
    2174:	1f 4f       	sbci	r17, 0xFF	; 255
    2176:	fe 01       	movw	r30, r28
    2178:	e1 5a       	subi	r30, 0xA1	; 161
    217a:	ff 4f       	sbci	r31, 0xFF	; 255
    217c:	60 81       	ld	r22, Z
    217e:	71 81       	ldd	r23, Z+1	; 0x01
    2180:	82 81       	ldd	r24, Z+2	; 0x02
    2182:	93 81       	ldd	r25, Z+3	; 0x03
    2184:	2d ec       	ldi	r18, 0xCD	; 205
    2186:	3c ec       	ldi	r19, 0xCC	; 204
    2188:	4c e2       	ldi	r20, 0x2C	; 44
    218a:	55 e4       	ldi	r21, 0x45	; 69
    218c:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <__mulsf3>
    2190:	dc 01       	movw	r26, r24
    2192:	cb 01       	movw	r24, r22
    2194:	f8 01       	movw	r30, r16
    2196:	80 83       	st	Z, r24
    2198:	91 83       	std	Z+1, r25	; 0x01
    219a:	a2 83       	std	Z+2, r26	; 0x02
    219c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    219e:	fe 01       	movw	r30, r28
    21a0:	e5 5a       	subi	r30, 0xA5	; 165
    21a2:	ff 4f       	sbci	r31, 0xFF	; 255
    21a4:	60 81       	ld	r22, Z
    21a6:	71 81       	ldd	r23, Z+1	; 0x01
    21a8:	82 81       	ldd	r24, Z+2	; 0x02
    21aa:	93 81       	ldd	r25, Z+3	; 0x03
    21ac:	20 e0       	ldi	r18, 0x00	; 0
    21ae:	30 e0       	ldi	r19, 0x00	; 0
    21b0:	40 e8       	ldi	r20, 0x80	; 128
    21b2:	5f e3       	ldi	r21, 0x3F	; 63
    21b4:	0e 94 da 18 	call	0x31b4	; 0x31b4 <__ltsf2>
    21b8:	88 23       	and	r24, r24
    21ba:	44 f4       	brge	.+16     	; 0x21cc <main+0x474>
		__ticks = 1;
    21bc:	fe 01       	movw	r30, r28
    21be:	e7 5a       	subi	r30, 0xA7	; 167
    21c0:	ff 4f       	sbci	r31, 0xFF	; 255
    21c2:	81 e0       	ldi	r24, 0x01	; 1
    21c4:	90 e0       	ldi	r25, 0x00	; 0
    21c6:	91 83       	std	Z+1, r25	; 0x01
    21c8:	80 83       	st	Z, r24
    21ca:	64 c0       	rjmp	.+200    	; 0x2294 <__stack+0x95>
	else if (__tmp > 65535)
    21cc:	fe 01       	movw	r30, r28
    21ce:	e5 5a       	subi	r30, 0xA5	; 165
    21d0:	ff 4f       	sbci	r31, 0xFF	; 255
    21d2:	60 81       	ld	r22, Z
    21d4:	71 81       	ldd	r23, Z+1	; 0x01
    21d6:	82 81       	ldd	r24, Z+2	; 0x02
    21d8:	93 81       	ldd	r25, Z+3	; 0x03
    21da:	20 e0       	ldi	r18, 0x00	; 0
    21dc:	3f ef       	ldi	r19, 0xFF	; 255
    21de:	4f e7       	ldi	r20, 0x7F	; 127
    21e0:	57 e4       	ldi	r21, 0x47	; 71
    21e2:	0e 94 7a 18 	call	0x30f4	; 0x30f4 <__gtsf2>
    21e6:	18 16       	cp	r1, r24
    21e8:	0c f0       	brlt	.+2      	; 0x21ec <main+0x494>
    21ea:	43 c0       	rjmp	.+134    	; 0x2272 <__stack+0x73>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21ec:	fe 01       	movw	r30, r28
    21ee:	e1 5a       	subi	r30, 0xA1	; 161
    21f0:	ff 4f       	sbci	r31, 0xFF	; 255
    21f2:	60 81       	ld	r22, Z
    21f4:	71 81       	ldd	r23, Z+1	; 0x01
    21f6:	82 81       	ldd	r24, Z+2	; 0x02
    21f8:	93 81       	ldd	r25, Z+3	; 0x03
    21fa:	20 e0       	ldi	r18, 0x00	; 0
    21fc:	30 e0       	ldi	r19, 0x00	; 0
    21fe:	40 e2       	ldi	r20, 0x20	; 32
    2200:	51 e4       	ldi	r21, 0x41	; 65
    2202:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <__mulsf3>
    2206:	dc 01       	movw	r26, r24
    2208:	cb 01       	movw	r24, r22
    220a:	8e 01       	movw	r16, r28
    220c:	07 5a       	subi	r16, 0xA7	; 167
    220e:	1f 4f       	sbci	r17, 0xFF	; 255
    2210:	bc 01       	movw	r22, r24
    2212:	cd 01       	movw	r24, r26
    2214:	0e 94 fe 14 	call	0x29fc	; 0x29fc <__fixunssfsi>
    2218:	dc 01       	movw	r26, r24
    221a:	cb 01       	movw	r24, r22
    221c:	f8 01       	movw	r30, r16
    221e:	91 83       	std	Z+1, r25	; 0x01
    2220:	80 83       	st	Z, r24
    2222:	1f c0       	rjmp	.+62     	; 0x2262 <__stack+0x63>
    2224:	fe 01       	movw	r30, r28
    2226:	e9 5a       	subi	r30, 0xA9	; 169
    2228:	ff 4f       	sbci	r31, 0xFF	; 255
    222a:	84 e1       	ldi	r24, 0x14	; 20
    222c:	91 e0       	ldi	r25, 0x01	; 1
    222e:	91 83       	std	Z+1, r25	; 0x01
    2230:	80 83       	st	Z, r24
    2232:	fe 01       	movw	r30, r28
    2234:	e9 5a       	subi	r30, 0xA9	; 169
    2236:	ff 4f       	sbci	r31, 0xFF	; 255
    2238:	80 81       	ld	r24, Z
    223a:	91 81       	ldd	r25, Z+1	; 0x01
    223c:	01 97       	sbiw	r24, 0x01	; 1
    223e:	f1 f7       	brne	.-4      	; 0x223c <__stack+0x3d>
    2240:	fe 01       	movw	r30, r28
    2242:	e9 5a       	subi	r30, 0xA9	; 169
    2244:	ff 4f       	sbci	r31, 0xFF	; 255
    2246:	91 83       	std	Z+1, r25	; 0x01
    2248:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    224a:	de 01       	movw	r26, r28
    224c:	a7 5a       	subi	r26, 0xA7	; 167
    224e:	bf 4f       	sbci	r27, 0xFF	; 255
    2250:	fe 01       	movw	r30, r28
    2252:	e7 5a       	subi	r30, 0xA7	; 167
    2254:	ff 4f       	sbci	r31, 0xFF	; 255
    2256:	80 81       	ld	r24, Z
    2258:	91 81       	ldd	r25, Z+1	; 0x01
    225a:	01 97       	sbiw	r24, 0x01	; 1
    225c:	11 96       	adiw	r26, 0x01	; 1
    225e:	9c 93       	st	X, r25
    2260:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2262:	fe 01       	movw	r30, r28
    2264:	e7 5a       	subi	r30, 0xA7	; 167
    2266:	ff 4f       	sbci	r31, 0xFF	; 255
    2268:	80 81       	ld	r24, Z
    226a:	91 81       	ldd	r25, Z+1	; 0x01
    226c:	00 97       	sbiw	r24, 0x00	; 0
    226e:	d1 f6       	brne	.-76     	; 0x2224 <__stack+0x25>
    2270:	27 c0       	rjmp	.+78     	; 0x22c0 <__stack+0xc1>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2272:	8e 01       	movw	r16, r28
    2274:	07 5a       	subi	r16, 0xA7	; 167
    2276:	1f 4f       	sbci	r17, 0xFF	; 255
    2278:	fe 01       	movw	r30, r28
    227a:	e5 5a       	subi	r30, 0xA5	; 165
    227c:	ff 4f       	sbci	r31, 0xFF	; 255
    227e:	60 81       	ld	r22, Z
    2280:	71 81       	ldd	r23, Z+1	; 0x01
    2282:	82 81       	ldd	r24, Z+2	; 0x02
    2284:	93 81       	ldd	r25, Z+3	; 0x03
    2286:	0e 94 fe 14 	call	0x29fc	; 0x29fc <__fixunssfsi>
    228a:	dc 01       	movw	r26, r24
    228c:	cb 01       	movw	r24, r22
    228e:	f8 01       	movw	r30, r16
    2290:	91 83       	std	Z+1, r25	; 0x01
    2292:	80 83       	st	Z, r24
    2294:	de 01       	movw	r26, r28
    2296:	ab 5a       	subi	r26, 0xAB	; 171
    2298:	bf 4f       	sbci	r27, 0xFF	; 255
    229a:	fe 01       	movw	r30, r28
    229c:	e7 5a       	subi	r30, 0xA7	; 167
    229e:	ff 4f       	sbci	r31, 0xFF	; 255
    22a0:	80 81       	ld	r24, Z
    22a2:	91 81       	ldd	r25, Z+1	; 0x01
    22a4:	8d 93       	st	X+, r24
    22a6:	9c 93       	st	X, r25
    22a8:	fe 01       	movw	r30, r28
    22aa:	eb 5a       	subi	r30, 0xAB	; 171
    22ac:	ff 4f       	sbci	r31, 0xFF	; 255
    22ae:	80 81       	ld	r24, Z
    22b0:	91 81       	ldd	r25, Z+1	; 0x01
    22b2:	01 97       	sbiw	r24, 0x01	; 1
    22b4:	f1 f7       	brne	.-4      	; 0x22b2 <__stack+0xb3>
    22b6:	fe 01       	movw	r30, r28
    22b8:	eb 5a       	subi	r30, 0xAB	; 171
    22ba:	ff 4f       	sbci	r31, 0xFF	; 255
    22bc:	91 83       	std	Z+1, r25	; 0x01
    22be:	80 83       	st	Z, r24
			}

			//linear_distance_mm(value);
			stop();
			_delay_ms(2000);
			for (angle = 0; angle <120; angle++)
    22c0:	de 01       	movw	r26, r28
    22c2:	a1 58       	subi	r26, 0x81	; 129
    22c4:	bf 4f       	sbci	r27, 0xFF	; 255
    22c6:	fe 01       	movw	r30, r28
    22c8:	e1 58       	subi	r30, 0x81	; 129
    22ca:	ff 4f       	sbci	r31, 0xFF	; 255
    22cc:	80 81       	ld	r24, Z
    22ce:	8f 5f       	subi	r24, 0xFF	; 255
    22d0:	8c 93       	st	X, r24
    22d2:	fe 01       	movw	r30, r28
    22d4:	e1 58       	subi	r30, 0x81	; 129
    22d6:	ff 4f       	sbci	r31, 0xFF	; 255
    22d8:	80 81       	ld	r24, Z
    22da:	88 37       	cpi	r24, 0x78	; 120
    22dc:	08 f4       	brcc	.+2      	; 0x22e0 <__stack+0xe1>
    22de:	37 cf       	rjmp	.-402    	; 0x214e <main+0x3f6>
    22e0:	fe 01       	movw	r30, r28
    22e2:	ef 5a       	subi	r30, 0xAF	; 175
    22e4:	ff 4f       	sbci	r31, 0xFF	; 255
    22e6:	80 e0       	ldi	r24, 0x00	; 0
    22e8:	90 e0       	ldi	r25, 0x00	; 0
    22ea:	aa e7       	ldi	r26, 0x7A	; 122
    22ec:	b4 e4       	ldi	r27, 0x44	; 68
    22ee:	80 83       	st	Z, r24
    22f0:	91 83       	std	Z+1, r25	; 0x01
    22f2:	a2 83       	std	Z+2, r26	; 0x02
    22f4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22f6:	8e 01       	movw	r16, r28
    22f8:	03 5b       	subi	r16, 0xB3	; 179
    22fa:	1f 4f       	sbci	r17, 0xFF	; 255
    22fc:	fe 01       	movw	r30, r28
    22fe:	ef 5a       	subi	r30, 0xAF	; 175
    2300:	ff 4f       	sbci	r31, 0xFF	; 255
    2302:	60 81       	ld	r22, Z
    2304:	71 81       	ldd	r23, Z+1	; 0x01
    2306:	82 81       	ldd	r24, Z+2	; 0x02
    2308:	93 81       	ldd	r25, Z+3	; 0x03
    230a:	2d ec       	ldi	r18, 0xCD	; 205
    230c:	3c ec       	ldi	r19, 0xCC	; 204
    230e:	4c e2       	ldi	r20, 0x2C	; 44
    2310:	55 e4       	ldi	r21, 0x45	; 69
    2312:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <__mulsf3>
    2316:	dc 01       	movw	r26, r24
    2318:	cb 01       	movw	r24, r22
    231a:	f8 01       	movw	r30, r16
    231c:	80 83       	st	Z, r24
    231e:	91 83       	std	Z+1, r25	; 0x01
    2320:	a2 83       	std	Z+2, r26	; 0x02
    2322:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2324:	fe 01       	movw	r30, r28
    2326:	e3 5b       	subi	r30, 0xB3	; 179
    2328:	ff 4f       	sbci	r31, 0xFF	; 255
    232a:	60 81       	ld	r22, Z
    232c:	71 81       	ldd	r23, Z+1	; 0x01
    232e:	82 81       	ldd	r24, Z+2	; 0x02
    2330:	93 81       	ldd	r25, Z+3	; 0x03
    2332:	20 e0       	ldi	r18, 0x00	; 0
    2334:	30 e0       	ldi	r19, 0x00	; 0
    2336:	40 e8       	ldi	r20, 0x80	; 128
    2338:	5f e3       	ldi	r21, 0x3F	; 63
    233a:	0e 94 da 18 	call	0x31b4	; 0x31b4 <__ltsf2>
    233e:	88 23       	and	r24, r24
    2340:	44 f4       	brge	.+16     	; 0x2352 <__stack+0x153>
		__ticks = 1;
    2342:	fe 01       	movw	r30, r28
    2344:	e5 5b       	subi	r30, 0xB5	; 181
    2346:	ff 4f       	sbci	r31, 0xFF	; 255
    2348:	81 e0       	ldi	r24, 0x01	; 1
    234a:	90 e0       	ldi	r25, 0x00	; 0
    234c:	91 83       	std	Z+1, r25	; 0x01
    234e:	80 83       	st	Z, r24
    2350:	64 c0       	rjmp	.+200    	; 0x241a <__stack+0x21b>
	else if (__tmp > 65535)
    2352:	fe 01       	movw	r30, r28
    2354:	e3 5b       	subi	r30, 0xB3	; 179
    2356:	ff 4f       	sbci	r31, 0xFF	; 255
    2358:	60 81       	ld	r22, Z
    235a:	71 81       	ldd	r23, Z+1	; 0x01
    235c:	82 81       	ldd	r24, Z+2	; 0x02
    235e:	93 81       	ldd	r25, Z+3	; 0x03
    2360:	20 e0       	ldi	r18, 0x00	; 0
    2362:	3f ef       	ldi	r19, 0xFF	; 255
    2364:	4f e7       	ldi	r20, 0x7F	; 127
    2366:	57 e4       	ldi	r21, 0x47	; 71
    2368:	0e 94 7a 18 	call	0x30f4	; 0x30f4 <__gtsf2>
    236c:	18 16       	cp	r1, r24
    236e:	0c f0       	brlt	.+2      	; 0x2372 <__stack+0x173>
    2370:	43 c0       	rjmp	.+134    	; 0x23f8 <__stack+0x1f9>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2372:	fe 01       	movw	r30, r28
    2374:	ef 5a       	subi	r30, 0xAF	; 175
    2376:	ff 4f       	sbci	r31, 0xFF	; 255
    2378:	60 81       	ld	r22, Z
    237a:	71 81       	ldd	r23, Z+1	; 0x01
    237c:	82 81       	ldd	r24, Z+2	; 0x02
    237e:	93 81       	ldd	r25, Z+3	; 0x03
    2380:	20 e0       	ldi	r18, 0x00	; 0
    2382:	30 e0       	ldi	r19, 0x00	; 0
    2384:	40 e2       	ldi	r20, 0x20	; 32
    2386:	51 e4       	ldi	r21, 0x41	; 65
    2388:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <__mulsf3>
    238c:	dc 01       	movw	r26, r24
    238e:	cb 01       	movw	r24, r22
    2390:	8e 01       	movw	r16, r28
    2392:	05 5b       	subi	r16, 0xB5	; 181
    2394:	1f 4f       	sbci	r17, 0xFF	; 255
    2396:	bc 01       	movw	r22, r24
    2398:	cd 01       	movw	r24, r26
    239a:	0e 94 fe 14 	call	0x29fc	; 0x29fc <__fixunssfsi>
    239e:	dc 01       	movw	r26, r24
    23a0:	cb 01       	movw	r24, r22
    23a2:	f8 01       	movw	r30, r16
    23a4:	91 83       	std	Z+1, r25	; 0x01
    23a6:	80 83       	st	Z, r24
    23a8:	1f c0       	rjmp	.+62     	; 0x23e8 <__stack+0x1e9>
    23aa:	fe 01       	movw	r30, r28
    23ac:	e7 5b       	subi	r30, 0xB7	; 183
    23ae:	ff 4f       	sbci	r31, 0xFF	; 255
    23b0:	84 e1       	ldi	r24, 0x14	; 20
    23b2:	91 e0       	ldi	r25, 0x01	; 1
    23b4:	91 83       	std	Z+1, r25	; 0x01
    23b6:	80 83       	st	Z, r24
    23b8:	fe 01       	movw	r30, r28
    23ba:	e7 5b       	subi	r30, 0xB7	; 183
    23bc:	ff 4f       	sbci	r31, 0xFF	; 255
    23be:	80 81       	ld	r24, Z
    23c0:	91 81       	ldd	r25, Z+1	; 0x01
    23c2:	01 97       	sbiw	r24, 0x01	; 1
    23c4:	f1 f7       	brne	.-4      	; 0x23c2 <__stack+0x1c3>
    23c6:	fe 01       	movw	r30, r28
    23c8:	e7 5b       	subi	r30, 0xB7	; 183
    23ca:	ff 4f       	sbci	r31, 0xFF	; 255
    23cc:	91 83       	std	Z+1, r25	; 0x01
    23ce:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23d0:	de 01       	movw	r26, r28
    23d2:	a5 5b       	subi	r26, 0xB5	; 181
    23d4:	bf 4f       	sbci	r27, 0xFF	; 255
    23d6:	fe 01       	movw	r30, r28
    23d8:	e5 5b       	subi	r30, 0xB5	; 181
    23da:	ff 4f       	sbci	r31, 0xFF	; 255
    23dc:	80 81       	ld	r24, Z
    23de:	91 81       	ldd	r25, Z+1	; 0x01
    23e0:	01 97       	sbiw	r24, 0x01	; 1
    23e2:	11 96       	adiw	r26, 0x01	; 1
    23e4:	9c 93       	st	X, r25
    23e6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23e8:	fe 01       	movw	r30, r28
    23ea:	e5 5b       	subi	r30, 0xB5	; 181
    23ec:	ff 4f       	sbci	r31, 0xFF	; 255
    23ee:	80 81       	ld	r24, Z
    23f0:	91 81       	ldd	r25, Z+1	; 0x01
    23f2:	00 97       	sbiw	r24, 0x00	; 0
    23f4:	d1 f6       	brne	.-76     	; 0x23aa <__stack+0x1ab>
    23f6:	27 c0       	rjmp	.+78     	; 0x2446 <__stack+0x247>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23f8:	8e 01       	movw	r16, r28
    23fa:	05 5b       	subi	r16, 0xB5	; 181
    23fc:	1f 4f       	sbci	r17, 0xFF	; 255
    23fe:	fe 01       	movw	r30, r28
    2400:	e3 5b       	subi	r30, 0xB3	; 179
    2402:	ff 4f       	sbci	r31, 0xFF	; 255
    2404:	60 81       	ld	r22, Z
    2406:	71 81       	ldd	r23, Z+1	; 0x01
    2408:	82 81       	ldd	r24, Z+2	; 0x02
    240a:	93 81       	ldd	r25, Z+3	; 0x03
    240c:	0e 94 fe 14 	call	0x29fc	; 0x29fc <__fixunssfsi>
    2410:	dc 01       	movw	r26, r24
    2412:	cb 01       	movw	r24, r22
    2414:	f8 01       	movw	r30, r16
    2416:	91 83       	std	Z+1, r25	; 0x01
    2418:	80 83       	st	Z, r24
    241a:	de 01       	movw	r26, r28
    241c:	a9 5b       	subi	r26, 0xB9	; 185
    241e:	bf 4f       	sbci	r27, 0xFF	; 255
    2420:	fe 01       	movw	r30, r28
    2422:	e5 5b       	subi	r30, 0xB5	; 181
    2424:	ff 4f       	sbci	r31, 0xFF	; 255
    2426:	80 81       	ld	r24, Z
    2428:	91 81       	ldd	r25, Z+1	; 0x01
    242a:	8d 93       	st	X+, r24
    242c:	9c 93       	st	X, r25
    242e:	fe 01       	movw	r30, r28
    2430:	e9 5b       	subi	r30, 0xB9	; 185
    2432:	ff 4f       	sbci	r31, 0xFF	; 255
    2434:	80 81       	ld	r24, Z
    2436:	91 81       	ldd	r25, Z+1	; 0x01
    2438:	01 97       	sbiw	r24, 0x01	; 1
    243a:	f1 f7       	brne	.-4      	; 0x2438 <__stack+0x239>
    243c:	fe 01       	movw	r30, r28
    243e:	e9 5b       	subi	r30, 0xB9	; 185
    2440:	ff 4f       	sbci	r31, 0xFF	; 255
    2442:	91 83       	std	Z+1, r25	; 0x01
    2444:	80 83       	st	Z, r24
  				_delay_ms(10);
 			}
 			_delay_ms(1000);


			velocity(130,130);
    2446:	82 e8       	ldi	r24, 0x82	; 130
    2448:	62 e8       	ldi	r22, 0x82	; 130
    244a:	0e 94 4c 0b 	call	0x1698	; 0x1698 <velocity>
			angle_rotate(180);
    244e:	84 eb       	ldi	r24, 0xB4	; 180
    2450:	90 e0       	ldi	r25, 0x00	; 0
    2452:	0e 94 8f 0b 	call	0x171e	; 0x171e <angle_rotate>
			stop();
    2456:	0e 94 42 0b 	call	0x1684	; 0x1684 <stop>
    245a:	fe 01       	movw	r30, r28
    245c:	ed 5b       	subi	r30, 0xBD	; 189
    245e:	ff 4f       	sbci	r31, 0xFF	; 255
    2460:	80 e0       	ldi	r24, 0x00	; 0
    2462:	90 e0       	ldi	r25, 0x00	; 0
    2464:	aa ef       	ldi	r26, 0xFA	; 250
    2466:	b4 e4       	ldi	r27, 0x44	; 68
    2468:	80 83       	st	Z, r24
    246a:	91 83       	std	Z+1, r25	; 0x01
    246c:	a2 83       	std	Z+2, r26	; 0x02
    246e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2470:	8e 01       	movw	r16, r28
    2472:	01 5c       	subi	r16, 0xC1	; 193
    2474:	1f 4f       	sbci	r17, 0xFF	; 255
    2476:	fe 01       	movw	r30, r28
    2478:	ed 5b       	subi	r30, 0xBD	; 189
    247a:	ff 4f       	sbci	r31, 0xFF	; 255
    247c:	60 81       	ld	r22, Z
    247e:	71 81       	ldd	r23, Z+1	; 0x01
    2480:	82 81       	ldd	r24, Z+2	; 0x02
    2482:	93 81       	ldd	r25, Z+3	; 0x03
    2484:	2d ec       	ldi	r18, 0xCD	; 205
    2486:	3c ec       	ldi	r19, 0xCC	; 204
    2488:	4c e2       	ldi	r20, 0x2C	; 44
    248a:	55 e4       	ldi	r21, 0x45	; 69
    248c:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <__mulsf3>
    2490:	dc 01       	movw	r26, r24
    2492:	cb 01       	movw	r24, r22
    2494:	f8 01       	movw	r30, r16
    2496:	80 83       	st	Z, r24
    2498:	91 83       	std	Z+1, r25	; 0x01
    249a:	a2 83       	std	Z+2, r26	; 0x02
    249c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    249e:	fe 01       	movw	r30, r28
    24a0:	ff 96       	adiw	r30, 0x3f	; 63
    24a2:	60 81       	ld	r22, Z
    24a4:	71 81       	ldd	r23, Z+1	; 0x01
    24a6:	82 81       	ldd	r24, Z+2	; 0x02
    24a8:	93 81       	ldd	r25, Z+3	; 0x03
    24aa:	20 e0       	ldi	r18, 0x00	; 0
    24ac:	30 e0       	ldi	r19, 0x00	; 0
    24ae:	40 e8       	ldi	r20, 0x80	; 128
    24b0:	5f e3       	ldi	r21, 0x3F	; 63
    24b2:	0e 94 da 18 	call	0x31b4	; 0x31b4 <__ltsf2>
    24b6:	88 23       	and	r24, r24
    24b8:	2c f4       	brge	.+10     	; 0x24c4 <__stack+0x2c5>
		__ticks = 1;
    24ba:	81 e0       	ldi	r24, 0x01	; 1
    24bc:	90 e0       	ldi	r25, 0x00	; 0
    24be:	9e af       	std	Y+62, r25	; 0x3e
    24c0:	8d af       	std	Y+61, r24	; 0x3d
    24c2:	46 c0       	rjmp	.+140    	; 0x2550 <__stack+0x351>
	else if (__tmp > 65535)
    24c4:	fe 01       	movw	r30, r28
    24c6:	ff 96       	adiw	r30, 0x3f	; 63
    24c8:	60 81       	ld	r22, Z
    24ca:	71 81       	ldd	r23, Z+1	; 0x01
    24cc:	82 81       	ldd	r24, Z+2	; 0x02
    24ce:	93 81       	ldd	r25, Z+3	; 0x03
    24d0:	20 e0       	ldi	r18, 0x00	; 0
    24d2:	3f ef       	ldi	r19, 0xFF	; 255
    24d4:	4f e7       	ldi	r20, 0x7F	; 127
    24d6:	57 e4       	ldi	r21, 0x47	; 71
    24d8:	0e 94 7a 18 	call	0x30f4	; 0x30f4 <__gtsf2>
    24dc:	18 16       	cp	r1, r24
    24de:	64 f5       	brge	.+88     	; 0x2538 <__stack+0x339>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24e0:	fe 01       	movw	r30, r28
    24e2:	ed 5b       	subi	r30, 0xBD	; 189
    24e4:	ff 4f       	sbci	r31, 0xFF	; 255
    24e6:	60 81       	ld	r22, Z
    24e8:	71 81       	ldd	r23, Z+1	; 0x01
    24ea:	82 81       	ldd	r24, Z+2	; 0x02
    24ec:	93 81       	ldd	r25, Z+3	; 0x03
    24ee:	20 e0       	ldi	r18, 0x00	; 0
    24f0:	30 e0       	ldi	r19, 0x00	; 0
    24f2:	40 e2       	ldi	r20, 0x20	; 32
    24f4:	51 e4       	ldi	r21, 0x41	; 65
    24f6:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <__mulsf3>
    24fa:	dc 01       	movw	r26, r24
    24fc:	cb 01       	movw	r24, r22
    24fe:	bc 01       	movw	r22, r24
    2500:	cd 01       	movw	r24, r26
    2502:	0e 94 fe 14 	call	0x29fc	; 0x29fc <__fixunssfsi>
    2506:	dc 01       	movw	r26, r24
    2508:	cb 01       	movw	r24, r22
    250a:	9e af       	std	Y+62, r25	; 0x3e
    250c:	8d af       	std	Y+61, r24	; 0x3d
    250e:	0f c0       	rjmp	.+30     	; 0x252e <__stack+0x32f>
    2510:	84 e1       	ldi	r24, 0x14	; 20
    2512:	91 e0       	ldi	r25, 0x01	; 1
    2514:	9c af       	std	Y+60, r25	; 0x3c
    2516:	8b af       	std	Y+59, r24	; 0x3b
    2518:	8b ad       	ldd	r24, Y+59	; 0x3b
    251a:	9c ad       	ldd	r25, Y+60	; 0x3c
    251c:	01 97       	sbiw	r24, 0x01	; 1
    251e:	f1 f7       	brne	.-4      	; 0x251c <__stack+0x31d>
    2520:	9c af       	std	Y+60, r25	; 0x3c
    2522:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2524:	8d ad       	ldd	r24, Y+61	; 0x3d
    2526:	9e ad       	ldd	r25, Y+62	; 0x3e
    2528:	01 97       	sbiw	r24, 0x01	; 1
    252a:	9e af       	std	Y+62, r25	; 0x3e
    252c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    252e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2530:	9e ad       	ldd	r25, Y+62	; 0x3e
    2532:	00 97       	sbiw	r24, 0x00	; 0
    2534:	69 f7       	brne	.-38     	; 0x2510 <__stack+0x311>
    2536:	16 c0       	rjmp	.+44     	; 0x2564 <__stack+0x365>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2538:	fe 01       	movw	r30, r28
    253a:	ff 96       	adiw	r30, 0x3f	; 63
    253c:	60 81       	ld	r22, Z
    253e:	71 81       	ldd	r23, Z+1	; 0x01
    2540:	82 81       	ldd	r24, Z+2	; 0x02
    2542:	93 81       	ldd	r25, Z+3	; 0x03
    2544:	0e 94 fe 14 	call	0x29fc	; 0x29fc <__fixunssfsi>
    2548:	dc 01       	movw	r26, r24
    254a:	cb 01       	movw	r24, r22
    254c:	9e af       	std	Y+62, r25	; 0x3e
    254e:	8d af       	std	Y+61, r24	; 0x3d
    2550:	8d ad       	ldd	r24, Y+61	; 0x3d
    2552:	9e ad       	ldd	r25, Y+62	; 0x3e
    2554:	9a af       	std	Y+58, r25	; 0x3a
    2556:	89 af       	std	Y+57, r24	; 0x39
    2558:	89 ad       	ldd	r24, Y+57	; 0x39
    255a:	9a ad       	ldd	r25, Y+58	; 0x3a
    255c:	01 97       	sbiw	r24, 0x01	; 1
    255e:	f1 f7       	brne	.-4      	; 0x255c <__stack+0x35d>
    2560:	9a af       	std	Y+58, r25	; 0x3a
    2562:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(2000);

			sharp = ADC_Conversion(11);						//Stores the Analog value of front sharp connected to ADC channel 11 into variable "sharp"
    2564:	8b e0       	ldi	r24, 0x0B	; 11
    2566:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <ADC_Conversion>
    256a:	80 93 22 03 	sts	0x0322, r24
			value = Sharp_GP2D12_estimation(sharp);				//Stores Distance calsulated in a variable "value".
    256e:	80 91 22 03 	lds	r24, 0x0322
    2572:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <Sharp_GP2D12_estimation>
    2576:	fe 01       	movw	r30, r28
    2578:	ec 57       	subi	r30, 0x7C	; 124
    257a:	ff 4f       	sbci	r31, 0xFF	; 255
    257c:	91 83       	std	Z+1, r25	; 0x01
    257e:	80 83       	st	Z, r24
			lcd_print(1,1,value,3);
    2580:	fe 01       	movw	r30, r28
    2582:	ec 57       	subi	r30, 0x7C	; 124
    2584:	ff 4f       	sbci	r31, 0xFF	; 255
    2586:	20 81       	ld	r18, Z
    2588:	31 81       	ldd	r19, Z+1	; 0x01
    258a:	81 e0       	ldi	r24, 0x01	; 1
    258c:	61 e0       	ldi	r22, 0x01	; 1
    258e:	a9 01       	movw	r20, r18
    2590:	23 e0       	ldi	r18, 0x03	; 3
    2592:	30 e0       	ldi	r19, 0x00	; 0
    2594:	0e 94 86 09 	call	0x130c	; 0x130c <lcd_print>
    2598:	1c c0       	rjmp	.+56     	; 0x25d2 <__stack+0x3d3>

			while(value>120)
			{
				sharp = ADC_Conversion(11);						//Stores the Analog value of front sharp connected to ADC channel 11 into variable "sharp"
    259a:	8b e0       	ldi	r24, 0x0B	; 11
    259c:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <ADC_Conversion>
    25a0:	80 93 22 03 	sts	0x0322, r24
				value = Sharp_GP2D12_estimation(sharp);				//Stores Distance calsulated in a variable "value".
    25a4:	80 91 22 03 	lds	r24, 0x0322
    25a8:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <Sharp_GP2D12_estimation>
    25ac:	fe 01       	movw	r30, r28
    25ae:	ec 57       	subi	r30, 0x7C	; 124
    25b0:	ff 4f       	sbci	r31, 0xFF	; 255
    25b2:	91 83       	std	Z+1, r25	; 0x01
    25b4:	80 83       	st	Z, r24
				lcd_print(1,1,value,3);
    25b6:	fe 01       	movw	r30, r28
    25b8:	ec 57       	subi	r30, 0x7C	; 124
    25ba:	ff 4f       	sbci	r31, 0xFF	; 255
    25bc:	20 81       	ld	r18, Z
    25be:	31 81       	ldd	r19, Z+1	; 0x01
    25c0:	81 e0       	ldi	r24, 0x01	; 1
    25c2:	61 e0       	ldi	r22, 0x01	; 1
    25c4:	a9 01       	movw	r20, r18
    25c6:	23 e0       	ldi	r18, 0x03	; 3
    25c8:	30 e0       	ldi	r19, 0x00	; 0
    25ca:	0e 94 86 09 	call	0x130c	; 0x130c <lcd_print>
				forward();
    25ce:	0e 94 16 0b 	call	0x162c	; 0x162c <forward>

			sharp = ADC_Conversion(11);						//Stores the Analog value of front sharp connected to ADC channel 11 into variable "sharp"
			value = Sharp_GP2D12_estimation(sharp);				//Stores Distance calsulated in a variable "value".
			lcd_print(1,1,value,3);

			while(value>120)
    25d2:	fe 01       	movw	r30, r28
    25d4:	ec 57       	subi	r30, 0x7C	; 124
    25d6:	ff 4f       	sbci	r31, 0xFF	; 255
    25d8:	80 81       	ld	r24, Z
    25da:	91 81       	ldd	r25, Z+1	; 0x01
    25dc:	89 37       	cpi	r24, 0x79	; 121
    25de:	91 05       	cpc	r25, r1
    25e0:	e0 f6       	brcc	.-72     	; 0x259a <__stack+0x39b>
				sharp = ADC_Conversion(11);						//Stores the Analog value of front sharp connected to ADC channel 11 into variable "sharp"
				value = Sharp_GP2D12_estimation(sharp);				//Stores Distance calsulated in a variable "value".
				lcd_print(1,1,value,3);
				forward();
			}
			stop();
    25e2:	0e 94 42 0b 	call	0x1684	; 0x1684 <stop>
    25e6:	80 e0       	ldi	r24, 0x00	; 0
    25e8:	90 e0       	ldi	r25, 0x00	; 0
    25ea:	aa ef       	ldi	r26, 0xFA	; 250
    25ec:	b4 e4       	ldi	r27, 0x44	; 68
    25ee:	8d ab       	std	Y+53, r24	; 0x35
    25f0:	9e ab       	std	Y+54, r25	; 0x36
    25f2:	af ab       	std	Y+55, r26	; 0x37
    25f4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25f6:	6d a9       	ldd	r22, Y+53	; 0x35
    25f8:	7e a9       	ldd	r23, Y+54	; 0x36
    25fa:	8f a9       	ldd	r24, Y+55	; 0x37
    25fc:	98 ad       	ldd	r25, Y+56	; 0x38
    25fe:	2d ec       	ldi	r18, 0xCD	; 205
    2600:	3c ec       	ldi	r19, 0xCC	; 204
    2602:	4c e2       	ldi	r20, 0x2C	; 44
    2604:	55 e4       	ldi	r21, 0x45	; 69
    2606:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <__mulsf3>
    260a:	dc 01       	movw	r26, r24
    260c:	cb 01       	movw	r24, r22
    260e:	89 ab       	std	Y+49, r24	; 0x31
    2610:	9a ab       	std	Y+50, r25	; 0x32
    2612:	ab ab       	std	Y+51, r26	; 0x33
    2614:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2616:	69 a9       	ldd	r22, Y+49	; 0x31
    2618:	7a a9       	ldd	r23, Y+50	; 0x32
    261a:	8b a9       	ldd	r24, Y+51	; 0x33
    261c:	9c a9       	ldd	r25, Y+52	; 0x34
    261e:	20 e0       	ldi	r18, 0x00	; 0
    2620:	30 e0       	ldi	r19, 0x00	; 0
    2622:	40 e8       	ldi	r20, 0x80	; 128
    2624:	5f e3       	ldi	r21, 0x3F	; 63
    2626:	0e 94 da 18 	call	0x31b4	; 0x31b4 <__ltsf2>
    262a:	88 23       	and	r24, r24
    262c:	2c f4       	brge	.+10     	; 0x2638 <__stack+0x439>
		__ticks = 1;
    262e:	81 e0       	ldi	r24, 0x01	; 1
    2630:	90 e0       	ldi	r25, 0x00	; 0
    2632:	98 ab       	std	Y+48, r25	; 0x30
    2634:	8f a7       	std	Y+47, r24	; 0x2f
    2636:	3f c0       	rjmp	.+126    	; 0x26b6 <__stack+0x4b7>
	else if (__tmp > 65535)
    2638:	69 a9       	ldd	r22, Y+49	; 0x31
    263a:	7a a9       	ldd	r23, Y+50	; 0x32
    263c:	8b a9       	ldd	r24, Y+51	; 0x33
    263e:	9c a9       	ldd	r25, Y+52	; 0x34
    2640:	20 e0       	ldi	r18, 0x00	; 0
    2642:	3f ef       	ldi	r19, 0xFF	; 255
    2644:	4f e7       	ldi	r20, 0x7F	; 127
    2646:	57 e4       	ldi	r21, 0x47	; 71
    2648:	0e 94 7a 18 	call	0x30f4	; 0x30f4 <__gtsf2>
    264c:	18 16       	cp	r1, r24
    264e:	4c f5       	brge	.+82     	; 0x26a2 <__stack+0x4a3>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2650:	6d a9       	ldd	r22, Y+53	; 0x35
    2652:	7e a9       	ldd	r23, Y+54	; 0x36
    2654:	8f a9       	ldd	r24, Y+55	; 0x37
    2656:	98 ad       	ldd	r25, Y+56	; 0x38
    2658:	20 e0       	ldi	r18, 0x00	; 0
    265a:	30 e0       	ldi	r19, 0x00	; 0
    265c:	40 e2       	ldi	r20, 0x20	; 32
    265e:	51 e4       	ldi	r21, 0x41	; 65
    2660:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <__mulsf3>
    2664:	dc 01       	movw	r26, r24
    2666:	cb 01       	movw	r24, r22
    2668:	bc 01       	movw	r22, r24
    266a:	cd 01       	movw	r24, r26
    266c:	0e 94 fe 14 	call	0x29fc	; 0x29fc <__fixunssfsi>
    2670:	dc 01       	movw	r26, r24
    2672:	cb 01       	movw	r24, r22
    2674:	98 ab       	std	Y+48, r25	; 0x30
    2676:	8f a7       	std	Y+47, r24	; 0x2f
    2678:	0f c0       	rjmp	.+30     	; 0x2698 <__stack+0x499>
    267a:	84 e1       	ldi	r24, 0x14	; 20
    267c:	91 e0       	ldi	r25, 0x01	; 1
    267e:	9e a7       	std	Y+46, r25	; 0x2e
    2680:	8d a7       	std	Y+45, r24	; 0x2d
    2682:	8d a5       	ldd	r24, Y+45	; 0x2d
    2684:	9e a5       	ldd	r25, Y+46	; 0x2e
    2686:	01 97       	sbiw	r24, 0x01	; 1
    2688:	f1 f7       	brne	.-4      	; 0x2686 <__stack+0x487>
    268a:	9e a7       	std	Y+46, r25	; 0x2e
    268c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    268e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2690:	98 a9       	ldd	r25, Y+48	; 0x30
    2692:	01 97       	sbiw	r24, 0x01	; 1
    2694:	98 ab       	std	Y+48, r25	; 0x30
    2696:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2698:	8f a5       	ldd	r24, Y+47	; 0x2f
    269a:	98 a9       	ldd	r25, Y+48	; 0x30
    269c:	00 97       	sbiw	r24, 0x00	; 0
    269e:	69 f7       	brne	.-38     	; 0x267a <__stack+0x47b>
    26a0:	14 c0       	rjmp	.+40     	; 0x26ca <__stack+0x4cb>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26a2:	69 a9       	ldd	r22, Y+49	; 0x31
    26a4:	7a a9       	ldd	r23, Y+50	; 0x32
    26a6:	8b a9       	ldd	r24, Y+51	; 0x33
    26a8:	9c a9       	ldd	r25, Y+52	; 0x34
    26aa:	0e 94 fe 14 	call	0x29fc	; 0x29fc <__fixunssfsi>
    26ae:	dc 01       	movw	r26, r24
    26b0:	cb 01       	movw	r24, r22
    26b2:	98 ab       	std	Y+48, r25	; 0x30
    26b4:	8f a7       	std	Y+47, r24	; 0x2f
    26b6:	8f a5       	ldd	r24, Y+47	; 0x2f
    26b8:	98 a9       	ldd	r25, Y+48	; 0x30
    26ba:	9c a7       	std	Y+44, r25	; 0x2c
    26bc:	8b a7       	std	Y+43, r24	; 0x2b
    26be:	8b a5       	ldd	r24, Y+43	; 0x2b
    26c0:	9c a5       	ldd	r25, Y+44	; 0x2c
    26c2:	01 97       	sbiw	r24, 0x01	; 1
    26c4:	f1 f7       	brne	.-4      	; 0x26c2 <__stack+0x4c3>
    26c6:	9c a7       	std	Y+44, r25	; 0x2c
    26c8:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(2000);

			for (angle = 0; angle <120; angle++)
    26ca:	fe 01       	movw	r30, r28
    26cc:	e1 58       	subi	r30, 0x81	; 129
    26ce:	ff 4f       	sbci	r31, 0xFF	; 255
    26d0:	10 82       	st	Z, r1
    26d2:	81 c0       	rjmp	.+258    	; 0x27d6 <__stack+0x5d7>
 			{
  				servo_3(angle);
    26d4:	fe 01       	movw	r30, r28
    26d6:	e1 58       	subi	r30, 0x81	; 129
    26d8:	ff 4f       	sbci	r31, 0xFF	; 255
    26da:	80 81       	ld	r24, Z
    26dc:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <servo_3>
    26e0:	80 e0       	ldi	r24, 0x00	; 0
    26e2:	90 e0       	ldi	r25, 0x00	; 0
    26e4:	a0 e2       	ldi	r26, 0x20	; 32
    26e6:	b1 e4       	ldi	r27, 0x41	; 65
    26e8:	8f a3       	std	Y+39, r24	; 0x27
    26ea:	98 a7       	std	Y+40, r25	; 0x28
    26ec:	a9 a7       	std	Y+41, r26	; 0x29
    26ee:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26f0:	6f a1       	ldd	r22, Y+39	; 0x27
    26f2:	78 a5       	ldd	r23, Y+40	; 0x28
    26f4:	89 a5       	ldd	r24, Y+41	; 0x29
    26f6:	9a a5       	ldd	r25, Y+42	; 0x2a
    26f8:	2d ec       	ldi	r18, 0xCD	; 205
    26fa:	3c ec       	ldi	r19, 0xCC	; 204
    26fc:	4c e2       	ldi	r20, 0x2C	; 44
    26fe:	55 e4       	ldi	r21, 0x45	; 69
    2700:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <__mulsf3>
    2704:	dc 01       	movw	r26, r24
    2706:	cb 01       	movw	r24, r22
    2708:	8b a3       	std	Y+35, r24	; 0x23
    270a:	9c a3       	std	Y+36, r25	; 0x24
    270c:	ad a3       	std	Y+37, r26	; 0x25
    270e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2710:	6b a1       	ldd	r22, Y+35	; 0x23
    2712:	7c a1       	ldd	r23, Y+36	; 0x24
    2714:	8d a1       	ldd	r24, Y+37	; 0x25
    2716:	9e a1       	ldd	r25, Y+38	; 0x26
    2718:	20 e0       	ldi	r18, 0x00	; 0
    271a:	30 e0       	ldi	r19, 0x00	; 0
    271c:	40 e8       	ldi	r20, 0x80	; 128
    271e:	5f e3       	ldi	r21, 0x3F	; 63
    2720:	0e 94 da 18 	call	0x31b4	; 0x31b4 <__ltsf2>
    2724:	88 23       	and	r24, r24
    2726:	2c f4       	brge	.+10     	; 0x2732 <__stack+0x533>
		__ticks = 1;
    2728:	81 e0       	ldi	r24, 0x01	; 1
    272a:	90 e0       	ldi	r25, 0x00	; 0
    272c:	9a a3       	std	Y+34, r25	; 0x22
    272e:	89 a3       	std	Y+33, r24	; 0x21
    2730:	3f c0       	rjmp	.+126    	; 0x27b0 <__stack+0x5b1>
	else if (__tmp > 65535)
    2732:	6b a1       	ldd	r22, Y+35	; 0x23
    2734:	7c a1       	ldd	r23, Y+36	; 0x24
    2736:	8d a1       	ldd	r24, Y+37	; 0x25
    2738:	9e a1       	ldd	r25, Y+38	; 0x26
    273a:	20 e0       	ldi	r18, 0x00	; 0
    273c:	3f ef       	ldi	r19, 0xFF	; 255
    273e:	4f e7       	ldi	r20, 0x7F	; 127
    2740:	57 e4       	ldi	r21, 0x47	; 71
    2742:	0e 94 7a 18 	call	0x30f4	; 0x30f4 <__gtsf2>
    2746:	18 16       	cp	r1, r24
    2748:	4c f5       	brge	.+82     	; 0x279c <__stack+0x59d>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    274a:	6f a1       	ldd	r22, Y+39	; 0x27
    274c:	78 a5       	ldd	r23, Y+40	; 0x28
    274e:	89 a5       	ldd	r24, Y+41	; 0x29
    2750:	9a a5       	ldd	r25, Y+42	; 0x2a
    2752:	20 e0       	ldi	r18, 0x00	; 0
    2754:	30 e0       	ldi	r19, 0x00	; 0
    2756:	40 e2       	ldi	r20, 0x20	; 32
    2758:	51 e4       	ldi	r21, 0x41	; 65
    275a:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <__mulsf3>
    275e:	dc 01       	movw	r26, r24
    2760:	cb 01       	movw	r24, r22
    2762:	bc 01       	movw	r22, r24
    2764:	cd 01       	movw	r24, r26
    2766:	0e 94 fe 14 	call	0x29fc	; 0x29fc <__fixunssfsi>
    276a:	dc 01       	movw	r26, r24
    276c:	cb 01       	movw	r24, r22
    276e:	9a a3       	std	Y+34, r25	; 0x22
    2770:	89 a3       	std	Y+33, r24	; 0x21
    2772:	0f c0       	rjmp	.+30     	; 0x2792 <__stack+0x593>
    2774:	84 e1       	ldi	r24, 0x14	; 20
    2776:	91 e0       	ldi	r25, 0x01	; 1
    2778:	98 a3       	std	Y+32, r25	; 0x20
    277a:	8f 8f       	std	Y+31, r24	; 0x1f
    277c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    277e:	98 a1       	ldd	r25, Y+32	; 0x20
    2780:	01 97       	sbiw	r24, 0x01	; 1
    2782:	f1 f7       	brne	.-4      	; 0x2780 <__stack+0x581>
    2784:	98 a3       	std	Y+32, r25	; 0x20
    2786:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2788:	89 a1       	ldd	r24, Y+33	; 0x21
    278a:	9a a1       	ldd	r25, Y+34	; 0x22
    278c:	01 97       	sbiw	r24, 0x01	; 1
    278e:	9a a3       	std	Y+34, r25	; 0x22
    2790:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2792:	89 a1       	ldd	r24, Y+33	; 0x21
    2794:	9a a1       	ldd	r25, Y+34	; 0x22
    2796:	00 97       	sbiw	r24, 0x00	; 0
    2798:	69 f7       	brne	.-38     	; 0x2774 <__stack+0x575>
    279a:	14 c0       	rjmp	.+40     	; 0x27c4 <__stack+0x5c5>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    279c:	6b a1       	ldd	r22, Y+35	; 0x23
    279e:	7c a1       	ldd	r23, Y+36	; 0x24
    27a0:	8d a1       	ldd	r24, Y+37	; 0x25
    27a2:	9e a1       	ldd	r25, Y+38	; 0x26
    27a4:	0e 94 fe 14 	call	0x29fc	; 0x29fc <__fixunssfsi>
    27a8:	dc 01       	movw	r26, r24
    27aa:	cb 01       	movw	r24, r22
    27ac:	9a a3       	std	Y+34, r25	; 0x22
    27ae:	89 a3       	std	Y+33, r24	; 0x21
    27b0:	89 a1       	ldd	r24, Y+33	; 0x21
    27b2:	9a a1       	ldd	r25, Y+34	; 0x22
    27b4:	9e 8f       	std	Y+30, r25	; 0x1e
    27b6:	8d 8f       	std	Y+29, r24	; 0x1d
    27b8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    27ba:	9e 8d       	ldd	r25, Y+30	; 0x1e
    27bc:	01 97       	sbiw	r24, 0x01	; 1
    27be:	f1 f7       	brne	.-4      	; 0x27bc <__stack+0x5bd>
    27c0:	9e 8f       	std	Y+30, r25	; 0x1e
    27c2:	8d 8f       	std	Y+29, r24	; 0x1d
				forward();
			}
			stop();
			_delay_ms(2000);

			for (angle = 0; angle <120; angle++)
    27c4:	de 01       	movw	r26, r28
    27c6:	a1 58       	subi	r26, 0x81	; 129
    27c8:	bf 4f       	sbci	r27, 0xFF	; 255
    27ca:	fe 01       	movw	r30, r28
    27cc:	e1 58       	subi	r30, 0x81	; 129
    27ce:	ff 4f       	sbci	r31, 0xFF	; 255
    27d0:	80 81       	ld	r24, Z
    27d2:	8f 5f       	subi	r24, 0xFF	; 255
    27d4:	8c 93       	st	X, r24
    27d6:	fe 01       	movw	r30, r28
    27d8:	e1 58       	subi	r30, 0x81	; 129
    27da:	ff 4f       	sbci	r31, 0xFF	; 255
    27dc:	80 81       	ld	r24, Z
    27de:	88 37       	cpi	r24, 0x78	; 120
    27e0:	08 f4       	brcc	.+2      	; 0x27e4 <__stack+0x5e5>
    27e2:	78 cf       	rjmp	.-272    	; 0x26d4 <__stack+0x4d5>
    27e4:	80 e0       	ldi	r24, 0x00	; 0
    27e6:	90 e0       	ldi	r25, 0x00	; 0
    27e8:	aa e7       	ldi	r26, 0x7A	; 122
    27ea:	b4 e4       	ldi	r27, 0x44	; 68
    27ec:	89 8f       	std	Y+25, r24	; 0x19
    27ee:	9a 8f       	std	Y+26, r25	; 0x1a
    27f0:	ab 8f       	std	Y+27, r26	; 0x1b
    27f2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27f4:	69 8d       	ldd	r22, Y+25	; 0x19
    27f6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27fa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27fc:	2d ec       	ldi	r18, 0xCD	; 205
    27fe:	3c ec       	ldi	r19, 0xCC	; 204
    2800:	4c e2       	ldi	r20, 0x2C	; 44
    2802:	55 e4       	ldi	r21, 0x45	; 69
    2804:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <__mulsf3>
    2808:	dc 01       	movw	r26, r24
    280a:	cb 01       	movw	r24, r22
    280c:	8d 8b       	std	Y+21, r24	; 0x15
    280e:	9e 8b       	std	Y+22, r25	; 0x16
    2810:	af 8b       	std	Y+23, r26	; 0x17
    2812:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2814:	6d 89       	ldd	r22, Y+21	; 0x15
    2816:	7e 89       	ldd	r23, Y+22	; 0x16
    2818:	8f 89       	ldd	r24, Y+23	; 0x17
    281a:	98 8d       	ldd	r25, Y+24	; 0x18
    281c:	20 e0       	ldi	r18, 0x00	; 0
    281e:	30 e0       	ldi	r19, 0x00	; 0
    2820:	40 e8       	ldi	r20, 0x80	; 128
    2822:	5f e3       	ldi	r21, 0x3F	; 63
    2824:	0e 94 da 18 	call	0x31b4	; 0x31b4 <__ltsf2>
    2828:	88 23       	and	r24, r24
    282a:	2c f4       	brge	.+10     	; 0x2836 <__stack+0x637>
		__ticks = 1;
    282c:	81 e0       	ldi	r24, 0x01	; 1
    282e:	90 e0       	ldi	r25, 0x00	; 0
    2830:	9c 8b       	std	Y+20, r25	; 0x14
    2832:	8b 8b       	std	Y+19, r24	; 0x13
    2834:	3f c0       	rjmp	.+126    	; 0x28b4 <__stack+0x6b5>
	else if (__tmp > 65535)
    2836:	6d 89       	ldd	r22, Y+21	; 0x15
    2838:	7e 89       	ldd	r23, Y+22	; 0x16
    283a:	8f 89       	ldd	r24, Y+23	; 0x17
    283c:	98 8d       	ldd	r25, Y+24	; 0x18
    283e:	20 e0       	ldi	r18, 0x00	; 0
    2840:	3f ef       	ldi	r19, 0xFF	; 255
    2842:	4f e7       	ldi	r20, 0x7F	; 127
    2844:	57 e4       	ldi	r21, 0x47	; 71
    2846:	0e 94 7a 18 	call	0x30f4	; 0x30f4 <__gtsf2>
    284a:	18 16       	cp	r1, r24
    284c:	4c f5       	brge	.+82     	; 0x28a0 <__stack+0x6a1>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    284e:	69 8d       	ldd	r22, Y+25	; 0x19
    2850:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2852:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2854:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2856:	20 e0       	ldi	r18, 0x00	; 0
    2858:	30 e0       	ldi	r19, 0x00	; 0
    285a:	40 e2       	ldi	r20, 0x20	; 32
    285c:	51 e4       	ldi	r21, 0x41	; 65
    285e:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <__mulsf3>
    2862:	dc 01       	movw	r26, r24
    2864:	cb 01       	movw	r24, r22
    2866:	bc 01       	movw	r22, r24
    2868:	cd 01       	movw	r24, r26
    286a:	0e 94 fe 14 	call	0x29fc	; 0x29fc <__fixunssfsi>
    286e:	dc 01       	movw	r26, r24
    2870:	cb 01       	movw	r24, r22
    2872:	9c 8b       	std	Y+20, r25	; 0x14
    2874:	8b 8b       	std	Y+19, r24	; 0x13
    2876:	0f c0       	rjmp	.+30     	; 0x2896 <__stack+0x697>
    2878:	84 e1       	ldi	r24, 0x14	; 20
    287a:	91 e0       	ldi	r25, 0x01	; 1
    287c:	9a 8b       	std	Y+18, r25	; 0x12
    287e:	89 8b       	std	Y+17, r24	; 0x11
    2880:	89 89       	ldd	r24, Y+17	; 0x11
    2882:	9a 89       	ldd	r25, Y+18	; 0x12
    2884:	01 97       	sbiw	r24, 0x01	; 1
    2886:	f1 f7       	brne	.-4      	; 0x2884 <__stack+0x685>
    2888:	9a 8b       	std	Y+18, r25	; 0x12
    288a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    288c:	8b 89       	ldd	r24, Y+19	; 0x13
    288e:	9c 89       	ldd	r25, Y+20	; 0x14
    2890:	01 97       	sbiw	r24, 0x01	; 1
    2892:	9c 8b       	std	Y+20, r25	; 0x14
    2894:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2896:	8b 89       	ldd	r24, Y+19	; 0x13
    2898:	9c 89       	ldd	r25, Y+20	; 0x14
    289a:	00 97       	sbiw	r24, 0x00	; 0
    289c:	69 f7       	brne	.-38     	; 0x2878 <__stack+0x679>
    289e:	14 c0       	rjmp	.+40     	; 0x28c8 <__stack+0x6c9>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28a0:	6d 89       	ldd	r22, Y+21	; 0x15
    28a2:	7e 89       	ldd	r23, Y+22	; 0x16
    28a4:	8f 89       	ldd	r24, Y+23	; 0x17
    28a6:	98 8d       	ldd	r25, Y+24	; 0x18
    28a8:	0e 94 fe 14 	call	0x29fc	; 0x29fc <__fixunssfsi>
    28ac:	dc 01       	movw	r26, r24
    28ae:	cb 01       	movw	r24, r22
    28b0:	9c 8b       	std	Y+20, r25	; 0x14
    28b2:	8b 8b       	std	Y+19, r24	; 0x13
    28b4:	8b 89       	ldd	r24, Y+19	; 0x13
    28b6:	9c 89       	ldd	r25, Y+20	; 0x14
    28b8:	98 8b       	std	Y+16, r25	; 0x10
    28ba:	8f 87       	std	Y+15, r24	; 0x0f
    28bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    28be:	98 89       	ldd	r25, Y+16	; 0x10
    28c0:	01 97       	sbiw	r24, 0x01	; 1
    28c2:	f1 f7       	brne	.-4      	; 0x28c0 <__stack+0x6c1>
    28c4:	98 8b       	std	Y+16, r25	; 0x10
    28c6:	8f 87       	std	Y+15, r24	; 0x0f
  				servo_3(angle);
  				_delay_ms(10);
 			}
 			_delay_ms(1000);

			velocity(130,130);
    28c8:	82 e8       	ldi	r24, 0x82	; 130
    28ca:	62 e8       	ldi	r22, 0x82	; 130
    28cc:	0e 94 4c 0b 	call	0x1698	; 0x1698 <velocity>
			angle_rotate(180);
    28d0:	84 eb       	ldi	r24, 0xB4	; 180
    28d2:	90 e0       	ldi	r25, 0x00	; 0
    28d4:	0e 94 8f 0b 	call	0x171e	; 0x171e <angle_rotate>
			stop();
    28d8:	0e 94 42 0b 	call	0x1684	; 0x1684 <stop>
    28dc:	80 e0       	ldi	r24, 0x00	; 0
    28de:	90 e0       	ldi	r25, 0x00	; 0
    28e0:	aa ef       	ldi	r26, 0xFA	; 250
    28e2:	b4 e4       	ldi	r27, 0x44	; 68
    28e4:	8b 87       	std	Y+11, r24	; 0x0b
    28e6:	9c 87       	std	Y+12, r25	; 0x0c
    28e8:	ad 87       	std	Y+13, r26	; 0x0d
    28ea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    28ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    28f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    28f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    28f4:	2d ec       	ldi	r18, 0xCD	; 205
    28f6:	3c ec       	ldi	r19, 0xCC	; 204
    28f8:	4c e2       	ldi	r20, 0x2C	; 44
    28fa:	55 e4       	ldi	r21, 0x45	; 69
    28fc:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <__mulsf3>
    2900:	dc 01       	movw	r26, r24
    2902:	cb 01       	movw	r24, r22
    2904:	8f 83       	std	Y+7, r24	; 0x07
    2906:	98 87       	std	Y+8, r25	; 0x08
    2908:	a9 87       	std	Y+9, r26	; 0x09
    290a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    290c:	6f 81       	ldd	r22, Y+7	; 0x07
    290e:	78 85       	ldd	r23, Y+8	; 0x08
    2910:	89 85       	ldd	r24, Y+9	; 0x09
    2912:	9a 85       	ldd	r25, Y+10	; 0x0a
    2914:	20 e0       	ldi	r18, 0x00	; 0
    2916:	30 e0       	ldi	r19, 0x00	; 0
    2918:	40 e8       	ldi	r20, 0x80	; 128
    291a:	5f e3       	ldi	r21, 0x3F	; 63
    291c:	0e 94 da 18 	call	0x31b4	; 0x31b4 <__ltsf2>
    2920:	88 23       	and	r24, r24
    2922:	2c f4       	brge	.+10     	; 0x292e <__stack+0x72f>
		__ticks = 1;
    2924:	81 e0       	ldi	r24, 0x01	; 1
    2926:	90 e0       	ldi	r25, 0x00	; 0
    2928:	9e 83       	std	Y+6, r25	; 0x06
    292a:	8d 83       	std	Y+5, r24	; 0x05
    292c:	3f c0       	rjmp	.+126    	; 0x29ac <__stack+0x7ad>
	else if (__tmp > 65535)
    292e:	6f 81       	ldd	r22, Y+7	; 0x07
    2930:	78 85       	ldd	r23, Y+8	; 0x08
    2932:	89 85       	ldd	r24, Y+9	; 0x09
    2934:	9a 85       	ldd	r25, Y+10	; 0x0a
    2936:	20 e0       	ldi	r18, 0x00	; 0
    2938:	3f ef       	ldi	r19, 0xFF	; 255
    293a:	4f e7       	ldi	r20, 0x7F	; 127
    293c:	57 e4       	ldi	r21, 0x47	; 71
    293e:	0e 94 7a 18 	call	0x30f4	; 0x30f4 <__gtsf2>
    2942:	18 16       	cp	r1, r24
    2944:	4c f5       	brge	.+82     	; 0x2998 <__stack+0x799>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2946:	6b 85       	ldd	r22, Y+11	; 0x0b
    2948:	7c 85       	ldd	r23, Y+12	; 0x0c
    294a:	8d 85       	ldd	r24, Y+13	; 0x0d
    294c:	9e 85       	ldd	r25, Y+14	; 0x0e
    294e:	20 e0       	ldi	r18, 0x00	; 0
    2950:	30 e0       	ldi	r19, 0x00	; 0
    2952:	40 e2       	ldi	r20, 0x20	; 32
    2954:	51 e4       	ldi	r21, 0x41	; 65
    2956:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <__mulsf3>
    295a:	dc 01       	movw	r26, r24
    295c:	cb 01       	movw	r24, r22
    295e:	bc 01       	movw	r22, r24
    2960:	cd 01       	movw	r24, r26
    2962:	0e 94 fe 14 	call	0x29fc	; 0x29fc <__fixunssfsi>
    2966:	dc 01       	movw	r26, r24
    2968:	cb 01       	movw	r24, r22
    296a:	9e 83       	std	Y+6, r25	; 0x06
    296c:	8d 83       	std	Y+5, r24	; 0x05
    296e:	0f c0       	rjmp	.+30     	; 0x298e <__stack+0x78f>
    2970:	84 e1       	ldi	r24, 0x14	; 20
    2972:	91 e0       	ldi	r25, 0x01	; 1
    2974:	9c 83       	std	Y+4, r25	; 0x04
    2976:	8b 83       	std	Y+3, r24	; 0x03
    2978:	8b 81       	ldd	r24, Y+3	; 0x03
    297a:	9c 81       	ldd	r25, Y+4	; 0x04
    297c:	01 97       	sbiw	r24, 0x01	; 1
    297e:	f1 f7       	brne	.-4      	; 0x297c <__stack+0x77d>
    2980:	9c 83       	std	Y+4, r25	; 0x04
    2982:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2984:	8d 81       	ldd	r24, Y+5	; 0x05
    2986:	9e 81       	ldd	r25, Y+6	; 0x06
    2988:	01 97       	sbiw	r24, 0x01	; 1
    298a:	9e 83       	std	Y+6, r25	; 0x06
    298c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    298e:	8d 81       	ldd	r24, Y+5	; 0x05
    2990:	9e 81       	ldd	r25, Y+6	; 0x06
    2992:	00 97       	sbiw	r24, 0x00	; 0
    2994:	69 f7       	brne	.-38     	; 0x2970 <__stack+0x771>
    2996:	14 c0       	rjmp	.+40     	; 0x29c0 <__stack+0x7c1>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2998:	6f 81       	ldd	r22, Y+7	; 0x07
    299a:	78 85       	ldd	r23, Y+8	; 0x08
    299c:	89 85       	ldd	r24, Y+9	; 0x09
    299e:	9a 85       	ldd	r25, Y+10	; 0x0a
    29a0:	0e 94 fe 14 	call	0x29fc	; 0x29fc <__fixunssfsi>
    29a4:	dc 01       	movw	r26, r24
    29a6:	cb 01       	movw	r24, r22
    29a8:	9e 83       	std	Y+6, r25	; 0x06
    29aa:	8d 83       	std	Y+5, r24	; 0x05
    29ac:	8d 81       	ldd	r24, Y+5	; 0x05
    29ae:	9e 81       	ldd	r25, Y+6	; 0x06
    29b0:	9a 83       	std	Y+2, r25	; 0x02
    29b2:	89 83       	std	Y+1, r24	; 0x01
    29b4:	89 81       	ldd	r24, Y+1	; 0x01
    29b6:	9a 81       	ldd	r25, Y+2	; 0x02
    29b8:	01 97       	sbiw	r24, 0x01	; 1
    29ba:	f1 f7       	brne	.-4      	; 0x29b8 <__stack+0x7b9>
    29bc:	9a 83       	std	Y+2, r25	; 0x02
    29be:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(2000);
			
			data='0';
    29c0:	80 e3       	ldi	r24, 0x30	; 48
    29c2:	80 93 1d 03 	sts	0x031D, r24
		




		sharp = ADC_Conversion(11);						//Stores the Analog value of front sharp connected to ADC channel 11 into variable "sharp"
    29c6:	8b e0       	ldi	r24, 0x0B	; 11
    29c8:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <ADC_Conversion>
    29cc:	80 93 22 03 	sts	0x0322, r24
		value = Sharp_GP2D12_estimation(sharp);				//Stores Distance calsulated in a variable "value".
    29d0:	80 91 22 03 	lds	r24, 0x0322
    29d4:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <Sharp_GP2D12_estimation>
    29d8:	fe 01       	movw	r30, r28
    29da:	ec 57       	subi	r30, 0x7C	; 124
    29dc:	ff 4f       	sbci	r31, 0xFF	; 255
    29de:	91 83       	std	Z+1, r25	; 0x01
    29e0:	80 83       	st	Z, r24
		lcd_print(1,1,value,3);
    29e2:	fe 01       	movw	r30, r28
    29e4:	ec 57       	subi	r30, 0x7C	; 124
    29e6:	ff 4f       	sbci	r31, 0xFF	; 255
    29e8:	20 81       	ld	r18, Z
    29ea:	31 81       	ldd	r19, Z+1	; 0x01
    29ec:	81 e0       	ldi	r24, 0x01	; 1
    29ee:	61 e0       	ldi	r22, 0x01	; 1
    29f0:	a9 01       	movw	r20, r18
    29f2:	23 e0       	ldi	r18, 0x03	; 3
    29f4:	30 e0       	ldi	r19, 0x00	; 0
    29f6:	0e 94 86 09 	call	0x130c	; 0x130c <lcd_print>
    29fa:	fc c9       	rjmp	.-3080   	; 0x1df4 <main+0x9c>

000029fc <__fixunssfsi>:
    29fc:	ef 92       	push	r14
    29fe:	ff 92       	push	r15
    2a00:	0f 93       	push	r16
    2a02:	1f 93       	push	r17
    2a04:	7b 01       	movw	r14, r22
    2a06:	8c 01       	movw	r16, r24
    2a08:	20 e0       	ldi	r18, 0x00	; 0
    2a0a:	30 e0       	ldi	r19, 0x00	; 0
    2a0c:	40 e0       	ldi	r20, 0x00	; 0
    2a0e:	5f e4       	ldi	r21, 0x4F	; 79
    2a10:	0e 94 aa 18 	call	0x3154	; 0x3154 <__gesf2>
    2a14:	88 23       	and	r24, r24
    2a16:	8c f0       	brlt	.+34     	; 0x2a3a <__fixunssfsi+0x3e>
    2a18:	c8 01       	movw	r24, r16
    2a1a:	b7 01       	movw	r22, r14
    2a1c:	20 e0       	ldi	r18, 0x00	; 0
    2a1e:	30 e0       	ldi	r19, 0x00	; 0
    2a20:	40 e0       	ldi	r20, 0x00	; 0
    2a22:	5f e4       	ldi	r21, 0x4F	; 79
    2a24:	0e 94 76 16 	call	0x2cec	; 0x2cec <__subsf3>
    2a28:	0e 94 68 19 	call	0x32d0	; 0x32d0 <__fixsfsi>
    2a2c:	9b 01       	movw	r18, r22
    2a2e:	ac 01       	movw	r20, r24
    2a30:	20 50       	subi	r18, 0x00	; 0
    2a32:	30 40       	sbci	r19, 0x00	; 0
    2a34:	40 40       	sbci	r20, 0x00	; 0
    2a36:	50 48       	sbci	r21, 0x80	; 128
    2a38:	06 c0       	rjmp	.+12     	; 0x2a46 <__fixunssfsi+0x4a>
    2a3a:	c8 01       	movw	r24, r16
    2a3c:	b7 01       	movw	r22, r14
    2a3e:	0e 94 68 19 	call	0x32d0	; 0x32d0 <__fixsfsi>
    2a42:	9b 01       	movw	r18, r22
    2a44:	ac 01       	movw	r20, r24
    2a46:	b9 01       	movw	r22, r18
    2a48:	ca 01       	movw	r24, r20
    2a4a:	1f 91       	pop	r17
    2a4c:	0f 91       	pop	r16
    2a4e:	ff 90       	pop	r15
    2a50:	ef 90       	pop	r14
    2a52:	08 95       	ret

00002a54 <_fpadd_parts>:
    2a54:	a0 e0       	ldi	r26, 0x00	; 0
    2a56:	b0 e0       	ldi	r27, 0x00	; 0
    2a58:	e0 e3       	ldi	r30, 0x30	; 48
    2a5a:	f5 e1       	ldi	r31, 0x15	; 21
    2a5c:	0c 94 3e 1c 	jmp	0x387c	; 0x387c <__prologue_saves__>
    2a60:	dc 01       	movw	r26, r24
    2a62:	2b 01       	movw	r4, r22
    2a64:	fa 01       	movw	r30, r20
    2a66:	9c 91       	ld	r25, X
    2a68:	92 30       	cpi	r25, 0x02	; 2
    2a6a:	08 f4       	brcc	.+2      	; 0x2a6e <_fpadd_parts+0x1a>
    2a6c:	39 c1       	rjmp	.+626    	; 0x2ce0 <_fpadd_parts+0x28c>
    2a6e:	eb 01       	movw	r28, r22
    2a70:	88 81       	ld	r24, Y
    2a72:	82 30       	cpi	r24, 0x02	; 2
    2a74:	08 f4       	brcc	.+2      	; 0x2a78 <_fpadd_parts+0x24>
    2a76:	33 c1       	rjmp	.+614    	; 0x2cde <_fpadd_parts+0x28a>
    2a78:	94 30       	cpi	r25, 0x04	; 4
    2a7a:	69 f4       	brne	.+26     	; 0x2a96 <_fpadd_parts+0x42>
    2a7c:	84 30       	cpi	r24, 0x04	; 4
    2a7e:	09 f0       	breq	.+2      	; 0x2a82 <_fpadd_parts+0x2e>
    2a80:	2f c1       	rjmp	.+606    	; 0x2ce0 <_fpadd_parts+0x28c>
    2a82:	11 96       	adiw	r26, 0x01	; 1
    2a84:	9c 91       	ld	r25, X
    2a86:	11 97       	sbiw	r26, 0x01	; 1
    2a88:	89 81       	ldd	r24, Y+1	; 0x01
    2a8a:	98 17       	cp	r25, r24
    2a8c:	09 f4       	brne	.+2      	; 0x2a90 <_fpadd_parts+0x3c>
    2a8e:	28 c1       	rjmp	.+592    	; 0x2ce0 <_fpadd_parts+0x28c>
    2a90:	a0 e0       	ldi	r26, 0x00	; 0
    2a92:	b2 e0       	ldi	r27, 0x02	; 2
    2a94:	25 c1       	rjmp	.+586    	; 0x2ce0 <_fpadd_parts+0x28c>
    2a96:	84 30       	cpi	r24, 0x04	; 4
    2a98:	09 f4       	brne	.+2      	; 0x2a9c <_fpadd_parts+0x48>
    2a9a:	21 c1       	rjmp	.+578    	; 0x2cde <_fpadd_parts+0x28a>
    2a9c:	82 30       	cpi	r24, 0x02	; 2
    2a9e:	a9 f4       	brne	.+42     	; 0x2aca <_fpadd_parts+0x76>
    2aa0:	92 30       	cpi	r25, 0x02	; 2
    2aa2:	09 f0       	breq	.+2      	; 0x2aa6 <_fpadd_parts+0x52>
    2aa4:	1d c1       	rjmp	.+570    	; 0x2ce0 <_fpadd_parts+0x28c>
    2aa6:	9a 01       	movw	r18, r20
    2aa8:	ad 01       	movw	r20, r26
    2aaa:	88 e0       	ldi	r24, 0x08	; 8
    2aac:	ea 01       	movw	r28, r20
    2aae:	09 90       	ld	r0, Y+
    2ab0:	ae 01       	movw	r20, r28
    2ab2:	e9 01       	movw	r28, r18
    2ab4:	09 92       	st	Y+, r0
    2ab6:	9e 01       	movw	r18, r28
    2ab8:	81 50       	subi	r24, 0x01	; 1
    2aba:	c1 f7       	brne	.-16     	; 0x2aac <_fpadd_parts+0x58>
    2abc:	e2 01       	movw	r28, r4
    2abe:	89 81       	ldd	r24, Y+1	; 0x01
    2ac0:	11 96       	adiw	r26, 0x01	; 1
    2ac2:	9c 91       	ld	r25, X
    2ac4:	89 23       	and	r24, r25
    2ac6:	81 83       	std	Z+1, r24	; 0x01
    2ac8:	08 c1       	rjmp	.+528    	; 0x2cda <_fpadd_parts+0x286>
    2aca:	92 30       	cpi	r25, 0x02	; 2
    2acc:	09 f4       	brne	.+2      	; 0x2ad0 <_fpadd_parts+0x7c>
    2ace:	07 c1       	rjmp	.+526    	; 0x2cde <_fpadd_parts+0x28a>
    2ad0:	12 96       	adiw	r26, 0x02	; 2
    2ad2:	2d 90       	ld	r2, X+
    2ad4:	3c 90       	ld	r3, X
    2ad6:	13 97       	sbiw	r26, 0x03	; 3
    2ad8:	eb 01       	movw	r28, r22
    2ada:	8a 81       	ldd	r24, Y+2	; 0x02
    2adc:	9b 81       	ldd	r25, Y+3	; 0x03
    2ade:	14 96       	adiw	r26, 0x04	; 4
    2ae0:	ad 90       	ld	r10, X+
    2ae2:	bd 90       	ld	r11, X+
    2ae4:	cd 90       	ld	r12, X+
    2ae6:	dc 90       	ld	r13, X
    2ae8:	17 97       	sbiw	r26, 0x07	; 7
    2aea:	ec 80       	ldd	r14, Y+4	; 0x04
    2aec:	fd 80       	ldd	r15, Y+5	; 0x05
    2aee:	0e 81       	ldd	r16, Y+6	; 0x06
    2af0:	1f 81       	ldd	r17, Y+7	; 0x07
    2af2:	91 01       	movw	r18, r2
    2af4:	28 1b       	sub	r18, r24
    2af6:	39 0b       	sbc	r19, r25
    2af8:	b9 01       	movw	r22, r18
    2afa:	37 ff       	sbrs	r19, 7
    2afc:	04 c0       	rjmp	.+8      	; 0x2b06 <_fpadd_parts+0xb2>
    2afe:	66 27       	eor	r22, r22
    2b00:	77 27       	eor	r23, r23
    2b02:	62 1b       	sub	r22, r18
    2b04:	73 0b       	sbc	r23, r19
    2b06:	60 32       	cpi	r22, 0x20	; 32
    2b08:	71 05       	cpc	r23, r1
    2b0a:	0c f0       	brlt	.+2      	; 0x2b0e <_fpadd_parts+0xba>
    2b0c:	61 c0       	rjmp	.+194    	; 0x2bd0 <_fpadd_parts+0x17c>
    2b0e:	12 16       	cp	r1, r18
    2b10:	13 06       	cpc	r1, r19
    2b12:	6c f5       	brge	.+90     	; 0x2b6e <_fpadd_parts+0x11a>
    2b14:	37 01       	movw	r6, r14
    2b16:	48 01       	movw	r8, r16
    2b18:	06 2e       	mov	r0, r22
    2b1a:	04 c0       	rjmp	.+8      	; 0x2b24 <_fpadd_parts+0xd0>
    2b1c:	96 94       	lsr	r9
    2b1e:	87 94       	ror	r8
    2b20:	77 94       	ror	r7
    2b22:	67 94       	ror	r6
    2b24:	0a 94       	dec	r0
    2b26:	d2 f7       	brpl	.-12     	; 0x2b1c <_fpadd_parts+0xc8>
    2b28:	21 e0       	ldi	r18, 0x01	; 1
    2b2a:	30 e0       	ldi	r19, 0x00	; 0
    2b2c:	40 e0       	ldi	r20, 0x00	; 0
    2b2e:	50 e0       	ldi	r21, 0x00	; 0
    2b30:	04 c0       	rjmp	.+8      	; 0x2b3a <_fpadd_parts+0xe6>
    2b32:	22 0f       	add	r18, r18
    2b34:	33 1f       	adc	r19, r19
    2b36:	44 1f       	adc	r20, r20
    2b38:	55 1f       	adc	r21, r21
    2b3a:	6a 95       	dec	r22
    2b3c:	d2 f7       	brpl	.-12     	; 0x2b32 <_fpadd_parts+0xde>
    2b3e:	21 50       	subi	r18, 0x01	; 1
    2b40:	30 40       	sbci	r19, 0x00	; 0
    2b42:	40 40       	sbci	r20, 0x00	; 0
    2b44:	50 40       	sbci	r21, 0x00	; 0
    2b46:	2e 21       	and	r18, r14
    2b48:	3f 21       	and	r19, r15
    2b4a:	40 23       	and	r20, r16
    2b4c:	51 23       	and	r21, r17
    2b4e:	21 15       	cp	r18, r1
    2b50:	31 05       	cpc	r19, r1
    2b52:	41 05       	cpc	r20, r1
    2b54:	51 05       	cpc	r21, r1
    2b56:	21 f0       	breq	.+8      	; 0x2b60 <_fpadd_parts+0x10c>
    2b58:	21 e0       	ldi	r18, 0x01	; 1
    2b5a:	30 e0       	ldi	r19, 0x00	; 0
    2b5c:	40 e0       	ldi	r20, 0x00	; 0
    2b5e:	50 e0       	ldi	r21, 0x00	; 0
    2b60:	79 01       	movw	r14, r18
    2b62:	8a 01       	movw	r16, r20
    2b64:	e6 28       	or	r14, r6
    2b66:	f7 28       	or	r15, r7
    2b68:	08 29       	or	r16, r8
    2b6a:	19 29       	or	r17, r9
    2b6c:	3c c0       	rjmp	.+120    	; 0x2be6 <_fpadd_parts+0x192>
    2b6e:	23 2b       	or	r18, r19
    2b70:	d1 f1       	breq	.+116    	; 0x2be6 <_fpadd_parts+0x192>
    2b72:	26 0e       	add	r2, r22
    2b74:	37 1e       	adc	r3, r23
    2b76:	35 01       	movw	r6, r10
    2b78:	46 01       	movw	r8, r12
    2b7a:	06 2e       	mov	r0, r22
    2b7c:	04 c0       	rjmp	.+8      	; 0x2b86 <_fpadd_parts+0x132>
    2b7e:	96 94       	lsr	r9
    2b80:	87 94       	ror	r8
    2b82:	77 94       	ror	r7
    2b84:	67 94       	ror	r6
    2b86:	0a 94       	dec	r0
    2b88:	d2 f7       	brpl	.-12     	; 0x2b7e <_fpadd_parts+0x12a>
    2b8a:	21 e0       	ldi	r18, 0x01	; 1
    2b8c:	30 e0       	ldi	r19, 0x00	; 0
    2b8e:	40 e0       	ldi	r20, 0x00	; 0
    2b90:	50 e0       	ldi	r21, 0x00	; 0
    2b92:	04 c0       	rjmp	.+8      	; 0x2b9c <_fpadd_parts+0x148>
    2b94:	22 0f       	add	r18, r18
    2b96:	33 1f       	adc	r19, r19
    2b98:	44 1f       	adc	r20, r20
    2b9a:	55 1f       	adc	r21, r21
    2b9c:	6a 95       	dec	r22
    2b9e:	d2 f7       	brpl	.-12     	; 0x2b94 <_fpadd_parts+0x140>
    2ba0:	21 50       	subi	r18, 0x01	; 1
    2ba2:	30 40       	sbci	r19, 0x00	; 0
    2ba4:	40 40       	sbci	r20, 0x00	; 0
    2ba6:	50 40       	sbci	r21, 0x00	; 0
    2ba8:	2a 21       	and	r18, r10
    2baa:	3b 21       	and	r19, r11
    2bac:	4c 21       	and	r20, r12
    2bae:	5d 21       	and	r21, r13
    2bb0:	21 15       	cp	r18, r1
    2bb2:	31 05       	cpc	r19, r1
    2bb4:	41 05       	cpc	r20, r1
    2bb6:	51 05       	cpc	r21, r1
    2bb8:	21 f0       	breq	.+8      	; 0x2bc2 <_fpadd_parts+0x16e>
    2bba:	21 e0       	ldi	r18, 0x01	; 1
    2bbc:	30 e0       	ldi	r19, 0x00	; 0
    2bbe:	40 e0       	ldi	r20, 0x00	; 0
    2bc0:	50 e0       	ldi	r21, 0x00	; 0
    2bc2:	59 01       	movw	r10, r18
    2bc4:	6a 01       	movw	r12, r20
    2bc6:	a6 28       	or	r10, r6
    2bc8:	b7 28       	or	r11, r7
    2bca:	c8 28       	or	r12, r8
    2bcc:	d9 28       	or	r13, r9
    2bce:	0b c0       	rjmp	.+22     	; 0x2be6 <_fpadd_parts+0x192>
    2bd0:	82 15       	cp	r24, r2
    2bd2:	93 05       	cpc	r25, r3
    2bd4:	2c f0       	brlt	.+10     	; 0x2be0 <_fpadd_parts+0x18c>
    2bd6:	1c 01       	movw	r2, r24
    2bd8:	aa 24       	eor	r10, r10
    2bda:	bb 24       	eor	r11, r11
    2bdc:	65 01       	movw	r12, r10
    2bde:	03 c0       	rjmp	.+6      	; 0x2be6 <_fpadd_parts+0x192>
    2be0:	ee 24       	eor	r14, r14
    2be2:	ff 24       	eor	r15, r15
    2be4:	87 01       	movw	r16, r14
    2be6:	11 96       	adiw	r26, 0x01	; 1
    2be8:	9c 91       	ld	r25, X
    2bea:	d2 01       	movw	r26, r4
    2bec:	11 96       	adiw	r26, 0x01	; 1
    2bee:	8c 91       	ld	r24, X
    2bf0:	98 17       	cp	r25, r24
    2bf2:	09 f4       	brne	.+2      	; 0x2bf6 <_fpadd_parts+0x1a2>
    2bf4:	45 c0       	rjmp	.+138    	; 0x2c80 <_fpadd_parts+0x22c>
    2bf6:	99 23       	and	r25, r25
    2bf8:	39 f0       	breq	.+14     	; 0x2c08 <_fpadd_parts+0x1b4>
    2bfa:	a8 01       	movw	r20, r16
    2bfc:	97 01       	movw	r18, r14
    2bfe:	2a 19       	sub	r18, r10
    2c00:	3b 09       	sbc	r19, r11
    2c02:	4c 09       	sbc	r20, r12
    2c04:	5d 09       	sbc	r21, r13
    2c06:	06 c0       	rjmp	.+12     	; 0x2c14 <_fpadd_parts+0x1c0>
    2c08:	a6 01       	movw	r20, r12
    2c0a:	95 01       	movw	r18, r10
    2c0c:	2e 19       	sub	r18, r14
    2c0e:	3f 09       	sbc	r19, r15
    2c10:	40 0b       	sbc	r20, r16
    2c12:	51 0b       	sbc	r21, r17
    2c14:	57 fd       	sbrc	r21, 7
    2c16:	08 c0       	rjmp	.+16     	; 0x2c28 <_fpadd_parts+0x1d4>
    2c18:	11 82       	std	Z+1, r1	; 0x01
    2c1a:	33 82       	std	Z+3, r3	; 0x03
    2c1c:	22 82       	std	Z+2, r2	; 0x02
    2c1e:	24 83       	std	Z+4, r18	; 0x04
    2c20:	35 83       	std	Z+5, r19	; 0x05
    2c22:	46 83       	std	Z+6, r20	; 0x06
    2c24:	57 83       	std	Z+7, r21	; 0x07
    2c26:	1d c0       	rjmp	.+58     	; 0x2c62 <_fpadd_parts+0x20e>
    2c28:	81 e0       	ldi	r24, 0x01	; 1
    2c2a:	81 83       	std	Z+1, r24	; 0x01
    2c2c:	33 82       	std	Z+3, r3	; 0x03
    2c2e:	22 82       	std	Z+2, r2	; 0x02
    2c30:	88 27       	eor	r24, r24
    2c32:	99 27       	eor	r25, r25
    2c34:	dc 01       	movw	r26, r24
    2c36:	82 1b       	sub	r24, r18
    2c38:	93 0b       	sbc	r25, r19
    2c3a:	a4 0b       	sbc	r26, r20
    2c3c:	b5 0b       	sbc	r27, r21
    2c3e:	84 83       	std	Z+4, r24	; 0x04
    2c40:	95 83       	std	Z+5, r25	; 0x05
    2c42:	a6 83       	std	Z+6, r26	; 0x06
    2c44:	b7 83       	std	Z+7, r27	; 0x07
    2c46:	0d c0       	rjmp	.+26     	; 0x2c62 <_fpadd_parts+0x20e>
    2c48:	22 0f       	add	r18, r18
    2c4a:	33 1f       	adc	r19, r19
    2c4c:	44 1f       	adc	r20, r20
    2c4e:	55 1f       	adc	r21, r21
    2c50:	24 83       	std	Z+4, r18	; 0x04
    2c52:	35 83       	std	Z+5, r19	; 0x05
    2c54:	46 83       	std	Z+6, r20	; 0x06
    2c56:	57 83       	std	Z+7, r21	; 0x07
    2c58:	82 81       	ldd	r24, Z+2	; 0x02
    2c5a:	93 81       	ldd	r25, Z+3	; 0x03
    2c5c:	01 97       	sbiw	r24, 0x01	; 1
    2c5e:	93 83       	std	Z+3, r25	; 0x03
    2c60:	82 83       	std	Z+2, r24	; 0x02
    2c62:	24 81       	ldd	r18, Z+4	; 0x04
    2c64:	35 81       	ldd	r19, Z+5	; 0x05
    2c66:	46 81       	ldd	r20, Z+6	; 0x06
    2c68:	57 81       	ldd	r21, Z+7	; 0x07
    2c6a:	da 01       	movw	r26, r20
    2c6c:	c9 01       	movw	r24, r18
    2c6e:	01 97       	sbiw	r24, 0x01	; 1
    2c70:	a1 09       	sbc	r26, r1
    2c72:	b1 09       	sbc	r27, r1
    2c74:	8f 5f       	subi	r24, 0xFF	; 255
    2c76:	9f 4f       	sbci	r25, 0xFF	; 255
    2c78:	af 4f       	sbci	r26, 0xFF	; 255
    2c7a:	bf 43       	sbci	r27, 0x3F	; 63
    2c7c:	28 f3       	brcs	.-54     	; 0x2c48 <_fpadd_parts+0x1f4>
    2c7e:	0b c0       	rjmp	.+22     	; 0x2c96 <_fpadd_parts+0x242>
    2c80:	91 83       	std	Z+1, r25	; 0x01
    2c82:	33 82       	std	Z+3, r3	; 0x03
    2c84:	22 82       	std	Z+2, r2	; 0x02
    2c86:	ea 0c       	add	r14, r10
    2c88:	fb 1c       	adc	r15, r11
    2c8a:	0c 1d       	adc	r16, r12
    2c8c:	1d 1d       	adc	r17, r13
    2c8e:	e4 82       	std	Z+4, r14	; 0x04
    2c90:	f5 82       	std	Z+5, r15	; 0x05
    2c92:	06 83       	std	Z+6, r16	; 0x06
    2c94:	17 83       	std	Z+7, r17	; 0x07
    2c96:	83 e0       	ldi	r24, 0x03	; 3
    2c98:	80 83       	st	Z, r24
    2c9a:	24 81       	ldd	r18, Z+4	; 0x04
    2c9c:	35 81       	ldd	r19, Z+5	; 0x05
    2c9e:	46 81       	ldd	r20, Z+6	; 0x06
    2ca0:	57 81       	ldd	r21, Z+7	; 0x07
    2ca2:	57 ff       	sbrs	r21, 7
    2ca4:	1a c0       	rjmp	.+52     	; 0x2cda <_fpadd_parts+0x286>
    2ca6:	c9 01       	movw	r24, r18
    2ca8:	aa 27       	eor	r26, r26
    2caa:	97 fd       	sbrc	r25, 7
    2cac:	a0 95       	com	r26
    2cae:	ba 2f       	mov	r27, r26
    2cb0:	81 70       	andi	r24, 0x01	; 1
    2cb2:	90 70       	andi	r25, 0x00	; 0
    2cb4:	a0 70       	andi	r26, 0x00	; 0
    2cb6:	b0 70       	andi	r27, 0x00	; 0
    2cb8:	56 95       	lsr	r21
    2cba:	47 95       	ror	r20
    2cbc:	37 95       	ror	r19
    2cbe:	27 95       	ror	r18
    2cc0:	82 2b       	or	r24, r18
    2cc2:	93 2b       	or	r25, r19
    2cc4:	a4 2b       	or	r26, r20
    2cc6:	b5 2b       	or	r27, r21
    2cc8:	84 83       	std	Z+4, r24	; 0x04
    2cca:	95 83       	std	Z+5, r25	; 0x05
    2ccc:	a6 83       	std	Z+6, r26	; 0x06
    2cce:	b7 83       	std	Z+7, r27	; 0x07
    2cd0:	82 81       	ldd	r24, Z+2	; 0x02
    2cd2:	93 81       	ldd	r25, Z+3	; 0x03
    2cd4:	01 96       	adiw	r24, 0x01	; 1
    2cd6:	93 83       	std	Z+3, r25	; 0x03
    2cd8:	82 83       	std	Z+2, r24	; 0x02
    2cda:	df 01       	movw	r26, r30
    2cdc:	01 c0       	rjmp	.+2      	; 0x2ce0 <_fpadd_parts+0x28c>
    2cde:	d2 01       	movw	r26, r4
    2ce0:	cd 01       	movw	r24, r26
    2ce2:	cd b7       	in	r28, 0x3d	; 61
    2ce4:	de b7       	in	r29, 0x3e	; 62
    2ce6:	e2 e1       	ldi	r30, 0x12	; 18
    2ce8:	0c 94 5a 1c 	jmp	0x38b4	; 0x38b4 <__epilogue_restores__>

00002cec <__subsf3>:
    2cec:	a0 e2       	ldi	r26, 0x20	; 32
    2cee:	b0 e0       	ldi	r27, 0x00	; 0
    2cf0:	ec e7       	ldi	r30, 0x7C	; 124
    2cf2:	f6 e1       	ldi	r31, 0x16	; 22
    2cf4:	0c 94 4a 1c 	jmp	0x3894	; 0x3894 <__prologue_saves__+0x18>
    2cf8:	69 83       	std	Y+1, r22	; 0x01
    2cfa:	7a 83       	std	Y+2, r23	; 0x02
    2cfc:	8b 83       	std	Y+3, r24	; 0x03
    2cfe:	9c 83       	std	Y+4, r25	; 0x04
    2d00:	2d 83       	std	Y+5, r18	; 0x05
    2d02:	3e 83       	std	Y+6, r19	; 0x06
    2d04:	4f 83       	std	Y+7, r20	; 0x07
    2d06:	58 87       	std	Y+8, r21	; 0x08
    2d08:	e9 e0       	ldi	r30, 0x09	; 9
    2d0a:	ee 2e       	mov	r14, r30
    2d0c:	f1 2c       	mov	r15, r1
    2d0e:	ec 0e       	add	r14, r28
    2d10:	fd 1e       	adc	r15, r29
    2d12:	ce 01       	movw	r24, r28
    2d14:	01 96       	adiw	r24, 0x01	; 1
    2d16:	b7 01       	movw	r22, r14
    2d18:	0e 94 59 1b 	call	0x36b2	; 0x36b2 <__unpack_f>
    2d1c:	8e 01       	movw	r16, r28
    2d1e:	0f 5e       	subi	r16, 0xEF	; 239
    2d20:	1f 4f       	sbci	r17, 0xFF	; 255
    2d22:	ce 01       	movw	r24, r28
    2d24:	05 96       	adiw	r24, 0x05	; 5
    2d26:	b8 01       	movw	r22, r16
    2d28:	0e 94 59 1b 	call	0x36b2	; 0x36b2 <__unpack_f>
    2d2c:	8a 89       	ldd	r24, Y+18	; 0x12
    2d2e:	91 e0       	ldi	r25, 0x01	; 1
    2d30:	89 27       	eor	r24, r25
    2d32:	8a 8b       	std	Y+18, r24	; 0x12
    2d34:	c7 01       	movw	r24, r14
    2d36:	b8 01       	movw	r22, r16
    2d38:	ae 01       	movw	r20, r28
    2d3a:	47 5e       	subi	r20, 0xE7	; 231
    2d3c:	5f 4f       	sbci	r21, 0xFF	; 255
    2d3e:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <_fpadd_parts>
    2d42:	0e 94 84 1a 	call	0x3508	; 0x3508 <__pack_f>
    2d46:	a0 96       	adiw	r28, 0x20	; 32
    2d48:	e6 e0       	ldi	r30, 0x06	; 6
    2d4a:	0c 94 66 1c 	jmp	0x38cc	; 0x38cc <__epilogue_restores__+0x18>

00002d4e <__addsf3>:
    2d4e:	a0 e2       	ldi	r26, 0x20	; 32
    2d50:	b0 e0       	ldi	r27, 0x00	; 0
    2d52:	ed ea       	ldi	r30, 0xAD	; 173
    2d54:	f6 e1       	ldi	r31, 0x16	; 22
    2d56:	0c 94 4a 1c 	jmp	0x3894	; 0x3894 <__prologue_saves__+0x18>
    2d5a:	69 83       	std	Y+1, r22	; 0x01
    2d5c:	7a 83       	std	Y+2, r23	; 0x02
    2d5e:	8b 83       	std	Y+3, r24	; 0x03
    2d60:	9c 83       	std	Y+4, r25	; 0x04
    2d62:	2d 83       	std	Y+5, r18	; 0x05
    2d64:	3e 83       	std	Y+6, r19	; 0x06
    2d66:	4f 83       	std	Y+7, r20	; 0x07
    2d68:	58 87       	std	Y+8, r21	; 0x08
    2d6a:	f9 e0       	ldi	r31, 0x09	; 9
    2d6c:	ef 2e       	mov	r14, r31
    2d6e:	f1 2c       	mov	r15, r1
    2d70:	ec 0e       	add	r14, r28
    2d72:	fd 1e       	adc	r15, r29
    2d74:	ce 01       	movw	r24, r28
    2d76:	01 96       	adiw	r24, 0x01	; 1
    2d78:	b7 01       	movw	r22, r14
    2d7a:	0e 94 59 1b 	call	0x36b2	; 0x36b2 <__unpack_f>
    2d7e:	8e 01       	movw	r16, r28
    2d80:	0f 5e       	subi	r16, 0xEF	; 239
    2d82:	1f 4f       	sbci	r17, 0xFF	; 255
    2d84:	ce 01       	movw	r24, r28
    2d86:	05 96       	adiw	r24, 0x05	; 5
    2d88:	b8 01       	movw	r22, r16
    2d8a:	0e 94 59 1b 	call	0x36b2	; 0x36b2 <__unpack_f>
    2d8e:	c7 01       	movw	r24, r14
    2d90:	b8 01       	movw	r22, r16
    2d92:	ae 01       	movw	r20, r28
    2d94:	47 5e       	subi	r20, 0xE7	; 231
    2d96:	5f 4f       	sbci	r21, 0xFF	; 255
    2d98:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <_fpadd_parts>
    2d9c:	0e 94 84 1a 	call	0x3508	; 0x3508 <__pack_f>
    2da0:	a0 96       	adiw	r28, 0x20	; 32
    2da2:	e6 e0       	ldi	r30, 0x06	; 6
    2da4:	0c 94 66 1c 	jmp	0x38cc	; 0x38cc <__epilogue_restores__+0x18>

00002da8 <__mulsf3>:
    2da8:	a0 e2       	ldi	r26, 0x20	; 32
    2daa:	b0 e0       	ldi	r27, 0x00	; 0
    2dac:	ea ed       	ldi	r30, 0xDA	; 218
    2dae:	f6 e1       	ldi	r31, 0x16	; 22
    2db0:	0c 94 3e 1c 	jmp	0x387c	; 0x387c <__prologue_saves__>
    2db4:	69 83       	std	Y+1, r22	; 0x01
    2db6:	7a 83       	std	Y+2, r23	; 0x02
    2db8:	8b 83       	std	Y+3, r24	; 0x03
    2dba:	9c 83       	std	Y+4, r25	; 0x04
    2dbc:	2d 83       	std	Y+5, r18	; 0x05
    2dbe:	3e 83       	std	Y+6, r19	; 0x06
    2dc0:	4f 83       	std	Y+7, r20	; 0x07
    2dc2:	58 87       	std	Y+8, r21	; 0x08
    2dc4:	ce 01       	movw	r24, r28
    2dc6:	01 96       	adiw	r24, 0x01	; 1
    2dc8:	be 01       	movw	r22, r28
    2dca:	67 5f       	subi	r22, 0xF7	; 247
    2dcc:	7f 4f       	sbci	r23, 0xFF	; 255
    2dce:	0e 94 59 1b 	call	0x36b2	; 0x36b2 <__unpack_f>
    2dd2:	ce 01       	movw	r24, r28
    2dd4:	05 96       	adiw	r24, 0x05	; 5
    2dd6:	be 01       	movw	r22, r28
    2dd8:	6f 5e       	subi	r22, 0xEF	; 239
    2dda:	7f 4f       	sbci	r23, 0xFF	; 255
    2ddc:	0e 94 59 1b 	call	0x36b2	; 0x36b2 <__unpack_f>
    2de0:	99 85       	ldd	r25, Y+9	; 0x09
    2de2:	92 30       	cpi	r25, 0x02	; 2
    2de4:	88 f0       	brcs	.+34     	; 0x2e08 <__mulsf3+0x60>
    2de6:	89 89       	ldd	r24, Y+17	; 0x11
    2de8:	82 30       	cpi	r24, 0x02	; 2
    2dea:	c8 f0       	brcs	.+50     	; 0x2e1e <__mulsf3+0x76>
    2dec:	94 30       	cpi	r25, 0x04	; 4
    2dee:	19 f4       	brne	.+6      	; 0x2df6 <__mulsf3+0x4e>
    2df0:	82 30       	cpi	r24, 0x02	; 2
    2df2:	51 f4       	brne	.+20     	; 0x2e08 <__mulsf3+0x60>
    2df4:	04 c0       	rjmp	.+8      	; 0x2dfe <__mulsf3+0x56>
    2df6:	84 30       	cpi	r24, 0x04	; 4
    2df8:	29 f4       	brne	.+10     	; 0x2e04 <__mulsf3+0x5c>
    2dfa:	92 30       	cpi	r25, 0x02	; 2
    2dfc:	81 f4       	brne	.+32     	; 0x2e1e <__mulsf3+0x76>
    2dfe:	80 e0       	ldi	r24, 0x00	; 0
    2e00:	92 e0       	ldi	r25, 0x02	; 2
    2e02:	c6 c0       	rjmp	.+396    	; 0x2f90 <__mulsf3+0x1e8>
    2e04:	92 30       	cpi	r25, 0x02	; 2
    2e06:	49 f4       	brne	.+18     	; 0x2e1a <__mulsf3+0x72>
    2e08:	20 e0       	ldi	r18, 0x00	; 0
    2e0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e0c:	8a 89       	ldd	r24, Y+18	; 0x12
    2e0e:	98 13       	cpse	r25, r24
    2e10:	21 e0       	ldi	r18, 0x01	; 1
    2e12:	2a 87       	std	Y+10, r18	; 0x0a
    2e14:	ce 01       	movw	r24, r28
    2e16:	09 96       	adiw	r24, 0x09	; 9
    2e18:	bb c0       	rjmp	.+374    	; 0x2f90 <__mulsf3+0x1e8>
    2e1a:	82 30       	cpi	r24, 0x02	; 2
    2e1c:	49 f4       	brne	.+18     	; 0x2e30 <__mulsf3+0x88>
    2e1e:	20 e0       	ldi	r18, 0x00	; 0
    2e20:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e22:	8a 89       	ldd	r24, Y+18	; 0x12
    2e24:	98 13       	cpse	r25, r24
    2e26:	21 e0       	ldi	r18, 0x01	; 1
    2e28:	2a 8b       	std	Y+18, r18	; 0x12
    2e2a:	ce 01       	movw	r24, r28
    2e2c:	41 96       	adiw	r24, 0x11	; 17
    2e2e:	b0 c0       	rjmp	.+352    	; 0x2f90 <__mulsf3+0x1e8>
    2e30:	2d 84       	ldd	r2, Y+13	; 0x0d
    2e32:	3e 84       	ldd	r3, Y+14	; 0x0e
    2e34:	4f 84       	ldd	r4, Y+15	; 0x0f
    2e36:	58 88       	ldd	r5, Y+16	; 0x10
    2e38:	6d 88       	ldd	r6, Y+21	; 0x15
    2e3a:	7e 88       	ldd	r7, Y+22	; 0x16
    2e3c:	8f 88       	ldd	r8, Y+23	; 0x17
    2e3e:	98 8c       	ldd	r9, Y+24	; 0x18
    2e40:	ee 24       	eor	r14, r14
    2e42:	ff 24       	eor	r15, r15
    2e44:	87 01       	movw	r16, r14
    2e46:	aa 24       	eor	r10, r10
    2e48:	bb 24       	eor	r11, r11
    2e4a:	65 01       	movw	r12, r10
    2e4c:	40 e0       	ldi	r20, 0x00	; 0
    2e4e:	50 e0       	ldi	r21, 0x00	; 0
    2e50:	60 e0       	ldi	r22, 0x00	; 0
    2e52:	70 e0       	ldi	r23, 0x00	; 0
    2e54:	e0 e0       	ldi	r30, 0x00	; 0
    2e56:	f0 e0       	ldi	r31, 0x00	; 0
    2e58:	c1 01       	movw	r24, r2
    2e5a:	81 70       	andi	r24, 0x01	; 1
    2e5c:	90 70       	andi	r25, 0x00	; 0
    2e5e:	89 2b       	or	r24, r25
    2e60:	e9 f0       	breq	.+58     	; 0x2e9c <__mulsf3+0xf4>
    2e62:	e6 0c       	add	r14, r6
    2e64:	f7 1c       	adc	r15, r7
    2e66:	08 1d       	adc	r16, r8
    2e68:	19 1d       	adc	r17, r9
    2e6a:	9a 01       	movw	r18, r20
    2e6c:	ab 01       	movw	r20, r22
    2e6e:	2a 0d       	add	r18, r10
    2e70:	3b 1d       	adc	r19, r11
    2e72:	4c 1d       	adc	r20, r12
    2e74:	5d 1d       	adc	r21, r13
    2e76:	80 e0       	ldi	r24, 0x00	; 0
    2e78:	90 e0       	ldi	r25, 0x00	; 0
    2e7a:	a0 e0       	ldi	r26, 0x00	; 0
    2e7c:	b0 e0       	ldi	r27, 0x00	; 0
    2e7e:	e6 14       	cp	r14, r6
    2e80:	f7 04       	cpc	r15, r7
    2e82:	08 05       	cpc	r16, r8
    2e84:	19 05       	cpc	r17, r9
    2e86:	20 f4       	brcc	.+8      	; 0x2e90 <__mulsf3+0xe8>
    2e88:	81 e0       	ldi	r24, 0x01	; 1
    2e8a:	90 e0       	ldi	r25, 0x00	; 0
    2e8c:	a0 e0       	ldi	r26, 0x00	; 0
    2e8e:	b0 e0       	ldi	r27, 0x00	; 0
    2e90:	ba 01       	movw	r22, r20
    2e92:	a9 01       	movw	r20, r18
    2e94:	48 0f       	add	r20, r24
    2e96:	59 1f       	adc	r21, r25
    2e98:	6a 1f       	adc	r22, r26
    2e9a:	7b 1f       	adc	r23, r27
    2e9c:	aa 0c       	add	r10, r10
    2e9e:	bb 1c       	adc	r11, r11
    2ea0:	cc 1c       	adc	r12, r12
    2ea2:	dd 1c       	adc	r13, r13
    2ea4:	97 fe       	sbrs	r9, 7
    2ea6:	08 c0       	rjmp	.+16     	; 0x2eb8 <__mulsf3+0x110>
    2ea8:	81 e0       	ldi	r24, 0x01	; 1
    2eaa:	90 e0       	ldi	r25, 0x00	; 0
    2eac:	a0 e0       	ldi	r26, 0x00	; 0
    2eae:	b0 e0       	ldi	r27, 0x00	; 0
    2eb0:	a8 2a       	or	r10, r24
    2eb2:	b9 2a       	or	r11, r25
    2eb4:	ca 2a       	or	r12, r26
    2eb6:	db 2a       	or	r13, r27
    2eb8:	31 96       	adiw	r30, 0x01	; 1
    2eba:	e0 32       	cpi	r30, 0x20	; 32
    2ebc:	f1 05       	cpc	r31, r1
    2ebe:	49 f0       	breq	.+18     	; 0x2ed2 <__mulsf3+0x12a>
    2ec0:	66 0c       	add	r6, r6
    2ec2:	77 1c       	adc	r7, r7
    2ec4:	88 1c       	adc	r8, r8
    2ec6:	99 1c       	adc	r9, r9
    2ec8:	56 94       	lsr	r5
    2eca:	47 94       	ror	r4
    2ecc:	37 94       	ror	r3
    2ece:	27 94       	ror	r2
    2ed0:	c3 cf       	rjmp	.-122    	; 0x2e58 <__mulsf3+0xb0>
    2ed2:	fa 85       	ldd	r31, Y+10	; 0x0a
    2ed4:	ea 89       	ldd	r30, Y+18	; 0x12
    2ed6:	2b 89       	ldd	r18, Y+19	; 0x13
    2ed8:	3c 89       	ldd	r19, Y+20	; 0x14
    2eda:	8b 85       	ldd	r24, Y+11	; 0x0b
    2edc:	9c 85       	ldd	r25, Y+12	; 0x0c
    2ede:	28 0f       	add	r18, r24
    2ee0:	39 1f       	adc	r19, r25
    2ee2:	2e 5f       	subi	r18, 0xFE	; 254
    2ee4:	3f 4f       	sbci	r19, 0xFF	; 255
    2ee6:	17 c0       	rjmp	.+46     	; 0x2f16 <__mulsf3+0x16e>
    2ee8:	ca 01       	movw	r24, r20
    2eea:	81 70       	andi	r24, 0x01	; 1
    2eec:	90 70       	andi	r25, 0x00	; 0
    2eee:	89 2b       	or	r24, r25
    2ef0:	61 f0       	breq	.+24     	; 0x2f0a <__mulsf3+0x162>
    2ef2:	16 95       	lsr	r17
    2ef4:	07 95       	ror	r16
    2ef6:	f7 94       	ror	r15
    2ef8:	e7 94       	ror	r14
    2efa:	80 e0       	ldi	r24, 0x00	; 0
    2efc:	90 e0       	ldi	r25, 0x00	; 0
    2efe:	a0 e0       	ldi	r26, 0x00	; 0
    2f00:	b0 e8       	ldi	r27, 0x80	; 128
    2f02:	e8 2a       	or	r14, r24
    2f04:	f9 2a       	or	r15, r25
    2f06:	0a 2b       	or	r16, r26
    2f08:	1b 2b       	or	r17, r27
    2f0a:	76 95       	lsr	r23
    2f0c:	67 95       	ror	r22
    2f0e:	57 95       	ror	r21
    2f10:	47 95       	ror	r20
    2f12:	2f 5f       	subi	r18, 0xFF	; 255
    2f14:	3f 4f       	sbci	r19, 0xFF	; 255
    2f16:	77 fd       	sbrc	r23, 7
    2f18:	e7 cf       	rjmp	.-50     	; 0x2ee8 <__mulsf3+0x140>
    2f1a:	0c c0       	rjmp	.+24     	; 0x2f34 <__mulsf3+0x18c>
    2f1c:	44 0f       	add	r20, r20
    2f1e:	55 1f       	adc	r21, r21
    2f20:	66 1f       	adc	r22, r22
    2f22:	77 1f       	adc	r23, r23
    2f24:	17 fd       	sbrc	r17, 7
    2f26:	41 60       	ori	r20, 0x01	; 1
    2f28:	ee 0c       	add	r14, r14
    2f2a:	ff 1c       	adc	r15, r15
    2f2c:	00 1f       	adc	r16, r16
    2f2e:	11 1f       	adc	r17, r17
    2f30:	21 50       	subi	r18, 0x01	; 1
    2f32:	30 40       	sbci	r19, 0x00	; 0
    2f34:	40 30       	cpi	r20, 0x00	; 0
    2f36:	90 e0       	ldi	r25, 0x00	; 0
    2f38:	59 07       	cpc	r21, r25
    2f3a:	90 e0       	ldi	r25, 0x00	; 0
    2f3c:	69 07       	cpc	r22, r25
    2f3e:	90 e4       	ldi	r25, 0x40	; 64
    2f40:	79 07       	cpc	r23, r25
    2f42:	60 f3       	brcs	.-40     	; 0x2f1c <__mulsf3+0x174>
    2f44:	2b 8f       	std	Y+27, r18	; 0x1b
    2f46:	3c 8f       	std	Y+28, r19	; 0x1c
    2f48:	db 01       	movw	r26, r22
    2f4a:	ca 01       	movw	r24, r20
    2f4c:	8f 77       	andi	r24, 0x7F	; 127
    2f4e:	90 70       	andi	r25, 0x00	; 0
    2f50:	a0 70       	andi	r26, 0x00	; 0
    2f52:	b0 70       	andi	r27, 0x00	; 0
    2f54:	80 34       	cpi	r24, 0x40	; 64
    2f56:	91 05       	cpc	r25, r1
    2f58:	a1 05       	cpc	r26, r1
    2f5a:	b1 05       	cpc	r27, r1
    2f5c:	61 f4       	brne	.+24     	; 0x2f76 <__mulsf3+0x1ce>
    2f5e:	47 fd       	sbrc	r20, 7
    2f60:	0a c0       	rjmp	.+20     	; 0x2f76 <__mulsf3+0x1ce>
    2f62:	e1 14       	cp	r14, r1
    2f64:	f1 04       	cpc	r15, r1
    2f66:	01 05       	cpc	r16, r1
    2f68:	11 05       	cpc	r17, r1
    2f6a:	29 f0       	breq	.+10     	; 0x2f76 <__mulsf3+0x1ce>
    2f6c:	40 5c       	subi	r20, 0xC0	; 192
    2f6e:	5f 4f       	sbci	r21, 0xFF	; 255
    2f70:	6f 4f       	sbci	r22, 0xFF	; 255
    2f72:	7f 4f       	sbci	r23, 0xFF	; 255
    2f74:	40 78       	andi	r20, 0x80	; 128
    2f76:	1a 8e       	std	Y+26, r1	; 0x1a
    2f78:	fe 17       	cp	r31, r30
    2f7a:	11 f0       	breq	.+4      	; 0x2f80 <__mulsf3+0x1d8>
    2f7c:	81 e0       	ldi	r24, 0x01	; 1
    2f7e:	8a 8f       	std	Y+26, r24	; 0x1a
    2f80:	4d 8f       	std	Y+29, r20	; 0x1d
    2f82:	5e 8f       	std	Y+30, r21	; 0x1e
    2f84:	6f 8f       	std	Y+31, r22	; 0x1f
    2f86:	78 a3       	std	Y+32, r23	; 0x20
    2f88:	83 e0       	ldi	r24, 0x03	; 3
    2f8a:	89 8f       	std	Y+25, r24	; 0x19
    2f8c:	ce 01       	movw	r24, r28
    2f8e:	49 96       	adiw	r24, 0x19	; 25
    2f90:	0e 94 84 1a 	call	0x3508	; 0x3508 <__pack_f>
    2f94:	a0 96       	adiw	r28, 0x20	; 32
    2f96:	e2 e1       	ldi	r30, 0x12	; 18
    2f98:	0c 94 5a 1c 	jmp	0x38b4	; 0x38b4 <__epilogue_restores__>

00002f9c <__divsf3>:
    2f9c:	a8 e1       	ldi	r26, 0x18	; 24
    2f9e:	b0 e0       	ldi	r27, 0x00	; 0
    2fa0:	e4 ed       	ldi	r30, 0xD4	; 212
    2fa2:	f7 e1       	ldi	r31, 0x17	; 23
    2fa4:	0c 94 46 1c 	jmp	0x388c	; 0x388c <__prologue_saves__+0x10>
    2fa8:	69 83       	std	Y+1, r22	; 0x01
    2faa:	7a 83       	std	Y+2, r23	; 0x02
    2fac:	8b 83       	std	Y+3, r24	; 0x03
    2fae:	9c 83       	std	Y+4, r25	; 0x04
    2fb0:	2d 83       	std	Y+5, r18	; 0x05
    2fb2:	3e 83       	std	Y+6, r19	; 0x06
    2fb4:	4f 83       	std	Y+7, r20	; 0x07
    2fb6:	58 87       	std	Y+8, r21	; 0x08
    2fb8:	b9 e0       	ldi	r27, 0x09	; 9
    2fba:	eb 2e       	mov	r14, r27
    2fbc:	f1 2c       	mov	r15, r1
    2fbe:	ec 0e       	add	r14, r28
    2fc0:	fd 1e       	adc	r15, r29
    2fc2:	ce 01       	movw	r24, r28
    2fc4:	01 96       	adiw	r24, 0x01	; 1
    2fc6:	b7 01       	movw	r22, r14
    2fc8:	0e 94 59 1b 	call	0x36b2	; 0x36b2 <__unpack_f>
    2fcc:	8e 01       	movw	r16, r28
    2fce:	0f 5e       	subi	r16, 0xEF	; 239
    2fd0:	1f 4f       	sbci	r17, 0xFF	; 255
    2fd2:	ce 01       	movw	r24, r28
    2fd4:	05 96       	adiw	r24, 0x05	; 5
    2fd6:	b8 01       	movw	r22, r16
    2fd8:	0e 94 59 1b 	call	0x36b2	; 0x36b2 <__unpack_f>
    2fdc:	29 85       	ldd	r18, Y+9	; 0x09
    2fde:	22 30       	cpi	r18, 0x02	; 2
    2fe0:	08 f4       	brcc	.+2      	; 0x2fe4 <__divsf3+0x48>
    2fe2:	7e c0       	rjmp	.+252    	; 0x30e0 <__divsf3+0x144>
    2fe4:	39 89       	ldd	r19, Y+17	; 0x11
    2fe6:	32 30       	cpi	r19, 0x02	; 2
    2fe8:	10 f4       	brcc	.+4      	; 0x2fee <__divsf3+0x52>
    2fea:	b8 01       	movw	r22, r16
    2fec:	7c c0       	rjmp	.+248    	; 0x30e6 <__divsf3+0x14a>
    2fee:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ff0:	9a 89       	ldd	r25, Y+18	; 0x12
    2ff2:	89 27       	eor	r24, r25
    2ff4:	8a 87       	std	Y+10, r24	; 0x0a
    2ff6:	24 30       	cpi	r18, 0x04	; 4
    2ff8:	11 f0       	breq	.+4      	; 0x2ffe <__divsf3+0x62>
    2ffa:	22 30       	cpi	r18, 0x02	; 2
    2ffc:	31 f4       	brne	.+12     	; 0x300a <__divsf3+0x6e>
    2ffe:	23 17       	cp	r18, r19
    3000:	09 f0       	breq	.+2      	; 0x3004 <__divsf3+0x68>
    3002:	6e c0       	rjmp	.+220    	; 0x30e0 <__divsf3+0x144>
    3004:	60 e0       	ldi	r22, 0x00	; 0
    3006:	72 e0       	ldi	r23, 0x02	; 2
    3008:	6e c0       	rjmp	.+220    	; 0x30e6 <__divsf3+0x14a>
    300a:	34 30       	cpi	r19, 0x04	; 4
    300c:	39 f4       	brne	.+14     	; 0x301c <__divsf3+0x80>
    300e:	1d 86       	std	Y+13, r1	; 0x0d
    3010:	1e 86       	std	Y+14, r1	; 0x0e
    3012:	1f 86       	std	Y+15, r1	; 0x0f
    3014:	18 8a       	std	Y+16, r1	; 0x10
    3016:	1c 86       	std	Y+12, r1	; 0x0c
    3018:	1b 86       	std	Y+11, r1	; 0x0b
    301a:	04 c0       	rjmp	.+8      	; 0x3024 <__divsf3+0x88>
    301c:	32 30       	cpi	r19, 0x02	; 2
    301e:	21 f4       	brne	.+8      	; 0x3028 <__divsf3+0x8c>
    3020:	84 e0       	ldi	r24, 0x04	; 4
    3022:	89 87       	std	Y+9, r24	; 0x09
    3024:	b7 01       	movw	r22, r14
    3026:	5f c0       	rjmp	.+190    	; 0x30e6 <__divsf3+0x14a>
    3028:	2b 85       	ldd	r18, Y+11	; 0x0b
    302a:	3c 85       	ldd	r19, Y+12	; 0x0c
    302c:	8b 89       	ldd	r24, Y+19	; 0x13
    302e:	9c 89       	ldd	r25, Y+20	; 0x14
    3030:	28 1b       	sub	r18, r24
    3032:	39 0b       	sbc	r19, r25
    3034:	3c 87       	std	Y+12, r19	; 0x0c
    3036:	2b 87       	std	Y+11, r18	; 0x0b
    3038:	ed 84       	ldd	r14, Y+13	; 0x0d
    303a:	fe 84       	ldd	r15, Y+14	; 0x0e
    303c:	0f 85       	ldd	r16, Y+15	; 0x0f
    303e:	18 89       	ldd	r17, Y+16	; 0x10
    3040:	ad 88       	ldd	r10, Y+21	; 0x15
    3042:	be 88       	ldd	r11, Y+22	; 0x16
    3044:	cf 88       	ldd	r12, Y+23	; 0x17
    3046:	d8 8c       	ldd	r13, Y+24	; 0x18
    3048:	ea 14       	cp	r14, r10
    304a:	fb 04       	cpc	r15, r11
    304c:	0c 05       	cpc	r16, r12
    304e:	1d 05       	cpc	r17, r13
    3050:	40 f4       	brcc	.+16     	; 0x3062 <__divsf3+0xc6>
    3052:	ee 0c       	add	r14, r14
    3054:	ff 1c       	adc	r15, r15
    3056:	00 1f       	adc	r16, r16
    3058:	11 1f       	adc	r17, r17
    305a:	21 50       	subi	r18, 0x01	; 1
    305c:	30 40       	sbci	r19, 0x00	; 0
    305e:	3c 87       	std	Y+12, r19	; 0x0c
    3060:	2b 87       	std	Y+11, r18	; 0x0b
    3062:	20 e0       	ldi	r18, 0x00	; 0
    3064:	30 e0       	ldi	r19, 0x00	; 0
    3066:	40 e0       	ldi	r20, 0x00	; 0
    3068:	50 e0       	ldi	r21, 0x00	; 0
    306a:	80 e0       	ldi	r24, 0x00	; 0
    306c:	90 e0       	ldi	r25, 0x00	; 0
    306e:	a0 e0       	ldi	r26, 0x00	; 0
    3070:	b0 e4       	ldi	r27, 0x40	; 64
    3072:	60 e0       	ldi	r22, 0x00	; 0
    3074:	70 e0       	ldi	r23, 0x00	; 0
    3076:	ea 14       	cp	r14, r10
    3078:	fb 04       	cpc	r15, r11
    307a:	0c 05       	cpc	r16, r12
    307c:	1d 05       	cpc	r17, r13
    307e:	40 f0       	brcs	.+16     	; 0x3090 <__divsf3+0xf4>
    3080:	28 2b       	or	r18, r24
    3082:	39 2b       	or	r19, r25
    3084:	4a 2b       	or	r20, r26
    3086:	5b 2b       	or	r21, r27
    3088:	ea 18       	sub	r14, r10
    308a:	fb 08       	sbc	r15, r11
    308c:	0c 09       	sbc	r16, r12
    308e:	1d 09       	sbc	r17, r13
    3090:	b6 95       	lsr	r27
    3092:	a7 95       	ror	r26
    3094:	97 95       	ror	r25
    3096:	87 95       	ror	r24
    3098:	ee 0c       	add	r14, r14
    309a:	ff 1c       	adc	r15, r15
    309c:	00 1f       	adc	r16, r16
    309e:	11 1f       	adc	r17, r17
    30a0:	6f 5f       	subi	r22, 0xFF	; 255
    30a2:	7f 4f       	sbci	r23, 0xFF	; 255
    30a4:	6f 31       	cpi	r22, 0x1F	; 31
    30a6:	71 05       	cpc	r23, r1
    30a8:	31 f7       	brne	.-52     	; 0x3076 <__divsf3+0xda>
    30aa:	da 01       	movw	r26, r20
    30ac:	c9 01       	movw	r24, r18
    30ae:	8f 77       	andi	r24, 0x7F	; 127
    30b0:	90 70       	andi	r25, 0x00	; 0
    30b2:	a0 70       	andi	r26, 0x00	; 0
    30b4:	b0 70       	andi	r27, 0x00	; 0
    30b6:	80 34       	cpi	r24, 0x40	; 64
    30b8:	91 05       	cpc	r25, r1
    30ba:	a1 05       	cpc	r26, r1
    30bc:	b1 05       	cpc	r27, r1
    30be:	61 f4       	brne	.+24     	; 0x30d8 <__divsf3+0x13c>
    30c0:	27 fd       	sbrc	r18, 7
    30c2:	0a c0       	rjmp	.+20     	; 0x30d8 <__divsf3+0x13c>
    30c4:	e1 14       	cp	r14, r1
    30c6:	f1 04       	cpc	r15, r1
    30c8:	01 05       	cpc	r16, r1
    30ca:	11 05       	cpc	r17, r1
    30cc:	29 f0       	breq	.+10     	; 0x30d8 <__divsf3+0x13c>
    30ce:	20 5c       	subi	r18, 0xC0	; 192
    30d0:	3f 4f       	sbci	r19, 0xFF	; 255
    30d2:	4f 4f       	sbci	r20, 0xFF	; 255
    30d4:	5f 4f       	sbci	r21, 0xFF	; 255
    30d6:	20 78       	andi	r18, 0x80	; 128
    30d8:	2d 87       	std	Y+13, r18	; 0x0d
    30da:	3e 87       	std	Y+14, r19	; 0x0e
    30dc:	4f 87       	std	Y+15, r20	; 0x0f
    30de:	58 8b       	std	Y+16, r21	; 0x10
    30e0:	be 01       	movw	r22, r28
    30e2:	67 5f       	subi	r22, 0xF7	; 247
    30e4:	7f 4f       	sbci	r23, 0xFF	; 255
    30e6:	cb 01       	movw	r24, r22
    30e8:	0e 94 84 1a 	call	0x3508	; 0x3508 <__pack_f>
    30ec:	68 96       	adiw	r28, 0x18	; 24
    30ee:	ea e0       	ldi	r30, 0x0A	; 10
    30f0:	0c 94 62 1c 	jmp	0x38c4	; 0x38c4 <__epilogue_restores__+0x10>

000030f4 <__gtsf2>:
    30f4:	a8 e1       	ldi	r26, 0x18	; 24
    30f6:	b0 e0       	ldi	r27, 0x00	; 0
    30f8:	e0 e8       	ldi	r30, 0x80	; 128
    30fa:	f8 e1       	ldi	r31, 0x18	; 24
    30fc:	0c 94 4a 1c 	jmp	0x3894	; 0x3894 <__prologue_saves__+0x18>
    3100:	69 83       	std	Y+1, r22	; 0x01
    3102:	7a 83       	std	Y+2, r23	; 0x02
    3104:	8b 83       	std	Y+3, r24	; 0x03
    3106:	9c 83       	std	Y+4, r25	; 0x04
    3108:	2d 83       	std	Y+5, r18	; 0x05
    310a:	3e 83       	std	Y+6, r19	; 0x06
    310c:	4f 83       	std	Y+7, r20	; 0x07
    310e:	58 87       	std	Y+8, r21	; 0x08
    3110:	89 e0       	ldi	r24, 0x09	; 9
    3112:	e8 2e       	mov	r14, r24
    3114:	f1 2c       	mov	r15, r1
    3116:	ec 0e       	add	r14, r28
    3118:	fd 1e       	adc	r15, r29
    311a:	ce 01       	movw	r24, r28
    311c:	01 96       	adiw	r24, 0x01	; 1
    311e:	b7 01       	movw	r22, r14
    3120:	0e 94 59 1b 	call	0x36b2	; 0x36b2 <__unpack_f>
    3124:	8e 01       	movw	r16, r28
    3126:	0f 5e       	subi	r16, 0xEF	; 239
    3128:	1f 4f       	sbci	r17, 0xFF	; 255
    312a:	ce 01       	movw	r24, r28
    312c:	05 96       	adiw	r24, 0x05	; 5
    312e:	b8 01       	movw	r22, r16
    3130:	0e 94 59 1b 	call	0x36b2	; 0x36b2 <__unpack_f>
    3134:	89 85       	ldd	r24, Y+9	; 0x09
    3136:	82 30       	cpi	r24, 0x02	; 2
    3138:	40 f0       	brcs	.+16     	; 0x314a <__gtsf2+0x56>
    313a:	89 89       	ldd	r24, Y+17	; 0x11
    313c:	82 30       	cpi	r24, 0x02	; 2
    313e:	28 f0       	brcs	.+10     	; 0x314a <__gtsf2+0x56>
    3140:	c7 01       	movw	r24, r14
    3142:	b8 01       	movw	r22, r16
    3144:	0e 94 d1 1b 	call	0x37a2	; 0x37a2 <__fpcmp_parts_f>
    3148:	01 c0       	rjmp	.+2      	; 0x314c <__gtsf2+0x58>
    314a:	8f ef       	ldi	r24, 0xFF	; 255
    314c:	68 96       	adiw	r28, 0x18	; 24
    314e:	e6 e0       	ldi	r30, 0x06	; 6
    3150:	0c 94 66 1c 	jmp	0x38cc	; 0x38cc <__epilogue_restores__+0x18>

00003154 <__gesf2>:
    3154:	a8 e1       	ldi	r26, 0x18	; 24
    3156:	b0 e0       	ldi	r27, 0x00	; 0
    3158:	e0 eb       	ldi	r30, 0xB0	; 176
    315a:	f8 e1       	ldi	r31, 0x18	; 24
    315c:	0c 94 4a 1c 	jmp	0x3894	; 0x3894 <__prologue_saves__+0x18>
    3160:	69 83       	std	Y+1, r22	; 0x01
    3162:	7a 83       	std	Y+2, r23	; 0x02
    3164:	8b 83       	std	Y+3, r24	; 0x03
    3166:	9c 83       	std	Y+4, r25	; 0x04
    3168:	2d 83       	std	Y+5, r18	; 0x05
    316a:	3e 83       	std	Y+6, r19	; 0x06
    316c:	4f 83       	std	Y+7, r20	; 0x07
    316e:	58 87       	std	Y+8, r21	; 0x08
    3170:	89 e0       	ldi	r24, 0x09	; 9
    3172:	e8 2e       	mov	r14, r24
    3174:	f1 2c       	mov	r15, r1
    3176:	ec 0e       	add	r14, r28
    3178:	fd 1e       	adc	r15, r29
    317a:	ce 01       	movw	r24, r28
    317c:	01 96       	adiw	r24, 0x01	; 1
    317e:	b7 01       	movw	r22, r14
    3180:	0e 94 59 1b 	call	0x36b2	; 0x36b2 <__unpack_f>
    3184:	8e 01       	movw	r16, r28
    3186:	0f 5e       	subi	r16, 0xEF	; 239
    3188:	1f 4f       	sbci	r17, 0xFF	; 255
    318a:	ce 01       	movw	r24, r28
    318c:	05 96       	adiw	r24, 0x05	; 5
    318e:	b8 01       	movw	r22, r16
    3190:	0e 94 59 1b 	call	0x36b2	; 0x36b2 <__unpack_f>
    3194:	89 85       	ldd	r24, Y+9	; 0x09
    3196:	82 30       	cpi	r24, 0x02	; 2
    3198:	40 f0       	brcs	.+16     	; 0x31aa <__gesf2+0x56>
    319a:	89 89       	ldd	r24, Y+17	; 0x11
    319c:	82 30       	cpi	r24, 0x02	; 2
    319e:	28 f0       	brcs	.+10     	; 0x31aa <__gesf2+0x56>
    31a0:	c7 01       	movw	r24, r14
    31a2:	b8 01       	movw	r22, r16
    31a4:	0e 94 d1 1b 	call	0x37a2	; 0x37a2 <__fpcmp_parts_f>
    31a8:	01 c0       	rjmp	.+2      	; 0x31ac <__gesf2+0x58>
    31aa:	8f ef       	ldi	r24, 0xFF	; 255
    31ac:	68 96       	adiw	r28, 0x18	; 24
    31ae:	e6 e0       	ldi	r30, 0x06	; 6
    31b0:	0c 94 66 1c 	jmp	0x38cc	; 0x38cc <__epilogue_restores__+0x18>

000031b4 <__ltsf2>:
    31b4:	a8 e1       	ldi	r26, 0x18	; 24
    31b6:	b0 e0       	ldi	r27, 0x00	; 0
    31b8:	e0 ee       	ldi	r30, 0xE0	; 224
    31ba:	f8 e1       	ldi	r31, 0x18	; 24
    31bc:	0c 94 4a 1c 	jmp	0x3894	; 0x3894 <__prologue_saves__+0x18>
    31c0:	69 83       	std	Y+1, r22	; 0x01
    31c2:	7a 83       	std	Y+2, r23	; 0x02
    31c4:	8b 83       	std	Y+3, r24	; 0x03
    31c6:	9c 83       	std	Y+4, r25	; 0x04
    31c8:	2d 83       	std	Y+5, r18	; 0x05
    31ca:	3e 83       	std	Y+6, r19	; 0x06
    31cc:	4f 83       	std	Y+7, r20	; 0x07
    31ce:	58 87       	std	Y+8, r21	; 0x08
    31d0:	89 e0       	ldi	r24, 0x09	; 9
    31d2:	e8 2e       	mov	r14, r24
    31d4:	f1 2c       	mov	r15, r1
    31d6:	ec 0e       	add	r14, r28
    31d8:	fd 1e       	adc	r15, r29
    31da:	ce 01       	movw	r24, r28
    31dc:	01 96       	adiw	r24, 0x01	; 1
    31de:	b7 01       	movw	r22, r14
    31e0:	0e 94 59 1b 	call	0x36b2	; 0x36b2 <__unpack_f>
    31e4:	8e 01       	movw	r16, r28
    31e6:	0f 5e       	subi	r16, 0xEF	; 239
    31e8:	1f 4f       	sbci	r17, 0xFF	; 255
    31ea:	ce 01       	movw	r24, r28
    31ec:	05 96       	adiw	r24, 0x05	; 5
    31ee:	b8 01       	movw	r22, r16
    31f0:	0e 94 59 1b 	call	0x36b2	; 0x36b2 <__unpack_f>
    31f4:	89 85       	ldd	r24, Y+9	; 0x09
    31f6:	82 30       	cpi	r24, 0x02	; 2
    31f8:	40 f0       	brcs	.+16     	; 0x320a <__ltsf2+0x56>
    31fa:	89 89       	ldd	r24, Y+17	; 0x11
    31fc:	82 30       	cpi	r24, 0x02	; 2
    31fe:	28 f0       	brcs	.+10     	; 0x320a <__ltsf2+0x56>
    3200:	c7 01       	movw	r24, r14
    3202:	b8 01       	movw	r22, r16
    3204:	0e 94 d1 1b 	call	0x37a2	; 0x37a2 <__fpcmp_parts_f>
    3208:	01 c0       	rjmp	.+2      	; 0x320c <__ltsf2+0x58>
    320a:	81 e0       	ldi	r24, 0x01	; 1
    320c:	68 96       	adiw	r28, 0x18	; 24
    320e:	e6 e0       	ldi	r30, 0x06	; 6
    3210:	0c 94 66 1c 	jmp	0x38cc	; 0x38cc <__epilogue_restores__+0x18>

00003214 <__floatsisf>:
    3214:	a8 e0       	ldi	r26, 0x08	; 8
    3216:	b0 e0       	ldi	r27, 0x00	; 0
    3218:	e0 e1       	ldi	r30, 0x10	; 16
    321a:	f9 e1       	ldi	r31, 0x19	; 25
    321c:	0c 94 47 1c 	jmp	0x388e	; 0x388e <__prologue_saves__+0x12>
    3220:	9b 01       	movw	r18, r22
    3222:	ac 01       	movw	r20, r24
    3224:	83 e0       	ldi	r24, 0x03	; 3
    3226:	89 83       	std	Y+1, r24	; 0x01
    3228:	da 01       	movw	r26, r20
    322a:	c9 01       	movw	r24, r18
    322c:	88 27       	eor	r24, r24
    322e:	b7 fd       	sbrc	r27, 7
    3230:	83 95       	inc	r24
    3232:	99 27       	eor	r25, r25
    3234:	aa 27       	eor	r26, r26
    3236:	bb 27       	eor	r27, r27
    3238:	b8 2e       	mov	r11, r24
    323a:	21 15       	cp	r18, r1
    323c:	31 05       	cpc	r19, r1
    323e:	41 05       	cpc	r20, r1
    3240:	51 05       	cpc	r21, r1
    3242:	19 f4       	brne	.+6      	; 0x324a <__floatsisf+0x36>
    3244:	82 e0       	ldi	r24, 0x02	; 2
    3246:	89 83       	std	Y+1, r24	; 0x01
    3248:	3a c0       	rjmp	.+116    	; 0x32be <__floatsisf+0xaa>
    324a:	88 23       	and	r24, r24
    324c:	a9 f0       	breq	.+42     	; 0x3278 <__floatsisf+0x64>
    324e:	20 30       	cpi	r18, 0x00	; 0
    3250:	80 e0       	ldi	r24, 0x00	; 0
    3252:	38 07       	cpc	r19, r24
    3254:	80 e0       	ldi	r24, 0x00	; 0
    3256:	48 07       	cpc	r20, r24
    3258:	80 e8       	ldi	r24, 0x80	; 128
    325a:	58 07       	cpc	r21, r24
    325c:	29 f4       	brne	.+10     	; 0x3268 <__floatsisf+0x54>
    325e:	60 e0       	ldi	r22, 0x00	; 0
    3260:	70 e0       	ldi	r23, 0x00	; 0
    3262:	80 e0       	ldi	r24, 0x00	; 0
    3264:	9f ec       	ldi	r25, 0xCF	; 207
    3266:	30 c0       	rjmp	.+96     	; 0x32c8 <__floatsisf+0xb4>
    3268:	ee 24       	eor	r14, r14
    326a:	ff 24       	eor	r15, r15
    326c:	87 01       	movw	r16, r14
    326e:	e2 1a       	sub	r14, r18
    3270:	f3 0a       	sbc	r15, r19
    3272:	04 0b       	sbc	r16, r20
    3274:	15 0b       	sbc	r17, r21
    3276:	02 c0       	rjmp	.+4      	; 0x327c <__floatsisf+0x68>
    3278:	79 01       	movw	r14, r18
    327a:	8a 01       	movw	r16, r20
    327c:	8e e1       	ldi	r24, 0x1E	; 30
    327e:	c8 2e       	mov	r12, r24
    3280:	d1 2c       	mov	r13, r1
    3282:	dc 82       	std	Y+4, r13	; 0x04
    3284:	cb 82       	std	Y+3, r12	; 0x03
    3286:	ed 82       	std	Y+5, r14	; 0x05
    3288:	fe 82       	std	Y+6, r15	; 0x06
    328a:	0f 83       	std	Y+7, r16	; 0x07
    328c:	18 87       	std	Y+8, r17	; 0x08
    328e:	c8 01       	movw	r24, r16
    3290:	b7 01       	movw	r22, r14
    3292:	0e 94 35 1a 	call	0x346a	; 0x346a <__clzsi2>
    3296:	01 97       	sbiw	r24, 0x01	; 1
    3298:	18 16       	cp	r1, r24
    329a:	19 06       	cpc	r1, r25
    329c:	84 f4       	brge	.+32     	; 0x32be <__floatsisf+0xaa>
    329e:	08 2e       	mov	r0, r24
    32a0:	04 c0       	rjmp	.+8      	; 0x32aa <__floatsisf+0x96>
    32a2:	ee 0c       	add	r14, r14
    32a4:	ff 1c       	adc	r15, r15
    32a6:	00 1f       	adc	r16, r16
    32a8:	11 1f       	adc	r17, r17
    32aa:	0a 94       	dec	r0
    32ac:	d2 f7       	brpl	.-12     	; 0x32a2 <__floatsisf+0x8e>
    32ae:	ed 82       	std	Y+5, r14	; 0x05
    32b0:	fe 82       	std	Y+6, r15	; 0x06
    32b2:	0f 83       	std	Y+7, r16	; 0x07
    32b4:	18 87       	std	Y+8, r17	; 0x08
    32b6:	c8 1a       	sub	r12, r24
    32b8:	d9 0a       	sbc	r13, r25
    32ba:	dc 82       	std	Y+4, r13	; 0x04
    32bc:	cb 82       	std	Y+3, r12	; 0x03
    32be:	ba 82       	std	Y+2, r11	; 0x02
    32c0:	ce 01       	movw	r24, r28
    32c2:	01 96       	adiw	r24, 0x01	; 1
    32c4:	0e 94 84 1a 	call	0x3508	; 0x3508 <__pack_f>
    32c8:	28 96       	adiw	r28, 0x08	; 8
    32ca:	e9 e0       	ldi	r30, 0x09	; 9
    32cc:	0c 94 63 1c 	jmp	0x38c6	; 0x38c6 <__epilogue_restores__+0x12>

000032d0 <__fixsfsi>:
    32d0:	ac e0       	ldi	r26, 0x0C	; 12
    32d2:	b0 e0       	ldi	r27, 0x00	; 0
    32d4:	ee e6       	ldi	r30, 0x6E	; 110
    32d6:	f9 e1       	ldi	r31, 0x19	; 25
    32d8:	0c 94 4e 1c 	jmp	0x389c	; 0x389c <__prologue_saves__+0x20>
    32dc:	69 83       	std	Y+1, r22	; 0x01
    32de:	7a 83       	std	Y+2, r23	; 0x02
    32e0:	8b 83       	std	Y+3, r24	; 0x03
    32e2:	9c 83       	std	Y+4, r25	; 0x04
    32e4:	ce 01       	movw	r24, r28
    32e6:	01 96       	adiw	r24, 0x01	; 1
    32e8:	be 01       	movw	r22, r28
    32ea:	6b 5f       	subi	r22, 0xFB	; 251
    32ec:	7f 4f       	sbci	r23, 0xFF	; 255
    32ee:	0e 94 59 1b 	call	0x36b2	; 0x36b2 <__unpack_f>
    32f2:	8d 81       	ldd	r24, Y+5	; 0x05
    32f4:	82 30       	cpi	r24, 0x02	; 2
    32f6:	61 f1       	breq	.+88     	; 0x3350 <__fixsfsi+0x80>
    32f8:	82 30       	cpi	r24, 0x02	; 2
    32fa:	50 f1       	brcs	.+84     	; 0x3350 <__fixsfsi+0x80>
    32fc:	84 30       	cpi	r24, 0x04	; 4
    32fe:	21 f4       	brne	.+8      	; 0x3308 <__fixsfsi+0x38>
    3300:	8e 81       	ldd	r24, Y+6	; 0x06
    3302:	88 23       	and	r24, r24
    3304:	51 f1       	breq	.+84     	; 0x335a <__fixsfsi+0x8a>
    3306:	2e c0       	rjmp	.+92     	; 0x3364 <__fixsfsi+0x94>
    3308:	2f 81       	ldd	r18, Y+7	; 0x07
    330a:	38 85       	ldd	r19, Y+8	; 0x08
    330c:	37 fd       	sbrc	r19, 7
    330e:	20 c0       	rjmp	.+64     	; 0x3350 <__fixsfsi+0x80>
    3310:	6e 81       	ldd	r22, Y+6	; 0x06
    3312:	2f 31       	cpi	r18, 0x1F	; 31
    3314:	31 05       	cpc	r19, r1
    3316:	1c f0       	brlt	.+6      	; 0x331e <__fixsfsi+0x4e>
    3318:	66 23       	and	r22, r22
    331a:	f9 f0       	breq	.+62     	; 0x335a <__fixsfsi+0x8a>
    331c:	23 c0       	rjmp	.+70     	; 0x3364 <__fixsfsi+0x94>
    331e:	8e e1       	ldi	r24, 0x1E	; 30
    3320:	90 e0       	ldi	r25, 0x00	; 0
    3322:	82 1b       	sub	r24, r18
    3324:	93 0b       	sbc	r25, r19
    3326:	29 85       	ldd	r18, Y+9	; 0x09
    3328:	3a 85       	ldd	r19, Y+10	; 0x0a
    332a:	4b 85       	ldd	r20, Y+11	; 0x0b
    332c:	5c 85       	ldd	r21, Y+12	; 0x0c
    332e:	04 c0       	rjmp	.+8      	; 0x3338 <__fixsfsi+0x68>
    3330:	56 95       	lsr	r21
    3332:	47 95       	ror	r20
    3334:	37 95       	ror	r19
    3336:	27 95       	ror	r18
    3338:	8a 95       	dec	r24
    333a:	d2 f7       	brpl	.-12     	; 0x3330 <__fixsfsi+0x60>
    333c:	66 23       	and	r22, r22
    333e:	b1 f0       	breq	.+44     	; 0x336c <__fixsfsi+0x9c>
    3340:	50 95       	com	r21
    3342:	40 95       	com	r20
    3344:	30 95       	com	r19
    3346:	21 95       	neg	r18
    3348:	3f 4f       	sbci	r19, 0xFF	; 255
    334a:	4f 4f       	sbci	r20, 0xFF	; 255
    334c:	5f 4f       	sbci	r21, 0xFF	; 255
    334e:	0e c0       	rjmp	.+28     	; 0x336c <__fixsfsi+0x9c>
    3350:	20 e0       	ldi	r18, 0x00	; 0
    3352:	30 e0       	ldi	r19, 0x00	; 0
    3354:	40 e0       	ldi	r20, 0x00	; 0
    3356:	50 e0       	ldi	r21, 0x00	; 0
    3358:	09 c0       	rjmp	.+18     	; 0x336c <__fixsfsi+0x9c>
    335a:	2f ef       	ldi	r18, 0xFF	; 255
    335c:	3f ef       	ldi	r19, 0xFF	; 255
    335e:	4f ef       	ldi	r20, 0xFF	; 255
    3360:	5f e7       	ldi	r21, 0x7F	; 127
    3362:	04 c0       	rjmp	.+8      	; 0x336c <__fixsfsi+0x9c>
    3364:	20 e0       	ldi	r18, 0x00	; 0
    3366:	30 e0       	ldi	r19, 0x00	; 0
    3368:	40 e0       	ldi	r20, 0x00	; 0
    336a:	50 e8       	ldi	r21, 0x80	; 128
    336c:	b9 01       	movw	r22, r18
    336e:	ca 01       	movw	r24, r20
    3370:	2c 96       	adiw	r28, 0x0c	; 12
    3372:	e2 e0       	ldi	r30, 0x02	; 2
    3374:	0c 94 6a 1c 	jmp	0x38d4	; 0x38d4 <__epilogue_restores__+0x20>

00003378 <__floatunsisf>:
    3378:	a8 e0       	ldi	r26, 0x08	; 8
    337a:	b0 e0       	ldi	r27, 0x00	; 0
    337c:	e2 ec       	ldi	r30, 0xC2	; 194
    337e:	f9 e1       	ldi	r31, 0x19	; 25
    3380:	0c 94 46 1c 	jmp	0x388c	; 0x388c <__prologue_saves__+0x10>
    3384:	7b 01       	movw	r14, r22
    3386:	8c 01       	movw	r16, r24
    3388:	61 15       	cp	r22, r1
    338a:	71 05       	cpc	r23, r1
    338c:	81 05       	cpc	r24, r1
    338e:	91 05       	cpc	r25, r1
    3390:	19 f4       	brne	.+6      	; 0x3398 <__floatunsisf+0x20>
    3392:	82 e0       	ldi	r24, 0x02	; 2
    3394:	89 83       	std	Y+1, r24	; 0x01
    3396:	60 c0       	rjmp	.+192    	; 0x3458 <__floatunsisf+0xe0>
    3398:	83 e0       	ldi	r24, 0x03	; 3
    339a:	89 83       	std	Y+1, r24	; 0x01
    339c:	8e e1       	ldi	r24, 0x1E	; 30
    339e:	c8 2e       	mov	r12, r24
    33a0:	d1 2c       	mov	r13, r1
    33a2:	dc 82       	std	Y+4, r13	; 0x04
    33a4:	cb 82       	std	Y+3, r12	; 0x03
    33a6:	ed 82       	std	Y+5, r14	; 0x05
    33a8:	fe 82       	std	Y+6, r15	; 0x06
    33aa:	0f 83       	std	Y+7, r16	; 0x07
    33ac:	18 87       	std	Y+8, r17	; 0x08
    33ae:	c8 01       	movw	r24, r16
    33b0:	b7 01       	movw	r22, r14
    33b2:	0e 94 35 1a 	call	0x346a	; 0x346a <__clzsi2>
    33b6:	fc 01       	movw	r30, r24
    33b8:	31 97       	sbiw	r30, 0x01	; 1
    33ba:	f7 ff       	sbrs	r31, 7
    33bc:	3b c0       	rjmp	.+118    	; 0x3434 <__floatunsisf+0xbc>
    33be:	22 27       	eor	r18, r18
    33c0:	33 27       	eor	r19, r19
    33c2:	2e 1b       	sub	r18, r30
    33c4:	3f 0b       	sbc	r19, r31
    33c6:	57 01       	movw	r10, r14
    33c8:	68 01       	movw	r12, r16
    33ca:	02 2e       	mov	r0, r18
    33cc:	04 c0       	rjmp	.+8      	; 0x33d6 <__floatunsisf+0x5e>
    33ce:	d6 94       	lsr	r13
    33d0:	c7 94       	ror	r12
    33d2:	b7 94       	ror	r11
    33d4:	a7 94       	ror	r10
    33d6:	0a 94       	dec	r0
    33d8:	d2 f7       	brpl	.-12     	; 0x33ce <__floatunsisf+0x56>
    33da:	40 e0       	ldi	r20, 0x00	; 0
    33dc:	50 e0       	ldi	r21, 0x00	; 0
    33de:	60 e0       	ldi	r22, 0x00	; 0
    33e0:	70 e0       	ldi	r23, 0x00	; 0
    33e2:	81 e0       	ldi	r24, 0x01	; 1
    33e4:	90 e0       	ldi	r25, 0x00	; 0
    33e6:	a0 e0       	ldi	r26, 0x00	; 0
    33e8:	b0 e0       	ldi	r27, 0x00	; 0
    33ea:	04 c0       	rjmp	.+8      	; 0x33f4 <__floatunsisf+0x7c>
    33ec:	88 0f       	add	r24, r24
    33ee:	99 1f       	adc	r25, r25
    33f0:	aa 1f       	adc	r26, r26
    33f2:	bb 1f       	adc	r27, r27
    33f4:	2a 95       	dec	r18
    33f6:	d2 f7       	brpl	.-12     	; 0x33ec <__floatunsisf+0x74>
    33f8:	01 97       	sbiw	r24, 0x01	; 1
    33fa:	a1 09       	sbc	r26, r1
    33fc:	b1 09       	sbc	r27, r1
    33fe:	8e 21       	and	r24, r14
    3400:	9f 21       	and	r25, r15
    3402:	a0 23       	and	r26, r16
    3404:	b1 23       	and	r27, r17
    3406:	00 97       	sbiw	r24, 0x00	; 0
    3408:	a1 05       	cpc	r26, r1
    340a:	b1 05       	cpc	r27, r1
    340c:	21 f0       	breq	.+8      	; 0x3416 <__floatunsisf+0x9e>
    340e:	41 e0       	ldi	r20, 0x01	; 1
    3410:	50 e0       	ldi	r21, 0x00	; 0
    3412:	60 e0       	ldi	r22, 0x00	; 0
    3414:	70 e0       	ldi	r23, 0x00	; 0
    3416:	4a 29       	or	r20, r10
    3418:	5b 29       	or	r21, r11
    341a:	6c 29       	or	r22, r12
    341c:	7d 29       	or	r23, r13
    341e:	4d 83       	std	Y+5, r20	; 0x05
    3420:	5e 83       	std	Y+6, r21	; 0x06
    3422:	6f 83       	std	Y+7, r22	; 0x07
    3424:	78 87       	std	Y+8, r23	; 0x08
    3426:	8e e1       	ldi	r24, 0x1E	; 30
    3428:	90 e0       	ldi	r25, 0x00	; 0
    342a:	8e 1b       	sub	r24, r30
    342c:	9f 0b       	sbc	r25, r31
    342e:	9c 83       	std	Y+4, r25	; 0x04
    3430:	8b 83       	std	Y+3, r24	; 0x03
    3432:	12 c0       	rjmp	.+36     	; 0x3458 <__floatunsisf+0xe0>
    3434:	30 97       	sbiw	r30, 0x00	; 0
    3436:	81 f0       	breq	.+32     	; 0x3458 <__floatunsisf+0xe0>
    3438:	0e 2e       	mov	r0, r30
    343a:	04 c0       	rjmp	.+8      	; 0x3444 <__floatunsisf+0xcc>
    343c:	ee 0c       	add	r14, r14
    343e:	ff 1c       	adc	r15, r15
    3440:	00 1f       	adc	r16, r16
    3442:	11 1f       	adc	r17, r17
    3444:	0a 94       	dec	r0
    3446:	d2 f7       	brpl	.-12     	; 0x343c <__floatunsisf+0xc4>
    3448:	ed 82       	std	Y+5, r14	; 0x05
    344a:	fe 82       	std	Y+6, r15	; 0x06
    344c:	0f 83       	std	Y+7, r16	; 0x07
    344e:	18 87       	std	Y+8, r17	; 0x08
    3450:	ce 1a       	sub	r12, r30
    3452:	df 0a       	sbc	r13, r31
    3454:	dc 82       	std	Y+4, r13	; 0x04
    3456:	cb 82       	std	Y+3, r12	; 0x03
    3458:	1a 82       	std	Y+2, r1	; 0x02
    345a:	ce 01       	movw	r24, r28
    345c:	01 96       	adiw	r24, 0x01	; 1
    345e:	0e 94 84 1a 	call	0x3508	; 0x3508 <__pack_f>
    3462:	28 96       	adiw	r28, 0x08	; 8
    3464:	ea e0       	ldi	r30, 0x0A	; 10
    3466:	0c 94 62 1c 	jmp	0x38c4	; 0x38c4 <__epilogue_restores__+0x10>

0000346a <__clzsi2>:
    346a:	ef 92       	push	r14
    346c:	ff 92       	push	r15
    346e:	0f 93       	push	r16
    3470:	1f 93       	push	r17
    3472:	7b 01       	movw	r14, r22
    3474:	8c 01       	movw	r16, r24
    3476:	80 e0       	ldi	r24, 0x00	; 0
    3478:	e8 16       	cp	r14, r24
    347a:	80 e0       	ldi	r24, 0x00	; 0
    347c:	f8 06       	cpc	r15, r24
    347e:	81 e0       	ldi	r24, 0x01	; 1
    3480:	08 07       	cpc	r16, r24
    3482:	80 e0       	ldi	r24, 0x00	; 0
    3484:	18 07       	cpc	r17, r24
    3486:	88 f4       	brcc	.+34     	; 0x34aa <__clzsi2+0x40>
    3488:	8f ef       	ldi	r24, 0xFF	; 255
    348a:	e8 16       	cp	r14, r24
    348c:	f1 04       	cpc	r15, r1
    348e:	01 05       	cpc	r16, r1
    3490:	11 05       	cpc	r17, r1
    3492:	31 f0       	breq	.+12     	; 0x34a0 <__clzsi2+0x36>
    3494:	28 f0       	brcs	.+10     	; 0x34a0 <__clzsi2+0x36>
    3496:	88 e0       	ldi	r24, 0x08	; 8
    3498:	90 e0       	ldi	r25, 0x00	; 0
    349a:	a0 e0       	ldi	r26, 0x00	; 0
    349c:	b0 e0       	ldi	r27, 0x00	; 0
    349e:	17 c0       	rjmp	.+46     	; 0x34ce <__clzsi2+0x64>
    34a0:	80 e0       	ldi	r24, 0x00	; 0
    34a2:	90 e0       	ldi	r25, 0x00	; 0
    34a4:	a0 e0       	ldi	r26, 0x00	; 0
    34a6:	b0 e0       	ldi	r27, 0x00	; 0
    34a8:	12 c0       	rjmp	.+36     	; 0x34ce <__clzsi2+0x64>
    34aa:	80 e0       	ldi	r24, 0x00	; 0
    34ac:	e8 16       	cp	r14, r24
    34ae:	80 e0       	ldi	r24, 0x00	; 0
    34b0:	f8 06       	cpc	r15, r24
    34b2:	80 e0       	ldi	r24, 0x00	; 0
    34b4:	08 07       	cpc	r16, r24
    34b6:	81 e0       	ldi	r24, 0x01	; 1
    34b8:	18 07       	cpc	r17, r24
    34ba:	28 f0       	brcs	.+10     	; 0x34c6 <__clzsi2+0x5c>
    34bc:	88 e1       	ldi	r24, 0x18	; 24
    34be:	90 e0       	ldi	r25, 0x00	; 0
    34c0:	a0 e0       	ldi	r26, 0x00	; 0
    34c2:	b0 e0       	ldi	r27, 0x00	; 0
    34c4:	04 c0       	rjmp	.+8      	; 0x34ce <__clzsi2+0x64>
    34c6:	80 e1       	ldi	r24, 0x10	; 16
    34c8:	90 e0       	ldi	r25, 0x00	; 0
    34ca:	a0 e0       	ldi	r26, 0x00	; 0
    34cc:	b0 e0       	ldi	r27, 0x00	; 0
    34ce:	20 e2       	ldi	r18, 0x20	; 32
    34d0:	30 e0       	ldi	r19, 0x00	; 0
    34d2:	40 e0       	ldi	r20, 0x00	; 0
    34d4:	50 e0       	ldi	r21, 0x00	; 0
    34d6:	28 1b       	sub	r18, r24
    34d8:	39 0b       	sbc	r19, r25
    34da:	4a 0b       	sbc	r20, r26
    34dc:	5b 0b       	sbc	r21, r27
    34de:	04 c0       	rjmp	.+8      	; 0x34e8 <__clzsi2+0x7e>
    34e0:	16 95       	lsr	r17
    34e2:	07 95       	ror	r16
    34e4:	f7 94       	ror	r15
    34e6:	e7 94       	ror	r14
    34e8:	8a 95       	dec	r24
    34ea:	d2 f7       	brpl	.-12     	; 0x34e0 <__clzsi2+0x76>
    34ec:	f7 01       	movw	r30, r14
    34ee:	e8 5f       	subi	r30, 0xF8	; 248
    34f0:	fd 4f       	sbci	r31, 0xFD	; 253
    34f2:	80 81       	ld	r24, Z
    34f4:	28 1b       	sub	r18, r24
    34f6:	31 09       	sbc	r19, r1
    34f8:	41 09       	sbc	r20, r1
    34fa:	51 09       	sbc	r21, r1
    34fc:	c9 01       	movw	r24, r18
    34fe:	1f 91       	pop	r17
    3500:	0f 91       	pop	r16
    3502:	ff 90       	pop	r15
    3504:	ef 90       	pop	r14
    3506:	08 95       	ret

00003508 <__pack_f>:
    3508:	df 92       	push	r13
    350a:	ef 92       	push	r14
    350c:	ff 92       	push	r15
    350e:	0f 93       	push	r16
    3510:	1f 93       	push	r17
    3512:	fc 01       	movw	r30, r24
    3514:	e4 80       	ldd	r14, Z+4	; 0x04
    3516:	f5 80       	ldd	r15, Z+5	; 0x05
    3518:	06 81       	ldd	r16, Z+6	; 0x06
    351a:	17 81       	ldd	r17, Z+7	; 0x07
    351c:	d1 80       	ldd	r13, Z+1	; 0x01
    351e:	80 81       	ld	r24, Z
    3520:	82 30       	cpi	r24, 0x02	; 2
    3522:	48 f4       	brcc	.+18     	; 0x3536 <__pack_f+0x2e>
    3524:	80 e0       	ldi	r24, 0x00	; 0
    3526:	90 e0       	ldi	r25, 0x00	; 0
    3528:	a0 e1       	ldi	r26, 0x10	; 16
    352a:	b0 e0       	ldi	r27, 0x00	; 0
    352c:	e8 2a       	or	r14, r24
    352e:	f9 2a       	or	r15, r25
    3530:	0a 2b       	or	r16, r26
    3532:	1b 2b       	or	r17, r27
    3534:	a5 c0       	rjmp	.+330    	; 0x3680 <__pack_f+0x178>
    3536:	84 30       	cpi	r24, 0x04	; 4
    3538:	09 f4       	brne	.+2      	; 0x353c <__pack_f+0x34>
    353a:	9f c0       	rjmp	.+318    	; 0x367a <__pack_f+0x172>
    353c:	82 30       	cpi	r24, 0x02	; 2
    353e:	21 f4       	brne	.+8      	; 0x3548 <__pack_f+0x40>
    3540:	ee 24       	eor	r14, r14
    3542:	ff 24       	eor	r15, r15
    3544:	87 01       	movw	r16, r14
    3546:	05 c0       	rjmp	.+10     	; 0x3552 <__pack_f+0x4a>
    3548:	e1 14       	cp	r14, r1
    354a:	f1 04       	cpc	r15, r1
    354c:	01 05       	cpc	r16, r1
    354e:	11 05       	cpc	r17, r1
    3550:	19 f4       	brne	.+6      	; 0x3558 <__pack_f+0x50>
    3552:	e0 e0       	ldi	r30, 0x00	; 0
    3554:	f0 e0       	ldi	r31, 0x00	; 0
    3556:	96 c0       	rjmp	.+300    	; 0x3684 <__pack_f+0x17c>
    3558:	62 81       	ldd	r22, Z+2	; 0x02
    355a:	73 81       	ldd	r23, Z+3	; 0x03
    355c:	9f ef       	ldi	r25, 0xFF	; 255
    355e:	62 38       	cpi	r22, 0x82	; 130
    3560:	79 07       	cpc	r23, r25
    3562:	0c f0       	brlt	.+2      	; 0x3566 <__pack_f+0x5e>
    3564:	5b c0       	rjmp	.+182    	; 0x361c <__pack_f+0x114>
    3566:	22 e8       	ldi	r18, 0x82	; 130
    3568:	3f ef       	ldi	r19, 0xFF	; 255
    356a:	26 1b       	sub	r18, r22
    356c:	37 0b       	sbc	r19, r23
    356e:	2a 31       	cpi	r18, 0x1A	; 26
    3570:	31 05       	cpc	r19, r1
    3572:	2c f0       	brlt	.+10     	; 0x357e <__pack_f+0x76>
    3574:	20 e0       	ldi	r18, 0x00	; 0
    3576:	30 e0       	ldi	r19, 0x00	; 0
    3578:	40 e0       	ldi	r20, 0x00	; 0
    357a:	50 e0       	ldi	r21, 0x00	; 0
    357c:	2a c0       	rjmp	.+84     	; 0x35d2 <__pack_f+0xca>
    357e:	b8 01       	movw	r22, r16
    3580:	a7 01       	movw	r20, r14
    3582:	02 2e       	mov	r0, r18
    3584:	04 c0       	rjmp	.+8      	; 0x358e <__pack_f+0x86>
    3586:	76 95       	lsr	r23
    3588:	67 95       	ror	r22
    358a:	57 95       	ror	r21
    358c:	47 95       	ror	r20
    358e:	0a 94       	dec	r0
    3590:	d2 f7       	brpl	.-12     	; 0x3586 <__pack_f+0x7e>
    3592:	81 e0       	ldi	r24, 0x01	; 1
    3594:	90 e0       	ldi	r25, 0x00	; 0
    3596:	a0 e0       	ldi	r26, 0x00	; 0
    3598:	b0 e0       	ldi	r27, 0x00	; 0
    359a:	04 c0       	rjmp	.+8      	; 0x35a4 <__pack_f+0x9c>
    359c:	88 0f       	add	r24, r24
    359e:	99 1f       	adc	r25, r25
    35a0:	aa 1f       	adc	r26, r26
    35a2:	bb 1f       	adc	r27, r27
    35a4:	2a 95       	dec	r18
    35a6:	d2 f7       	brpl	.-12     	; 0x359c <__pack_f+0x94>
    35a8:	01 97       	sbiw	r24, 0x01	; 1
    35aa:	a1 09       	sbc	r26, r1
    35ac:	b1 09       	sbc	r27, r1
    35ae:	8e 21       	and	r24, r14
    35b0:	9f 21       	and	r25, r15
    35b2:	a0 23       	and	r26, r16
    35b4:	b1 23       	and	r27, r17
    35b6:	00 97       	sbiw	r24, 0x00	; 0
    35b8:	a1 05       	cpc	r26, r1
    35ba:	b1 05       	cpc	r27, r1
    35bc:	21 f0       	breq	.+8      	; 0x35c6 <__pack_f+0xbe>
    35be:	81 e0       	ldi	r24, 0x01	; 1
    35c0:	90 e0       	ldi	r25, 0x00	; 0
    35c2:	a0 e0       	ldi	r26, 0x00	; 0
    35c4:	b0 e0       	ldi	r27, 0x00	; 0
    35c6:	9a 01       	movw	r18, r20
    35c8:	ab 01       	movw	r20, r22
    35ca:	28 2b       	or	r18, r24
    35cc:	39 2b       	or	r19, r25
    35ce:	4a 2b       	or	r20, r26
    35d0:	5b 2b       	or	r21, r27
    35d2:	da 01       	movw	r26, r20
    35d4:	c9 01       	movw	r24, r18
    35d6:	8f 77       	andi	r24, 0x7F	; 127
    35d8:	90 70       	andi	r25, 0x00	; 0
    35da:	a0 70       	andi	r26, 0x00	; 0
    35dc:	b0 70       	andi	r27, 0x00	; 0
    35de:	80 34       	cpi	r24, 0x40	; 64
    35e0:	91 05       	cpc	r25, r1
    35e2:	a1 05       	cpc	r26, r1
    35e4:	b1 05       	cpc	r27, r1
    35e6:	39 f4       	brne	.+14     	; 0x35f6 <__pack_f+0xee>
    35e8:	27 ff       	sbrs	r18, 7
    35ea:	09 c0       	rjmp	.+18     	; 0x35fe <__pack_f+0xf6>
    35ec:	20 5c       	subi	r18, 0xC0	; 192
    35ee:	3f 4f       	sbci	r19, 0xFF	; 255
    35f0:	4f 4f       	sbci	r20, 0xFF	; 255
    35f2:	5f 4f       	sbci	r21, 0xFF	; 255
    35f4:	04 c0       	rjmp	.+8      	; 0x35fe <__pack_f+0xf6>
    35f6:	21 5c       	subi	r18, 0xC1	; 193
    35f8:	3f 4f       	sbci	r19, 0xFF	; 255
    35fa:	4f 4f       	sbci	r20, 0xFF	; 255
    35fc:	5f 4f       	sbci	r21, 0xFF	; 255
    35fe:	e0 e0       	ldi	r30, 0x00	; 0
    3600:	f0 e0       	ldi	r31, 0x00	; 0
    3602:	20 30       	cpi	r18, 0x00	; 0
    3604:	a0 e0       	ldi	r26, 0x00	; 0
    3606:	3a 07       	cpc	r19, r26
    3608:	a0 e0       	ldi	r26, 0x00	; 0
    360a:	4a 07       	cpc	r20, r26
    360c:	a0 e4       	ldi	r26, 0x40	; 64
    360e:	5a 07       	cpc	r21, r26
    3610:	10 f0       	brcs	.+4      	; 0x3616 <__pack_f+0x10e>
    3612:	e1 e0       	ldi	r30, 0x01	; 1
    3614:	f0 e0       	ldi	r31, 0x00	; 0
    3616:	79 01       	movw	r14, r18
    3618:	8a 01       	movw	r16, r20
    361a:	27 c0       	rjmp	.+78     	; 0x366a <__pack_f+0x162>
    361c:	60 38       	cpi	r22, 0x80	; 128
    361e:	71 05       	cpc	r23, r1
    3620:	64 f5       	brge	.+88     	; 0x367a <__pack_f+0x172>
    3622:	fb 01       	movw	r30, r22
    3624:	e1 58       	subi	r30, 0x81	; 129
    3626:	ff 4f       	sbci	r31, 0xFF	; 255
    3628:	d8 01       	movw	r26, r16
    362a:	c7 01       	movw	r24, r14
    362c:	8f 77       	andi	r24, 0x7F	; 127
    362e:	90 70       	andi	r25, 0x00	; 0
    3630:	a0 70       	andi	r26, 0x00	; 0
    3632:	b0 70       	andi	r27, 0x00	; 0
    3634:	80 34       	cpi	r24, 0x40	; 64
    3636:	91 05       	cpc	r25, r1
    3638:	a1 05       	cpc	r26, r1
    363a:	b1 05       	cpc	r27, r1
    363c:	39 f4       	brne	.+14     	; 0x364c <__pack_f+0x144>
    363e:	e7 fe       	sbrs	r14, 7
    3640:	0d c0       	rjmp	.+26     	; 0x365c <__pack_f+0x154>
    3642:	80 e4       	ldi	r24, 0x40	; 64
    3644:	90 e0       	ldi	r25, 0x00	; 0
    3646:	a0 e0       	ldi	r26, 0x00	; 0
    3648:	b0 e0       	ldi	r27, 0x00	; 0
    364a:	04 c0       	rjmp	.+8      	; 0x3654 <__pack_f+0x14c>
    364c:	8f e3       	ldi	r24, 0x3F	; 63
    364e:	90 e0       	ldi	r25, 0x00	; 0
    3650:	a0 e0       	ldi	r26, 0x00	; 0
    3652:	b0 e0       	ldi	r27, 0x00	; 0
    3654:	e8 0e       	add	r14, r24
    3656:	f9 1e       	adc	r15, r25
    3658:	0a 1f       	adc	r16, r26
    365a:	1b 1f       	adc	r17, r27
    365c:	17 ff       	sbrs	r17, 7
    365e:	05 c0       	rjmp	.+10     	; 0x366a <__pack_f+0x162>
    3660:	16 95       	lsr	r17
    3662:	07 95       	ror	r16
    3664:	f7 94       	ror	r15
    3666:	e7 94       	ror	r14
    3668:	31 96       	adiw	r30, 0x01	; 1
    366a:	87 e0       	ldi	r24, 0x07	; 7
    366c:	16 95       	lsr	r17
    366e:	07 95       	ror	r16
    3670:	f7 94       	ror	r15
    3672:	e7 94       	ror	r14
    3674:	8a 95       	dec	r24
    3676:	d1 f7       	brne	.-12     	; 0x366c <__pack_f+0x164>
    3678:	05 c0       	rjmp	.+10     	; 0x3684 <__pack_f+0x17c>
    367a:	ee 24       	eor	r14, r14
    367c:	ff 24       	eor	r15, r15
    367e:	87 01       	movw	r16, r14
    3680:	ef ef       	ldi	r30, 0xFF	; 255
    3682:	f0 e0       	ldi	r31, 0x00	; 0
    3684:	6e 2f       	mov	r22, r30
    3686:	67 95       	ror	r22
    3688:	66 27       	eor	r22, r22
    368a:	67 95       	ror	r22
    368c:	90 2f       	mov	r25, r16
    368e:	9f 77       	andi	r25, 0x7F	; 127
    3690:	d7 94       	ror	r13
    3692:	dd 24       	eor	r13, r13
    3694:	d7 94       	ror	r13
    3696:	8e 2f       	mov	r24, r30
    3698:	86 95       	lsr	r24
    369a:	49 2f       	mov	r20, r25
    369c:	46 2b       	or	r20, r22
    369e:	58 2f       	mov	r21, r24
    36a0:	5d 29       	or	r21, r13
    36a2:	b7 01       	movw	r22, r14
    36a4:	ca 01       	movw	r24, r20
    36a6:	1f 91       	pop	r17
    36a8:	0f 91       	pop	r16
    36aa:	ff 90       	pop	r15
    36ac:	ef 90       	pop	r14
    36ae:	df 90       	pop	r13
    36b0:	08 95       	ret

000036b2 <__unpack_f>:
    36b2:	fc 01       	movw	r30, r24
    36b4:	db 01       	movw	r26, r22
    36b6:	40 81       	ld	r20, Z
    36b8:	51 81       	ldd	r21, Z+1	; 0x01
    36ba:	22 81       	ldd	r18, Z+2	; 0x02
    36bc:	62 2f       	mov	r22, r18
    36be:	6f 77       	andi	r22, 0x7F	; 127
    36c0:	70 e0       	ldi	r23, 0x00	; 0
    36c2:	22 1f       	adc	r18, r18
    36c4:	22 27       	eor	r18, r18
    36c6:	22 1f       	adc	r18, r18
    36c8:	93 81       	ldd	r25, Z+3	; 0x03
    36ca:	89 2f       	mov	r24, r25
    36cc:	88 0f       	add	r24, r24
    36ce:	82 2b       	or	r24, r18
    36d0:	28 2f       	mov	r18, r24
    36d2:	30 e0       	ldi	r19, 0x00	; 0
    36d4:	99 1f       	adc	r25, r25
    36d6:	99 27       	eor	r25, r25
    36d8:	99 1f       	adc	r25, r25
    36da:	11 96       	adiw	r26, 0x01	; 1
    36dc:	9c 93       	st	X, r25
    36de:	11 97       	sbiw	r26, 0x01	; 1
    36e0:	21 15       	cp	r18, r1
    36e2:	31 05       	cpc	r19, r1
    36e4:	a9 f5       	brne	.+106    	; 0x3750 <__unpack_f+0x9e>
    36e6:	41 15       	cp	r20, r1
    36e8:	51 05       	cpc	r21, r1
    36ea:	61 05       	cpc	r22, r1
    36ec:	71 05       	cpc	r23, r1
    36ee:	11 f4       	brne	.+4      	; 0x36f4 <__unpack_f+0x42>
    36f0:	82 e0       	ldi	r24, 0x02	; 2
    36f2:	37 c0       	rjmp	.+110    	; 0x3762 <__unpack_f+0xb0>
    36f4:	82 e8       	ldi	r24, 0x82	; 130
    36f6:	9f ef       	ldi	r25, 0xFF	; 255
    36f8:	13 96       	adiw	r26, 0x03	; 3
    36fa:	9c 93       	st	X, r25
    36fc:	8e 93       	st	-X, r24
    36fe:	12 97       	sbiw	r26, 0x02	; 2
    3700:	9a 01       	movw	r18, r20
    3702:	ab 01       	movw	r20, r22
    3704:	67 e0       	ldi	r22, 0x07	; 7
    3706:	22 0f       	add	r18, r18
    3708:	33 1f       	adc	r19, r19
    370a:	44 1f       	adc	r20, r20
    370c:	55 1f       	adc	r21, r21
    370e:	6a 95       	dec	r22
    3710:	d1 f7       	brne	.-12     	; 0x3706 <__unpack_f+0x54>
    3712:	83 e0       	ldi	r24, 0x03	; 3
    3714:	8c 93       	st	X, r24
    3716:	0d c0       	rjmp	.+26     	; 0x3732 <__unpack_f+0x80>
    3718:	22 0f       	add	r18, r18
    371a:	33 1f       	adc	r19, r19
    371c:	44 1f       	adc	r20, r20
    371e:	55 1f       	adc	r21, r21
    3720:	12 96       	adiw	r26, 0x02	; 2
    3722:	8d 91       	ld	r24, X+
    3724:	9c 91       	ld	r25, X
    3726:	13 97       	sbiw	r26, 0x03	; 3
    3728:	01 97       	sbiw	r24, 0x01	; 1
    372a:	13 96       	adiw	r26, 0x03	; 3
    372c:	9c 93       	st	X, r25
    372e:	8e 93       	st	-X, r24
    3730:	12 97       	sbiw	r26, 0x02	; 2
    3732:	20 30       	cpi	r18, 0x00	; 0
    3734:	80 e0       	ldi	r24, 0x00	; 0
    3736:	38 07       	cpc	r19, r24
    3738:	80 e0       	ldi	r24, 0x00	; 0
    373a:	48 07       	cpc	r20, r24
    373c:	80 e4       	ldi	r24, 0x40	; 64
    373e:	58 07       	cpc	r21, r24
    3740:	58 f3       	brcs	.-42     	; 0x3718 <__unpack_f+0x66>
    3742:	14 96       	adiw	r26, 0x04	; 4
    3744:	2d 93       	st	X+, r18
    3746:	3d 93       	st	X+, r19
    3748:	4d 93       	st	X+, r20
    374a:	5c 93       	st	X, r21
    374c:	17 97       	sbiw	r26, 0x07	; 7
    374e:	08 95       	ret
    3750:	2f 3f       	cpi	r18, 0xFF	; 255
    3752:	31 05       	cpc	r19, r1
    3754:	79 f4       	brne	.+30     	; 0x3774 <__unpack_f+0xc2>
    3756:	41 15       	cp	r20, r1
    3758:	51 05       	cpc	r21, r1
    375a:	61 05       	cpc	r22, r1
    375c:	71 05       	cpc	r23, r1
    375e:	19 f4       	brne	.+6      	; 0x3766 <__unpack_f+0xb4>
    3760:	84 e0       	ldi	r24, 0x04	; 4
    3762:	8c 93       	st	X, r24
    3764:	08 95       	ret
    3766:	64 ff       	sbrs	r22, 4
    3768:	03 c0       	rjmp	.+6      	; 0x3770 <__unpack_f+0xbe>
    376a:	81 e0       	ldi	r24, 0x01	; 1
    376c:	8c 93       	st	X, r24
    376e:	12 c0       	rjmp	.+36     	; 0x3794 <__unpack_f+0xe2>
    3770:	1c 92       	st	X, r1
    3772:	10 c0       	rjmp	.+32     	; 0x3794 <__unpack_f+0xe2>
    3774:	2f 57       	subi	r18, 0x7F	; 127
    3776:	30 40       	sbci	r19, 0x00	; 0
    3778:	13 96       	adiw	r26, 0x03	; 3
    377a:	3c 93       	st	X, r19
    377c:	2e 93       	st	-X, r18
    377e:	12 97       	sbiw	r26, 0x02	; 2
    3780:	83 e0       	ldi	r24, 0x03	; 3
    3782:	8c 93       	st	X, r24
    3784:	87 e0       	ldi	r24, 0x07	; 7
    3786:	44 0f       	add	r20, r20
    3788:	55 1f       	adc	r21, r21
    378a:	66 1f       	adc	r22, r22
    378c:	77 1f       	adc	r23, r23
    378e:	8a 95       	dec	r24
    3790:	d1 f7       	brne	.-12     	; 0x3786 <__unpack_f+0xd4>
    3792:	70 64       	ori	r23, 0x40	; 64
    3794:	14 96       	adiw	r26, 0x04	; 4
    3796:	4d 93       	st	X+, r20
    3798:	5d 93       	st	X+, r21
    379a:	6d 93       	st	X+, r22
    379c:	7c 93       	st	X, r23
    379e:	17 97       	sbiw	r26, 0x07	; 7
    37a0:	08 95       	ret

000037a2 <__fpcmp_parts_f>:
    37a2:	1f 93       	push	r17
    37a4:	dc 01       	movw	r26, r24
    37a6:	fb 01       	movw	r30, r22
    37a8:	9c 91       	ld	r25, X
    37aa:	92 30       	cpi	r25, 0x02	; 2
    37ac:	08 f4       	brcc	.+2      	; 0x37b0 <__fpcmp_parts_f+0xe>
    37ae:	47 c0       	rjmp	.+142    	; 0x383e <__fpcmp_parts_f+0x9c>
    37b0:	80 81       	ld	r24, Z
    37b2:	82 30       	cpi	r24, 0x02	; 2
    37b4:	08 f4       	brcc	.+2      	; 0x37b8 <__fpcmp_parts_f+0x16>
    37b6:	43 c0       	rjmp	.+134    	; 0x383e <__fpcmp_parts_f+0x9c>
    37b8:	94 30       	cpi	r25, 0x04	; 4
    37ba:	51 f4       	brne	.+20     	; 0x37d0 <__fpcmp_parts_f+0x2e>
    37bc:	11 96       	adiw	r26, 0x01	; 1
    37be:	1c 91       	ld	r17, X
    37c0:	84 30       	cpi	r24, 0x04	; 4
    37c2:	99 f5       	brne	.+102    	; 0x382a <__fpcmp_parts_f+0x88>
    37c4:	81 81       	ldd	r24, Z+1	; 0x01
    37c6:	68 2f       	mov	r22, r24
    37c8:	70 e0       	ldi	r23, 0x00	; 0
    37ca:	61 1b       	sub	r22, r17
    37cc:	71 09       	sbc	r23, r1
    37ce:	3f c0       	rjmp	.+126    	; 0x384e <__fpcmp_parts_f+0xac>
    37d0:	84 30       	cpi	r24, 0x04	; 4
    37d2:	21 f0       	breq	.+8      	; 0x37dc <__fpcmp_parts_f+0x3a>
    37d4:	92 30       	cpi	r25, 0x02	; 2
    37d6:	31 f4       	brne	.+12     	; 0x37e4 <__fpcmp_parts_f+0x42>
    37d8:	82 30       	cpi	r24, 0x02	; 2
    37da:	b9 f1       	breq	.+110    	; 0x384a <__fpcmp_parts_f+0xa8>
    37dc:	81 81       	ldd	r24, Z+1	; 0x01
    37de:	88 23       	and	r24, r24
    37e0:	89 f1       	breq	.+98     	; 0x3844 <__fpcmp_parts_f+0xa2>
    37e2:	2d c0       	rjmp	.+90     	; 0x383e <__fpcmp_parts_f+0x9c>
    37e4:	11 96       	adiw	r26, 0x01	; 1
    37e6:	1c 91       	ld	r17, X
    37e8:	11 97       	sbiw	r26, 0x01	; 1
    37ea:	82 30       	cpi	r24, 0x02	; 2
    37ec:	f1 f0       	breq	.+60     	; 0x382a <__fpcmp_parts_f+0x88>
    37ee:	81 81       	ldd	r24, Z+1	; 0x01
    37f0:	18 17       	cp	r17, r24
    37f2:	d9 f4       	brne	.+54     	; 0x382a <__fpcmp_parts_f+0x88>
    37f4:	12 96       	adiw	r26, 0x02	; 2
    37f6:	2d 91       	ld	r18, X+
    37f8:	3c 91       	ld	r19, X
    37fa:	13 97       	sbiw	r26, 0x03	; 3
    37fc:	82 81       	ldd	r24, Z+2	; 0x02
    37fe:	93 81       	ldd	r25, Z+3	; 0x03
    3800:	82 17       	cp	r24, r18
    3802:	93 07       	cpc	r25, r19
    3804:	94 f0       	brlt	.+36     	; 0x382a <__fpcmp_parts_f+0x88>
    3806:	28 17       	cp	r18, r24
    3808:	39 07       	cpc	r19, r25
    380a:	bc f0       	brlt	.+46     	; 0x383a <__fpcmp_parts_f+0x98>
    380c:	14 96       	adiw	r26, 0x04	; 4
    380e:	8d 91       	ld	r24, X+
    3810:	9d 91       	ld	r25, X+
    3812:	0d 90       	ld	r0, X+
    3814:	bc 91       	ld	r27, X
    3816:	a0 2d       	mov	r26, r0
    3818:	24 81       	ldd	r18, Z+4	; 0x04
    381a:	35 81       	ldd	r19, Z+5	; 0x05
    381c:	46 81       	ldd	r20, Z+6	; 0x06
    381e:	57 81       	ldd	r21, Z+7	; 0x07
    3820:	28 17       	cp	r18, r24
    3822:	39 07       	cpc	r19, r25
    3824:	4a 07       	cpc	r20, r26
    3826:	5b 07       	cpc	r21, r27
    3828:	18 f4       	brcc	.+6      	; 0x3830 <__fpcmp_parts_f+0x8e>
    382a:	11 23       	and	r17, r17
    382c:	41 f0       	breq	.+16     	; 0x383e <__fpcmp_parts_f+0x9c>
    382e:	0a c0       	rjmp	.+20     	; 0x3844 <__fpcmp_parts_f+0xa2>
    3830:	82 17       	cp	r24, r18
    3832:	93 07       	cpc	r25, r19
    3834:	a4 07       	cpc	r26, r20
    3836:	b5 07       	cpc	r27, r21
    3838:	40 f4       	brcc	.+16     	; 0x384a <__fpcmp_parts_f+0xa8>
    383a:	11 23       	and	r17, r17
    383c:	19 f0       	breq	.+6      	; 0x3844 <__fpcmp_parts_f+0xa2>
    383e:	61 e0       	ldi	r22, 0x01	; 1
    3840:	70 e0       	ldi	r23, 0x00	; 0
    3842:	05 c0       	rjmp	.+10     	; 0x384e <__fpcmp_parts_f+0xac>
    3844:	6f ef       	ldi	r22, 0xFF	; 255
    3846:	7f ef       	ldi	r23, 0xFF	; 255
    3848:	02 c0       	rjmp	.+4      	; 0x384e <__fpcmp_parts_f+0xac>
    384a:	60 e0       	ldi	r22, 0x00	; 0
    384c:	70 e0       	ldi	r23, 0x00	; 0
    384e:	cb 01       	movw	r24, r22
    3850:	1f 91       	pop	r17
    3852:	08 95       	ret

00003854 <__udivmodhi4>:
    3854:	aa 1b       	sub	r26, r26
    3856:	bb 1b       	sub	r27, r27
    3858:	51 e1       	ldi	r21, 0x11	; 17
    385a:	07 c0       	rjmp	.+14     	; 0x386a <__udivmodhi4_ep>

0000385c <__udivmodhi4_loop>:
    385c:	aa 1f       	adc	r26, r26
    385e:	bb 1f       	adc	r27, r27
    3860:	a6 17       	cp	r26, r22
    3862:	b7 07       	cpc	r27, r23
    3864:	10 f0       	brcs	.+4      	; 0x386a <__udivmodhi4_ep>
    3866:	a6 1b       	sub	r26, r22
    3868:	b7 0b       	sbc	r27, r23

0000386a <__udivmodhi4_ep>:
    386a:	88 1f       	adc	r24, r24
    386c:	99 1f       	adc	r25, r25
    386e:	5a 95       	dec	r21
    3870:	a9 f7       	brne	.-22     	; 0x385c <__udivmodhi4_loop>
    3872:	80 95       	com	r24
    3874:	90 95       	com	r25
    3876:	bc 01       	movw	r22, r24
    3878:	cd 01       	movw	r24, r26
    387a:	08 95       	ret

0000387c <__prologue_saves__>:
    387c:	2f 92       	push	r2
    387e:	3f 92       	push	r3
    3880:	4f 92       	push	r4
    3882:	5f 92       	push	r5
    3884:	6f 92       	push	r6
    3886:	7f 92       	push	r7
    3888:	8f 92       	push	r8
    388a:	9f 92       	push	r9
    388c:	af 92       	push	r10
    388e:	bf 92       	push	r11
    3890:	cf 92       	push	r12
    3892:	df 92       	push	r13
    3894:	ef 92       	push	r14
    3896:	ff 92       	push	r15
    3898:	0f 93       	push	r16
    389a:	1f 93       	push	r17
    389c:	cf 93       	push	r28
    389e:	df 93       	push	r29
    38a0:	cd b7       	in	r28, 0x3d	; 61
    38a2:	de b7       	in	r29, 0x3e	; 62
    38a4:	ca 1b       	sub	r28, r26
    38a6:	db 0b       	sbc	r29, r27
    38a8:	0f b6       	in	r0, 0x3f	; 63
    38aa:	f8 94       	cli
    38ac:	de bf       	out	0x3e, r29	; 62
    38ae:	0f be       	out	0x3f, r0	; 63
    38b0:	cd bf       	out	0x3d, r28	; 61
    38b2:	19 94       	eijmp

000038b4 <__epilogue_restores__>:
    38b4:	2a 88       	ldd	r2, Y+18	; 0x12
    38b6:	39 88       	ldd	r3, Y+17	; 0x11
    38b8:	48 88       	ldd	r4, Y+16	; 0x10
    38ba:	5f 84       	ldd	r5, Y+15	; 0x0f
    38bc:	6e 84       	ldd	r6, Y+14	; 0x0e
    38be:	7d 84       	ldd	r7, Y+13	; 0x0d
    38c0:	8c 84       	ldd	r8, Y+12	; 0x0c
    38c2:	9b 84       	ldd	r9, Y+11	; 0x0b
    38c4:	aa 84       	ldd	r10, Y+10	; 0x0a
    38c6:	b9 84       	ldd	r11, Y+9	; 0x09
    38c8:	c8 84       	ldd	r12, Y+8	; 0x08
    38ca:	df 80       	ldd	r13, Y+7	; 0x07
    38cc:	ee 80       	ldd	r14, Y+6	; 0x06
    38ce:	fd 80       	ldd	r15, Y+5	; 0x05
    38d0:	0c 81       	ldd	r16, Y+4	; 0x04
    38d2:	1b 81       	ldd	r17, Y+3	; 0x03
    38d4:	aa 81       	ldd	r26, Y+2	; 0x02
    38d6:	b9 81       	ldd	r27, Y+1	; 0x01
    38d8:	ce 0f       	add	r28, r30
    38da:	d1 1d       	adc	r29, r1
    38dc:	0f b6       	in	r0, 0x3f	; 63
    38de:	f8 94       	cli
    38e0:	de bf       	out	0x3e, r29	; 62
    38e2:	0f be       	out	0x3f, r0	; 63
    38e4:	cd bf       	out	0x3d, r28	; 61
    38e6:	ed 01       	movw	r28, r26
    38e8:	08 95       	ret

000038ea <pow>:
    38ea:	fa 01       	movw	r30, r20
    38ec:	ee 0f       	add	r30, r30
    38ee:	ff 1f       	adc	r31, r31
    38f0:	30 96       	adiw	r30, 0x00	; 0
    38f2:	21 05       	cpc	r18, r1
    38f4:	31 05       	cpc	r19, r1
    38f6:	99 f1       	breq	.+102    	; 0x395e <pow+0x74>
    38f8:	61 15       	cp	r22, r1
    38fa:	71 05       	cpc	r23, r1
    38fc:	61 f4       	brne	.+24     	; 0x3916 <pow+0x2c>
    38fe:	80 38       	cpi	r24, 0x80	; 128
    3900:	bf e3       	ldi	r27, 0x3F	; 63
    3902:	9b 07       	cpc	r25, r27
    3904:	49 f1       	breq	.+82     	; 0x3958 <pow+0x6e>
    3906:	68 94       	set
    3908:	90 38       	cpi	r25, 0x80	; 128
    390a:	81 05       	cpc	r24, r1
    390c:	61 f0       	breq	.+24     	; 0x3926 <pow+0x3c>
    390e:	80 38       	cpi	r24, 0x80	; 128
    3910:	bf ef       	ldi	r27, 0xFF	; 255
    3912:	9b 07       	cpc	r25, r27
    3914:	41 f0       	breq	.+16     	; 0x3926 <pow+0x3c>
    3916:	99 23       	and	r25, r25
    3918:	42 f5       	brpl	.+80     	; 0x396a <pow+0x80>
    391a:	ff 3f       	cpi	r31, 0xFF	; 255
    391c:	e1 05       	cpc	r30, r1
    391e:	31 05       	cpc	r19, r1
    3920:	21 05       	cpc	r18, r1
    3922:	11 f1       	breq	.+68     	; 0x3968 <pow+0x7e>
    3924:	e8 94       	clt
    3926:	08 94       	sec
    3928:	e7 95       	ror	r30
    392a:	d9 01       	movw	r26, r18
    392c:	aa 23       	and	r26, r26
    392e:	29 f4       	brne	.+10     	; 0x393a <pow+0x50>
    3930:	ab 2f       	mov	r26, r27
    3932:	be 2f       	mov	r27, r30
    3934:	f8 5f       	subi	r31, 0xF8	; 248
    3936:	d0 f3       	brcs	.-12     	; 0x392c <pow+0x42>
    3938:	10 c0       	rjmp	.+32     	; 0x395a <pow+0x70>
    393a:	ff 5f       	subi	r31, 0xFF	; 255
    393c:	70 f4       	brcc	.+28     	; 0x395a <pow+0x70>
    393e:	a6 95       	lsr	r26
    3940:	e0 f7       	brcc	.-8      	; 0x393a <pow+0x50>
    3942:	f7 39       	cpi	r31, 0x97	; 151
    3944:	50 f0       	brcs	.+20     	; 0x395a <pow+0x70>
    3946:	19 f0       	breq	.+6      	; 0x394e <pow+0x64>
    3948:	ff 3a       	cpi	r31, 0xAF	; 175
    394a:	38 f4       	brcc	.+14     	; 0x395a <pow+0x70>
    394c:	9f 77       	andi	r25, 0x7F	; 127
    394e:	9f 93       	push	r25
    3950:	0c d0       	rcall	.+24     	; 0x396a <pow+0x80>
    3952:	0f 90       	pop	r0
    3954:	07 fc       	sbrc	r0, 7
    3956:	90 58       	subi	r25, 0x80	; 128
    3958:	08 95       	ret
    395a:	3e f0       	brts	.+14     	; 0x396a <pow+0x80>
    395c:	49 c0       	rjmp	.+146    	; 0x39f0 <__fp_nan>
    395e:	60 e0       	ldi	r22, 0x00	; 0
    3960:	70 e0       	ldi	r23, 0x00	; 0
    3962:	80 e8       	ldi	r24, 0x80	; 128
    3964:	9f e3       	ldi	r25, 0x3F	; 63
    3966:	08 95       	ret
    3968:	4f e7       	ldi	r20, 0x7F	; 127
    396a:	9f 77       	andi	r25, 0x7F	; 127
    396c:	5f 93       	push	r21
    396e:	4f 93       	push	r20
    3970:	3f 93       	push	r19
    3972:	2f 93       	push	r18
    3974:	d0 d0       	rcall	.+416    	; 0x3b16 <log>
    3976:	2f 91       	pop	r18
    3978:	3f 91       	pop	r19
    397a:	4f 91       	pop	r20
    397c:	5f 91       	pop	r21
    397e:	14 da       	rcall	.-3032   	; 0x2da8 <__mulsf3>
    3980:	05 c0       	rjmp	.+10     	; 0x398c <exp>
    3982:	19 f4       	brne	.+6      	; 0x398a <pow+0xa0>
    3984:	0e f0       	brts	.+2      	; 0x3988 <pow+0x9e>
    3986:	2e c0       	rjmp	.+92     	; 0x39e4 <__fp_inf>
    3988:	7d c0       	rjmp	.+250    	; 0x3a84 <__fp_zero>
    398a:	32 c0       	rjmp	.+100    	; 0x39f0 <__fp_nan>

0000398c <exp>:
    398c:	61 d0       	rcall	.+194    	; 0x3a50 <__fp_splitA>
    398e:	c8 f3       	brcs	.-14     	; 0x3982 <pow+0x98>
    3990:	96 38       	cpi	r25, 0x86	; 134
    3992:	c0 f7       	brcc	.-16     	; 0x3984 <pow+0x9a>
    3994:	07 f8       	bld	r0, 7
    3996:	0f 92       	push	r0
    3998:	e8 94       	clt
    399a:	2b e3       	ldi	r18, 0x3B	; 59
    399c:	3a ea       	ldi	r19, 0xAA	; 170
    399e:	48 eb       	ldi	r20, 0xB8	; 184
    39a0:	5f e7       	ldi	r21, 0x7F	; 127
    39a2:	38 d1       	rcall	.+624    	; 0x3c14 <__mulsf3_pse>
    39a4:	0f 92       	push	r0
    39a6:	0f 92       	push	r0
    39a8:	0f 92       	push	r0
    39aa:	4d b7       	in	r20, 0x3d	; 61
    39ac:	5e b7       	in	r21, 0x3e	; 62
    39ae:	0f 92       	push	r0
    39b0:	f2 d0       	rcall	.+484    	; 0x3b96 <modf>
    39b2:	e4 ee       	ldi	r30, 0xE4	; 228
    39b4:	f0 e0       	ldi	r31, 0x00	; 0
    39b6:	1f d0       	rcall	.+62     	; 0x39f6 <__fp_powser>
    39b8:	4f 91       	pop	r20
    39ba:	5f 91       	pop	r21
    39bc:	ef 91       	pop	r30
    39be:	ff 91       	pop	r31
    39c0:	e5 95       	asr	r30
    39c2:	ee 1f       	adc	r30, r30
    39c4:	ff 1f       	adc	r31, r31
    39c6:	49 f0       	breq	.+18     	; 0x39da <exp+0x4e>
    39c8:	fe 57       	subi	r31, 0x7E	; 126
    39ca:	e0 68       	ori	r30, 0x80	; 128
    39cc:	44 27       	eor	r20, r20
    39ce:	ee 0f       	add	r30, r30
    39d0:	44 1f       	adc	r20, r20
    39d2:	fa 95       	dec	r31
    39d4:	e1 f7       	brne	.-8      	; 0x39ce <exp+0x42>
    39d6:	41 95       	neg	r20
    39d8:	55 0b       	sbc	r21, r21
    39da:	64 d0       	rcall	.+200    	; 0x3aa4 <ldexp>
    39dc:	0f 90       	pop	r0
    39de:	07 fe       	sbrs	r0, 7
    39e0:	58 c0       	rjmp	.+176    	; 0x3a92 <inverse>
    39e2:	08 95       	ret

000039e4 <__fp_inf>:
    39e4:	97 f9       	bld	r25, 7
    39e6:	9f 67       	ori	r25, 0x7F	; 127
    39e8:	80 e8       	ldi	r24, 0x80	; 128
    39ea:	70 e0       	ldi	r23, 0x00	; 0
    39ec:	60 e0       	ldi	r22, 0x00	; 0
    39ee:	08 95       	ret

000039f0 <__fp_nan>:
    39f0:	9f ef       	ldi	r25, 0xFF	; 255
    39f2:	80 ec       	ldi	r24, 0xC0	; 192
    39f4:	08 95       	ret

000039f6 <__fp_powser>:
    39f6:	df 93       	push	r29
    39f8:	cf 93       	push	r28
    39fa:	1f 93       	push	r17
    39fc:	0f 93       	push	r16
    39fe:	ff 92       	push	r15
    3a00:	ef 92       	push	r14
    3a02:	df 92       	push	r13
    3a04:	7b 01       	movw	r14, r22
    3a06:	8c 01       	movw	r16, r24
    3a08:	68 94       	set
    3a0a:	05 c0       	rjmp	.+10     	; 0x3a16 <__fp_powser+0x20>
    3a0c:	da 2e       	mov	r13, r26
    3a0e:	ef 01       	movw	r28, r30
    3a10:	ff d0       	rcall	.+510    	; 0x3c10 <__mulsf3x>
    3a12:	fe 01       	movw	r30, r28
    3a14:	e8 94       	clt
    3a16:	a5 91       	lpm	r26, Z+
    3a18:	25 91       	lpm	r18, Z+
    3a1a:	35 91       	lpm	r19, Z+
    3a1c:	45 91       	lpm	r20, Z+
    3a1e:	55 91       	lpm	r21, Z+
    3a20:	ae f3       	brts	.-22     	; 0x3a0c <__fp_powser+0x16>
    3a22:	ef 01       	movw	r28, r30
    3a24:	59 d1       	rcall	.+690    	; 0x3cd8 <__addsf3x>
    3a26:	fe 01       	movw	r30, r28
    3a28:	97 01       	movw	r18, r14
    3a2a:	a8 01       	movw	r20, r16
    3a2c:	da 94       	dec	r13
    3a2e:	79 f7       	brne	.-34     	; 0x3a0e <__fp_powser+0x18>
    3a30:	df 90       	pop	r13
    3a32:	ef 90       	pop	r14
    3a34:	ff 90       	pop	r15
    3a36:	0f 91       	pop	r16
    3a38:	1f 91       	pop	r17
    3a3a:	cf 91       	pop	r28
    3a3c:	df 91       	pop	r29
    3a3e:	08 95       	ret

00003a40 <__fp_split3>:
    3a40:	57 fd       	sbrc	r21, 7
    3a42:	90 58       	subi	r25, 0x80	; 128
    3a44:	44 0f       	add	r20, r20
    3a46:	55 1f       	adc	r21, r21
    3a48:	59 f0       	breq	.+22     	; 0x3a60 <__fp_splitA+0x10>
    3a4a:	5f 3f       	cpi	r21, 0xFF	; 255
    3a4c:	71 f0       	breq	.+28     	; 0x3a6a <__fp_splitA+0x1a>
    3a4e:	47 95       	ror	r20

00003a50 <__fp_splitA>:
    3a50:	88 0f       	add	r24, r24
    3a52:	97 fb       	bst	r25, 7
    3a54:	99 1f       	adc	r25, r25
    3a56:	61 f0       	breq	.+24     	; 0x3a70 <__fp_splitA+0x20>
    3a58:	9f 3f       	cpi	r25, 0xFF	; 255
    3a5a:	79 f0       	breq	.+30     	; 0x3a7a <__fp_splitA+0x2a>
    3a5c:	87 95       	ror	r24
    3a5e:	08 95       	ret
    3a60:	12 16       	cp	r1, r18
    3a62:	13 06       	cpc	r1, r19
    3a64:	14 06       	cpc	r1, r20
    3a66:	55 1f       	adc	r21, r21
    3a68:	f2 cf       	rjmp	.-28     	; 0x3a4e <__fp_split3+0xe>
    3a6a:	46 95       	lsr	r20
    3a6c:	f1 df       	rcall	.-30     	; 0x3a50 <__fp_splitA>
    3a6e:	08 c0       	rjmp	.+16     	; 0x3a80 <__fp_splitA+0x30>
    3a70:	16 16       	cp	r1, r22
    3a72:	17 06       	cpc	r1, r23
    3a74:	18 06       	cpc	r1, r24
    3a76:	99 1f       	adc	r25, r25
    3a78:	f1 cf       	rjmp	.-30     	; 0x3a5c <__fp_splitA+0xc>
    3a7a:	86 95       	lsr	r24
    3a7c:	71 05       	cpc	r23, r1
    3a7e:	61 05       	cpc	r22, r1
    3a80:	08 94       	sec
    3a82:	08 95       	ret

00003a84 <__fp_zero>:
    3a84:	e8 94       	clt

00003a86 <__fp_szero>:
    3a86:	bb 27       	eor	r27, r27
    3a88:	66 27       	eor	r22, r22
    3a8a:	77 27       	eor	r23, r23
    3a8c:	cb 01       	movw	r24, r22
    3a8e:	97 f9       	bld	r25, 7
    3a90:	08 95       	ret

00003a92 <inverse>:
    3a92:	9b 01       	movw	r18, r22
    3a94:	ac 01       	movw	r20, r24
    3a96:	60 e0       	ldi	r22, 0x00	; 0
    3a98:	70 e0       	ldi	r23, 0x00	; 0
    3a9a:	80 e8       	ldi	r24, 0x80	; 128
    3a9c:	9f e3       	ldi	r25, 0x3F	; 63
    3a9e:	7e ca       	rjmp	.-2820   	; 0x2f9c <__divsf3>
    3aa0:	a1 cf       	rjmp	.-190    	; 0x39e4 <__fp_inf>
    3aa2:	6d c1       	rjmp	.+730    	; 0x3d7e <__fp_mpack>

00003aa4 <ldexp>:
    3aa4:	d5 df       	rcall	.-86     	; 0x3a50 <__fp_splitA>
    3aa6:	e8 f3       	brcs	.-6      	; 0x3aa2 <inverse+0x10>
    3aa8:	99 23       	and	r25, r25
    3aaa:	d9 f3       	breq	.-10     	; 0x3aa2 <inverse+0x10>
    3aac:	94 0f       	add	r25, r20
    3aae:	51 1d       	adc	r21, r1
    3ab0:	bb f3       	brvs	.-18     	; 0x3aa0 <inverse+0xe>
    3ab2:	91 50       	subi	r25, 0x01	; 1
    3ab4:	50 40       	sbci	r21, 0x00	; 0
    3ab6:	94 f0       	brlt	.+36     	; 0x3adc <ldexp+0x38>
    3ab8:	59 f0       	breq	.+22     	; 0x3ad0 <ldexp+0x2c>
    3aba:	88 23       	and	r24, r24
    3abc:	32 f0       	brmi	.+12     	; 0x3aca <ldexp+0x26>
    3abe:	66 0f       	add	r22, r22
    3ac0:	77 1f       	adc	r23, r23
    3ac2:	88 1f       	adc	r24, r24
    3ac4:	91 50       	subi	r25, 0x01	; 1
    3ac6:	50 40       	sbci	r21, 0x00	; 0
    3ac8:	c1 f7       	brne	.-16     	; 0x3aba <ldexp+0x16>
    3aca:	9e 3f       	cpi	r25, 0xFE	; 254
    3acc:	51 05       	cpc	r21, r1
    3ace:	44 f7       	brge	.-48     	; 0x3aa0 <inverse+0xe>
    3ad0:	88 0f       	add	r24, r24
    3ad2:	91 1d       	adc	r25, r1
    3ad4:	96 95       	lsr	r25
    3ad6:	87 95       	ror	r24
    3ad8:	97 f9       	bld	r25, 7
    3ada:	08 95       	ret
    3adc:	5f 3f       	cpi	r21, 0xFF	; 255
    3ade:	ac f0       	brlt	.+42     	; 0x3b0a <ldexp+0x66>
    3ae0:	98 3e       	cpi	r25, 0xE8	; 232
    3ae2:	9c f0       	brlt	.+38     	; 0x3b0a <ldexp+0x66>
    3ae4:	bb 27       	eor	r27, r27
    3ae6:	86 95       	lsr	r24
    3ae8:	77 95       	ror	r23
    3aea:	67 95       	ror	r22
    3aec:	b7 95       	ror	r27
    3aee:	08 f4       	brcc	.+2      	; 0x3af2 <ldexp+0x4e>
    3af0:	b1 60       	ori	r27, 0x01	; 1
    3af2:	93 95       	inc	r25
    3af4:	c1 f7       	brne	.-16     	; 0x3ae6 <ldexp+0x42>
    3af6:	bb 0f       	add	r27, r27
    3af8:	58 f7       	brcc	.-42     	; 0x3ad0 <ldexp+0x2c>
    3afa:	11 f4       	brne	.+4      	; 0x3b00 <ldexp+0x5c>
    3afc:	60 ff       	sbrs	r22, 0
    3afe:	e8 cf       	rjmp	.-48     	; 0x3ad0 <ldexp+0x2c>
    3b00:	6f 5f       	subi	r22, 0xFF	; 255
    3b02:	7f 4f       	sbci	r23, 0xFF	; 255
    3b04:	8f 4f       	sbci	r24, 0xFF	; 255
    3b06:	9f 4f       	sbci	r25, 0xFF	; 255
    3b08:	e3 cf       	rjmp	.-58     	; 0x3ad0 <ldexp+0x2c>
    3b0a:	bd cf       	rjmp	.-134    	; 0x3a86 <__fp_szero>
    3b0c:	0e f0       	brts	.+2      	; 0x3b10 <ldexp+0x6c>
    3b0e:	37 c1       	rjmp	.+622    	; 0x3d7e <__fp_mpack>
    3b10:	6f cf       	rjmp	.-290    	; 0x39f0 <__fp_nan>
    3b12:	68 94       	set
    3b14:	67 cf       	rjmp	.-306    	; 0x39e4 <__fp_inf>

00003b16 <log>:
    3b16:	9c df       	rcall	.-200    	; 0x3a50 <__fp_splitA>
    3b18:	c8 f3       	brcs	.-14     	; 0x3b0c <ldexp+0x68>
    3b1a:	99 23       	and	r25, r25
    3b1c:	d1 f3       	breq	.-12     	; 0x3b12 <ldexp+0x6e>
    3b1e:	c6 f3       	brts	.-16     	; 0x3b10 <ldexp+0x6c>
    3b20:	df 93       	push	r29
    3b22:	cf 93       	push	r28
    3b24:	1f 93       	push	r17
    3b26:	0f 93       	push	r16
    3b28:	ff 92       	push	r15
    3b2a:	c9 2f       	mov	r28, r25
    3b2c:	dd 27       	eor	r29, r29
    3b2e:	88 23       	and	r24, r24
    3b30:	2a f0       	brmi	.+10     	; 0x3b3c <log+0x26>
    3b32:	21 97       	sbiw	r28, 0x01	; 1
    3b34:	66 0f       	add	r22, r22
    3b36:	77 1f       	adc	r23, r23
    3b38:	88 1f       	adc	r24, r24
    3b3a:	da f7       	brpl	.-10     	; 0x3b32 <log+0x1c>
    3b3c:	20 e0       	ldi	r18, 0x00	; 0
    3b3e:	30 e0       	ldi	r19, 0x00	; 0
    3b40:	40 e8       	ldi	r20, 0x80	; 128
    3b42:	5f eb       	ldi	r21, 0xBF	; 191
    3b44:	9f e3       	ldi	r25, 0x3F	; 63
    3b46:	88 39       	cpi	r24, 0x98	; 152
    3b48:	20 f0       	brcs	.+8      	; 0x3b52 <log+0x3c>
    3b4a:	80 3e       	cpi	r24, 0xE0	; 224
    3b4c:	30 f0       	brcs	.+12     	; 0x3b5a <log+0x44>
    3b4e:	21 96       	adiw	r28, 0x01	; 1
    3b50:	8f 77       	andi	r24, 0x7F	; 127
    3b52:	fd d8       	rcall	.-3590   	; 0x2d4e <__addsf3>
    3b54:	ec e0       	ldi	r30, 0x0C	; 12
    3b56:	f1 e0       	ldi	r31, 0x01	; 1
    3b58:	03 c0       	rjmp	.+6      	; 0x3b60 <log+0x4a>
    3b5a:	f9 d8       	rcall	.-3598   	; 0x2d4e <__addsf3>
    3b5c:	e9 e3       	ldi	r30, 0x39	; 57
    3b5e:	f1 e0       	ldi	r31, 0x01	; 1
    3b60:	4a df       	rcall	.-364    	; 0x39f6 <__fp_powser>
    3b62:	8b 01       	movw	r16, r22
    3b64:	be 01       	movw	r22, r28
    3b66:	ec 01       	movw	r28, r24
    3b68:	fb 2e       	mov	r15, r27
    3b6a:	6f 57       	subi	r22, 0x7F	; 127
    3b6c:	71 09       	sbc	r23, r1
    3b6e:	75 95       	asr	r23
    3b70:	77 1f       	adc	r23, r23
    3b72:	88 0b       	sbc	r24, r24
    3b74:	99 0b       	sbc	r25, r25
    3b76:	4e db       	rcall	.-2404   	; 0x3214 <__floatsisf>
    3b78:	28 e1       	ldi	r18, 0x18	; 24
    3b7a:	32 e7       	ldi	r19, 0x72	; 114
    3b7c:	41 e3       	ldi	r20, 0x31	; 49
    3b7e:	5f e3       	ldi	r21, 0x3F	; 63
    3b80:	47 d0       	rcall	.+142    	; 0x3c10 <__mulsf3x>
    3b82:	af 2d       	mov	r26, r15
    3b84:	98 01       	movw	r18, r16
    3b86:	ae 01       	movw	r20, r28
    3b88:	ff 90       	pop	r15
    3b8a:	0f 91       	pop	r16
    3b8c:	1f 91       	pop	r17
    3b8e:	cf 91       	pop	r28
    3b90:	df 91       	pop	r29
    3b92:	a2 d0       	rcall	.+324    	; 0x3cd8 <__addsf3x>
    3b94:	10 c1       	rjmp	.+544    	; 0x3db6 <__fp_round>

00003b96 <modf>:
    3b96:	fa 01       	movw	r30, r20
    3b98:	dc 01       	movw	r26, r24
    3b9a:	aa 0f       	add	r26, r26
    3b9c:	bb 1f       	adc	r27, r27
    3b9e:	9b 01       	movw	r18, r22
    3ba0:	ac 01       	movw	r20, r24
    3ba2:	bf 57       	subi	r27, 0x7F	; 127
    3ba4:	28 f4       	brcc	.+10     	; 0x3bb0 <modf+0x1a>
    3ba6:	22 27       	eor	r18, r18
    3ba8:	33 27       	eor	r19, r19
    3baa:	44 27       	eor	r20, r20
    3bac:	50 78       	andi	r21, 0x80	; 128
    3bae:	1f c0       	rjmp	.+62     	; 0x3bee <modf+0x58>
    3bb0:	b7 51       	subi	r27, 0x17	; 23
    3bb2:	88 f4       	brcc	.+34     	; 0x3bd6 <modf+0x40>
    3bb4:	ab 2f       	mov	r26, r27
    3bb6:	00 24       	eor	r0, r0
    3bb8:	46 95       	lsr	r20
    3bba:	37 95       	ror	r19
    3bbc:	27 95       	ror	r18
    3bbe:	01 1c       	adc	r0, r1
    3bc0:	a3 95       	inc	r26
    3bc2:	d2 f3       	brmi	.-12     	; 0x3bb8 <modf+0x22>
    3bc4:	00 20       	and	r0, r0
    3bc6:	69 f0       	breq	.+26     	; 0x3be2 <modf+0x4c>
    3bc8:	22 0f       	add	r18, r18
    3bca:	33 1f       	adc	r19, r19
    3bcc:	44 1f       	adc	r20, r20
    3bce:	b3 95       	inc	r27
    3bd0:	da f3       	brmi	.-10     	; 0x3bc8 <modf+0x32>
    3bd2:	0d d0       	rcall	.+26     	; 0x3bee <modf+0x58>
    3bd4:	8b c8       	rjmp	.-3818   	; 0x2cec <__subsf3>
    3bd6:	61 30       	cpi	r22, 0x01	; 1
    3bd8:	71 05       	cpc	r23, r1
    3bda:	a0 e8       	ldi	r26, 0x80	; 128
    3bdc:	8a 07       	cpc	r24, r26
    3bde:	b9 46       	sbci	r27, 0x69	; 105
    3be0:	30 f4       	brcc	.+12     	; 0x3bee <modf+0x58>
    3be2:	9b 01       	movw	r18, r22
    3be4:	ac 01       	movw	r20, r24
    3be6:	66 27       	eor	r22, r22
    3be8:	77 27       	eor	r23, r23
    3bea:	88 27       	eor	r24, r24
    3bec:	90 78       	andi	r25, 0x80	; 128
    3bee:	30 96       	adiw	r30, 0x00	; 0
    3bf0:	21 f0       	breq	.+8      	; 0x3bfa <modf+0x64>
    3bf2:	20 83       	st	Z, r18
    3bf4:	31 83       	std	Z+1, r19	; 0x01
    3bf6:	42 83       	std	Z+2, r20	; 0x02
    3bf8:	53 83       	std	Z+3, r21	; 0x03
    3bfa:	08 95       	ret
    3bfc:	ce d0       	rcall	.+412    	; 0x3d9a <__fp_pscA>
    3bfe:	28 f0       	brcs	.+10     	; 0x3c0a <modf+0x74>
    3c00:	d3 d0       	rcall	.+422    	; 0x3da8 <__fp_pscB>
    3c02:	18 f0       	brcs	.+6      	; 0x3c0a <modf+0x74>
    3c04:	95 23       	and	r25, r21
    3c06:	09 f0       	breq	.+2      	; 0x3c0a <modf+0x74>
    3c08:	ed ce       	rjmp	.-550    	; 0x39e4 <__fp_inf>
    3c0a:	f2 ce       	rjmp	.-540    	; 0x39f0 <__fp_nan>
    3c0c:	11 24       	eor	r1, r1
    3c0e:	3b cf       	rjmp	.-394    	; 0x3a86 <__fp_szero>

00003c10 <__mulsf3x>:
    3c10:	17 df       	rcall	.-466    	; 0x3a40 <__fp_split3>
    3c12:	a0 f3       	brcs	.-24     	; 0x3bfc <modf+0x66>

00003c14 <__mulsf3_pse>:
    3c14:	95 9f       	mul	r25, r21
    3c16:	d1 f3       	breq	.-12     	; 0x3c0c <modf+0x76>
    3c18:	95 0f       	add	r25, r21
    3c1a:	50 e0       	ldi	r21, 0x00	; 0
    3c1c:	55 1f       	adc	r21, r21
    3c1e:	62 9f       	mul	r22, r18
    3c20:	f0 01       	movw	r30, r0
    3c22:	72 9f       	mul	r23, r18
    3c24:	bb 27       	eor	r27, r27
    3c26:	f0 0d       	add	r31, r0
    3c28:	b1 1d       	adc	r27, r1
    3c2a:	63 9f       	mul	r22, r19
    3c2c:	aa 27       	eor	r26, r26
    3c2e:	f0 0d       	add	r31, r0
    3c30:	b1 1d       	adc	r27, r1
    3c32:	aa 1f       	adc	r26, r26
    3c34:	64 9f       	mul	r22, r20
    3c36:	66 27       	eor	r22, r22
    3c38:	b0 0d       	add	r27, r0
    3c3a:	a1 1d       	adc	r26, r1
    3c3c:	66 1f       	adc	r22, r22
    3c3e:	82 9f       	mul	r24, r18
    3c40:	22 27       	eor	r18, r18
    3c42:	b0 0d       	add	r27, r0
    3c44:	a1 1d       	adc	r26, r1
    3c46:	62 1f       	adc	r22, r18
    3c48:	73 9f       	mul	r23, r19
    3c4a:	b0 0d       	add	r27, r0
    3c4c:	a1 1d       	adc	r26, r1
    3c4e:	62 1f       	adc	r22, r18
    3c50:	83 9f       	mul	r24, r19
    3c52:	a0 0d       	add	r26, r0
    3c54:	61 1d       	adc	r22, r1
    3c56:	22 1f       	adc	r18, r18
    3c58:	74 9f       	mul	r23, r20
    3c5a:	33 27       	eor	r19, r19
    3c5c:	a0 0d       	add	r26, r0
    3c5e:	61 1d       	adc	r22, r1
    3c60:	23 1f       	adc	r18, r19
    3c62:	84 9f       	mul	r24, r20
    3c64:	60 0d       	add	r22, r0
    3c66:	21 1d       	adc	r18, r1
    3c68:	82 2f       	mov	r24, r18
    3c6a:	76 2f       	mov	r23, r22
    3c6c:	6a 2f       	mov	r22, r26
    3c6e:	11 24       	eor	r1, r1
    3c70:	9f 57       	subi	r25, 0x7F	; 127
    3c72:	50 40       	sbci	r21, 0x00	; 0
    3c74:	8a f0       	brmi	.+34     	; 0x3c98 <__mulsf3_pse+0x84>
    3c76:	e1 f0       	breq	.+56     	; 0x3cb0 <__mulsf3_pse+0x9c>
    3c78:	88 23       	and	r24, r24
    3c7a:	4a f0       	brmi	.+18     	; 0x3c8e <__mulsf3_pse+0x7a>
    3c7c:	ee 0f       	add	r30, r30
    3c7e:	ff 1f       	adc	r31, r31
    3c80:	bb 1f       	adc	r27, r27
    3c82:	66 1f       	adc	r22, r22
    3c84:	77 1f       	adc	r23, r23
    3c86:	88 1f       	adc	r24, r24
    3c88:	91 50       	subi	r25, 0x01	; 1
    3c8a:	50 40       	sbci	r21, 0x00	; 0
    3c8c:	a9 f7       	brne	.-22     	; 0x3c78 <__mulsf3_pse+0x64>
    3c8e:	9e 3f       	cpi	r25, 0xFE	; 254
    3c90:	51 05       	cpc	r21, r1
    3c92:	70 f0       	brcs	.+28     	; 0x3cb0 <__mulsf3_pse+0x9c>
    3c94:	a7 ce       	rjmp	.-690    	; 0x39e4 <__fp_inf>
    3c96:	f7 ce       	rjmp	.-530    	; 0x3a86 <__fp_szero>
    3c98:	5f 3f       	cpi	r21, 0xFF	; 255
    3c9a:	ec f3       	brlt	.-6      	; 0x3c96 <__mulsf3_pse+0x82>
    3c9c:	98 3e       	cpi	r25, 0xE8	; 232
    3c9e:	dc f3       	brlt	.-10     	; 0x3c96 <__mulsf3_pse+0x82>
    3ca0:	86 95       	lsr	r24
    3ca2:	77 95       	ror	r23
    3ca4:	67 95       	ror	r22
    3ca6:	b7 95       	ror	r27
    3ca8:	f7 95       	ror	r31
    3caa:	e7 95       	ror	r30
    3cac:	9f 5f       	subi	r25, 0xFF	; 255
    3cae:	c1 f7       	brne	.-16     	; 0x3ca0 <__mulsf3_pse+0x8c>
    3cb0:	fe 2b       	or	r31, r30
    3cb2:	88 0f       	add	r24, r24
    3cb4:	91 1d       	adc	r25, r1
    3cb6:	96 95       	lsr	r25
    3cb8:	87 95       	ror	r24
    3cba:	97 f9       	bld	r25, 7
    3cbc:	08 95       	ret
    3cbe:	6d d0       	rcall	.+218    	; 0x3d9a <__fp_pscA>
    3cc0:	30 f0       	brcs	.+12     	; 0x3cce <__mulsf3_pse+0xba>
    3cc2:	72 d0       	rcall	.+228    	; 0x3da8 <__fp_pscB>
    3cc4:	20 f0       	brcs	.+8      	; 0x3cce <__mulsf3_pse+0xba>
    3cc6:	31 f4       	brne	.+12     	; 0x3cd4 <__mulsf3_pse+0xc0>
    3cc8:	9f 3f       	cpi	r25, 0xFF	; 255
    3cca:	11 f4       	brne	.+4      	; 0x3cd0 <__mulsf3_pse+0xbc>
    3ccc:	1e f4       	brtc	.+6      	; 0x3cd4 <__mulsf3_pse+0xc0>
    3cce:	90 ce       	rjmp	.-736    	; 0x39f0 <__fp_nan>
    3cd0:	0e f4       	brtc	.+2      	; 0x3cd4 <__mulsf3_pse+0xc0>
    3cd2:	e0 95       	com	r30
    3cd4:	e7 fb       	bst	r30, 7
    3cd6:	86 ce       	rjmp	.-756    	; 0x39e4 <__fp_inf>

00003cd8 <__addsf3x>:
    3cd8:	e9 2f       	mov	r30, r25
    3cda:	b2 de       	rcall	.-668    	; 0x3a40 <__fp_split3>
    3cdc:	80 f3       	brcs	.-32     	; 0x3cbe <__mulsf3_pse+0xaa>
    3cde:	ba 17       	cp	r27, r26
    3ce0:	62 07       	cpc	r22, r18
    3ce2:	73 07       	cpc	r23, r19
    3ce4:	84 07       	cpc	r24, r20
    3ce6:	95 07       	cpc	r25, r21
    3ce8:	18 f0       	brcs	.+6      	; 0x3cf0 <__addsf3x+0x18>
    3cea:	71 f4       	brne	.+28     	; 0x3d08 <__addsf3x+0x30>
    3cec:	9e f5       	brtc	.+102    	; 0x3d54 <__addsf3x+0x7c>
    3cee:	ca ce       	rjmp	.-620    	; 0x3a84 <__fp_zero>
    3cf0:	0e f4       	brtc	.+2      	; 0x3cf4 <__addsf3x+0x1c>
    3cf2:	e0 95       	com	r30
    3cf4:	0b 2e       	mov	r0, r27
    3cf6:	ba 2f       	mov	r27, r26
    3cf8:	a0 2d       	mov	r26, r0
    3cfa:	0b 01       	movw	r0, r22
    3cfc:	b9 01       	movw	r22, r18
    3cfe:	90 01       	movw	r18, r0
    3d00:	0c 01       	movw	r0, r24
    3d02:	ca 01       	movw	r24, r20
    3d04:	a0 01       	movw	r20, r0
    3d06:	11 24       	eor	r1, r1
    3d08:	ff 27       	eor	r31, r31
    3d0a:	59 1b       	sub	r21, r25
    3d0c:	99 f0       	breq	.+38     	; 0x3d34 <__addsf3x+0x5c>
    3d0e:	59 3f       	cpi	r21, 0xF9	; 249
    3d10:	50 f4       	brcc	.+20     	; 0x3d26 <__addsf3x+0x4e>
    3d12:	50 3e       	cpi	r21, 0xE0	; 224
    3d14:	68 f1       	brcs	.+90     	; 0x3d70 <__addsf3x+0x98>
    3d16:	1a 16       	cp	r1, r26
    3d18:	f0 40       	sbci	r31, 0x00	; 0
    3d1a:	a2 2f       	mov	r26, r18
    3d1c:	23 2f       	mov	r18, r19
    3d1e:	34 2f       	mov	r19, r20
    3d20:	44 27       	eor	r20, r20
    3d22:	58 5f       	subi	r21, 0xF8	; 248
    3d24:	f3 cf       	rjmp	.-26     	; 0x3d0c <__addsf3x+0x34>
    3d26:	46 95       	lsr	r20
    3d28:	37 95       	ror	r19
    3d2a:	27 95       	ror	r18
    3d2c:	a7 95       	ror	r26
    3d2e:	f0 40       	sbci	r31, 0x00	; 0
    3d30:	53 95       	inc	r21
    3d32:	c9 f7       	brne	.-14     	; 0x3d26 <__addsf3x+0x4e>
    3d34:	7e f4       	brtc	.+30     	; 0x3d54 <__addsf3x+0x7c>
    3d36:	1f 16       	cp	r1, r31
    3d38:	ba 0b       	sbc	r27, r26
    3d3a:	62 0b       	sbc	r22, r18
    3d3c:	73 0b       	sbc	r23, r19
    3d3e:	84 0b       	sbc	r24, r20
    3d40:	ba f0       	brmi	.+46     	; 0x3d70 <__addsf3x+0x98>
    3d42:	91 50       	subi	r25, 0x01	; 1
    3d44:	a1 f0       	breq	.+40     	; 0x3d6e <__addsf3x+0x96>
    3d46:	ff 0f       	add	r31, r31
    3d48:	bb 1f       	adc	r27, r27
    3d4a:	66 1f       	adc	r22, r22
    3d4c:	77 1f       	adc	r23, r23
    3d4e:	88 1f       	adc	r24, r24
    3d50:	c2 f7       	brpl	.-16     	; 0x3d42 <__addsf3x+0x6a>
    3d52:	0e c0       	rjmp	.+28     	; 0x3d70 <__addsf3x+0x98>
    3d54:	ba 0f       	add	r27, r26
    3d56:	62 1f       	adc	r22, r18
    3d58:	73 1f       	adc	r23, r19
    3d5a:	84 1f       	adc	r24, r20
    3d5c:	48 f4       	brcc	.+18     	; 0x3d70 <__addsf3x+0x98>
    3d5e:	87 95       	ror	r24
    3d60:	77 95       	ror	r23
    3d62:	67 95       	ror	r22
    3d64:	b7 95       	ror	r27
    3d66:	f7 95       	ror	r31
    3d68:	9e 3f       	cpi	r25, 0xFE	; 254
    3d6a:	08 f0       	brcs	.+2      	; 0x3d6e <__addsf3x+0x96>
    3d6c:	b3 cf       	rjmp	.-154    	; 0x3cd4 <__mulsf3_pse+0xc0>
    3d6e:	93 95       	inc	r25
    3d70:	88 0f       	add	r24, r24
    3d72:	08 f0       	brcs	.+2      	; 0x3d76 <__addsf3x+0x9e>
    3d74:	99 27       	eor	r25, r25
    3d76:	ee 0f       	add	r30, r30
    3d78:	97 95       	ror	r25
    3d7a:	87 95       	ror	r24
    3d7c:	08 95       	ret

00003d7e <__fp_mpack>:
    3d7e:	9f 3f       	cpi	r25, 0xFF	; 255
    3d80:	31 f0       	breq	.+12     	; 0x3d8e <__fp_mpack_finite+0xc>

00003d82 <__fp_mpack_finite>:
    3d82:	91 50       	subi	r25, 0x01	; 1
    3d84:	20 f4       	brcc	.+8      	; 0x3d8e <__fp_mpack_finite+0xc>
    3d86:	87 95       	ror	r24
    3d88:	77 95       	ror	r23
    3d8a:	67 95       	ror	r22
    3d8c:	b7 95       	ror	r27
    3d8e:	88 0f       	add	r24, r24
    3d90:	91 1d       	adc	r25, r1
    3d92:	96 95       	lsr	r25
    3d94:	87 95       	ror	r24
    3d96:	97 f9       	bld	r25, 7
    3d98:	08 95       	ret

00003d9a <__fp_pscA>:
    3d9a:	00 24       	eor	r0, r0
    3d9c:	0a 94       	dec	r0
    3d9e:	16 16       	cp	r1, r22
    3da0:	17 06       	cpc	r1, r23
    3da2:	18 06       	cpc	r1, r24
    3da4:	09 06       	cpc	r0, r25
    3da6:	08 95       	ret

00003da8 <__fp_pscB>:
    3da8:	00 24       	eor	r0, r0
    3daa:	0a 94       	dec	r0
    3dac:	12 16       	cp	r1, r18
    3dae:	13 06       	cpc	r1, r19
    3db0:	14 06       	cpc	r1, r20
    3db2:	05 06       	cpc	r0, r21
    3db4:	08 95       	ret

00003db6 <__fp_round>:
    3db6:	09 2e       	mov	r0, r25
    3db8:	03 94       	inc	r0
    3dba:	00 0c       	add	r0, r0
    3dbc:	11 f4       	brne	.+4      	; 0x3dc2 <__fp_round+0xc>
    3dbe:	88 23       	and	r24, r24
    3dc0:	52 f0       	brmi	.+20     	; 0x3dd6 <__fp_round+0x20>
    3dc2:	bb 0f       	add	r27, r27
    3dc4:	40 f4       	brcc	.+16     	; 0x3dd6 <__fp_round+0x20>
    3dc6:	bf 2b       	or	r27, r31
    3dc8:	11 f4       	brne	.+4      	; 0x3dce <__fp_round+0x18>
    3dca:	60 ff       	sbrs	r22, 0
    3dcc:	04 c0       	rjmp	.+8      	; 0x3dd6 <__fp_round+0x20>
    3dce:	6f 5f       	subi	r22, 0xFF	; 255
    3dd0:	7f 4f       	sbci	r23, 0xFF	; 255
    3dd2:	8f 4f       	sbci	r24, 0xFF	; 255
    3dd4:	9f 4f       	sbci	r25, 0xFF	; 255
    3dd6:	08 95       	ret

00003dd8 <_exit>:
    3dd8:	f8 94       	cli

00003dda <__stop_program>:
    3dda:	ff cf       	rjmp	.-2      	; 0x3dda <__stop_program>
